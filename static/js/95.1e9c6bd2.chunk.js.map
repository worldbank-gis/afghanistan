{"version":3,"file":"static/js/95.1e9c6bd2.chunk.js","mappings":"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","sources":["assets/data/ColorLegendsData.js","components/MapLegend.js","components/RasterLayerLegend.js","components/charts/BiomassProductionChart.js","pages/BiomassPage.js"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [350, 230, 150, 80],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"350\",\n        MinValue: \"80\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [15, 10, 5, 1],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"15\",\n        MinValue: \"1\",\n    },\n    pcp_ssp585:{\n        Title: \"Precipitation\",\n        Unit: \"(mm)\",\n        Value: [200, 100, 50, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"200\",\n        MinValue: \"0\",\n    },\n    pcp_ssp245:{\n        Title: \"Precipitation\",\n        Unit: \"(mm)\",\n        Value: [100, 80, 40, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"100\",\n        MinValue: \"0\",\n    },\n    tdeg_ssp245:{\n        Title: \"Temperature\",\n        Unit: \"(°C)\",\n        Value: [3, 2, 1, 0],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"3\",\n        MinValue: \"0\",\n    },\n    tdeg_ssp585:{\n        Title: \"Temperature\",\n        Unit: \"(°C)\",\n        Value: [3, 2, 1, 0],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"3\",\n        MinValue: \"0\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 20],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [1800, 1500, 1200, 800],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"1800\",\n        MinValue: \"800\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [280, 200, 150, 50],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"280\",\n        MinValue: \"50\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [80, 50, 20, 10],\n        Colors: [\"#eff24b\", \"#fcd432\", \"#fca132\",\"#f24207\", \"#802101\"],\n        MaxValue: \"80\",\n        MinValue: \"10\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [15, 10, 5, 0.2],\n        Colors: [\"#eff24b\", \"#fcd432\", \"#fca132\",\"#f24207\", \"#802101\"],\n        MaxValue: \"15\",\n        MinValue: \"0.2\",\n    },\n    // NPP*22022\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [360, 300, 200, 13],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"8000\",\n        MinValue: \"300\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [9, 6, 2, 0.4],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"200\",\n        MinValue: \"10\",\n    },\n    Yearly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"(kg/m3)\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#017d09\", \"#02c70f\", \"#fc8003\", \"#fc3503\",\"#ab3600\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n\n\n\n    Yearly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Yearly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n","import React from 'react';\n\nconst MapLegend = ({ ColorLegendsDataItem }) => {\n    const { Title, Unit, Colors, MaxValue, MinValue } = ColorLegendsDataItem;\n    const gradientColors = Colors.join(', ');\n    const firstColor = Colors[0];\n    const lastColor = Colors[Colors.length - 1];\n\n    return (\n        <div className=\"legend_container\">\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n            <div className=\"legend-color-container\">\n            <div className='legend_left_arrow' style={{borderRight: `25px solid ${lastColor}`}}></div>\n                <div className='legend-color' style={{ backgroundImage: `linear-gradient(to left, ${gradientColors})` }}></div>\n                <div className='legend_right_arrow' style={{borderLeft: `25px solid ${firstColor}`}}></div>\n            </div>\n            <div className=\"legend-item\">\n                <p className=\"legend-num-value\">{MinValue}</p>\n                <p className=\"legend-num-value\"> {MaxValue}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default MapLegend;\n","import React from 'react'\n\nconst RasterLayerLegend = ({ legendURL, Title, Unit }) => {\n    return (\n        <div className=\"legend_container\">\n\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n\n\n            <img\n                src={legendURL}\n                alt=\"Legend_Img\"\n\n            />\n\n        </div>\n\n    )\n}\n\nexport default RasterLayerLegend","import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateAverageOfArray, calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst BiomassProductionChart = ({ filteredFeaturesItems }) => {\n    const districtData = filteredFeaturesItems.map((entry) => ({\n        name: entry.DISTRICT,\n        biomassProduction: calculateAverageOfArray(getAnnualDataFromMonthly(entry.NPP.map((npp) => npp * 22.22))).toFixed(0)\n    }));\n\n    // Sort the district data based on biomass production (highest to lowest)\n    districtData.sort((a, b) => b.biomassProduction - a.biomassProduction);\n\n    const districtNames = districtData.map((entry) => entry.name);\n    const biomassProduction = districtData.map((entry) => entry.biomassProduction);\n\n    // Calculate the minimum height based on the number of districts\n    const minHeightPerDistrict = 20; // Adjust this value as needed\n    const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n    \n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: true\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Average Biomass Mean Annual (kg/ha/year)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (kg/ha/year)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: biomassProduction\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default BiomassProductionChart","import React, { useState } from \"react\";\nimport SearchBar from \"../components/SearchBar\";\nimport { MapContainer, GeoJSON, TileLayer, ImageOverlay } from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport BaseMap from \"../components/BaseMap\";\nimport AfghanistanCountry from \"../assets/data/shapefiles/AFG_boundary.json\";\nimport {\n  MonthsArray,\n  SelectedFeaturesAverageStatsFunction,\n  calculateAverageOfArray,\n  fillDensityColor,\n  getAnnualDataFromMonthly,\n  renderTimeOptions,\n\n} from \"../helpers/functions\";\nimport { BaseMapsLayers, mapCenter, pngRasterBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\nimport Plot from \"react-plotly.js\";\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport MapLegend from \"../components/MapLegend\";\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport FiltererdJsonFeature from \"./FiltererdJsonFeature\";\nimport { useSelectedFeatureContext } from \"../contexts/SelectedFeatureContext\";\nimport BiomassProductionChart from \"../components/charts/BiomassProductionChart\";\nimport District_Stats from \"../assets/data/District_Stats.json\"\nimport Avg_Biomass from \"../assets/raster_data/Avg_Biomass.png\"\nimport Avg_Biomass_Legend from \"../assets/legends/Avg_Biomass_Legend.png\"\nimport RasterLayerLegend from \"../components/RasterLayerLegend\";\n\n\nconst BiomassPage = () => {\n  const [intervalType, setIntervalType] = useState(\"Yearly\");\n  const [selectedTime, setSelectedTime] = useState(5);\n  const [selectedDataType, setSelectedDataType] = useState(\"NPP\");\n\n  const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n\n\n\n\n  const filteredFeaturesItems = selectedView && selectedFeatureName !== \"\" ? District_Stats.filter(item => item[selectedView] === selectedFeatureName) : District_Stats;\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStatsFunction(filteredFeaturesItems)\n\n  const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n\n\n  const handleBasemapSelection = (e) => {\n    const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n    setSelectedBasemapLayer(selectedItem);\n\n\n  };\n\n\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = District_Stats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n      const biomassProduction = intervalType === 'Monthly' ? (DataItem[selectedDataType][selectedTime] * 22.222).toFixed(2) : (getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime] * 22.222).toFixed(2)\n\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              Biomass Production: ${biomassProduction} ${intervalType === \"Yearly\" ? \"(kg/ha/year)\" : \"(kg/ha/month)\"\n        }<br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime !== \"\") {\n      const getDensityFromData = (name) => {\n        const DataItem = District_Stats.find((item) => item.DISTRICT === name);\n        return DataItem && intervalType === 'Monthly' ? DataItem[selectedDataType][selectedTime] : getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n      return {\n        // fillColor: density ? selectedDensityFunc(density):\"none\",\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleDataLayerSelection = (e) => {\n    const value = e.target.value;\n    setSelectedDataType((prevSelectedRaster) =>\n      prevSelectedRaster === value ? '' : value\n    );\n\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n\n\n\n  return (\n    <div className=\"dasboard_page_container\">\n      <div className=\"main_dashboard\">\n        <div className=\"left_panel_equal\">\n\n\n\n          <div className=\"card_container\">\n\n            <div className='defination_container'>\n              <h4>Biomass Production</h4>\n            </div>\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.AETI,\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Evapotranspiration (mm/month)\",\n                  marker: { color: 'green' },\n                  yaxis: 'y1',\n                },\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.NPP.map(value => value * 22.222),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Biomass Production (kg/ha/month)\",\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Evapotranspiration (mm/month)\",\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: \"Biomass Production (kg/ha/month)\",\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n\n\n          </div>\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Water Productivity</h4>\n            </div>\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.NPP.map((value, index) => (value * 22.222 * 0.0001) / (SelectedFeaturesStatsData.AETI[index] * 0.001)),\n                  type: \"bar\",\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: \"Year\",\n                },\n                yaxis: {\n                  title: 'Average Water Productivity (kg/m3)'\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n          </div>\n\n          <div className=\"card_container\" style={{ maxHeight: \"600px\", overflow: \"scroll\" }}>\n            <div className='defination_container'>\n              <h4>Average Biomass Mean Annual (kg/ha/year)</h4>\n            </div>\n            <BiomassProductionChart filteredFeaturesItems={filteredFeaturesItems} />\n          </div>\n        </div>\n\n        <div className=\"right_panel_equal\">\n          <div className=\"card_container\" style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={mapCenter}\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                backgroundColor: \"white\",\n                border: \"none\",\n                margin: \"auto\",\n              }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[\n                [23, 49],\n                [41, 82],\n              ]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n\n\n              <div className='map_layer_manager'>\n                <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseOne\">\n                        Base Map\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n                        {BaseMapsLayers.map(option => (\n                          <div key={option.value} className=\"collapse_layers_item\">\n                            <input\n                              type=\"radio\"\n                              id={option.name}\n                              name=\"data_type\"\n                              value={option.name}\n                              checked={selectedBasemapLayer?.name === option.name}\n                              onChange={handleBasemapSelection}\n                            />\n                            <label htmlFor={option.name}>{option.name}</label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                        Raster Layers\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"avg_biomass_raster\"\n                            value=\"avg_biomass_raster\"\n                            checked={selectedDataType === 'avg_biomass_raster'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"avg_biomass_raster\">Avg. Biomass Production</label>\n\n\n                        </div>\n\n\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseThree\">\n                        Vector Data Layers\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"NPP\"\n                            value=\"NPP\"\n                            checked={selectedDataType === 'NPP'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"NPP\">Biomass Production</label>\n                        </div>\n\n                        <select\n                          value={intervalType}\n                          onChange={handleIntervalTypeChange}\n                        >\n                          <option value=\"Monthly\">Monthly</option>\n                          <option value=\"Yearly\">Yearly</option>\n                        </select>\n\n                        <select\n                          value={selectedTime}\n                          onChange={(e) => setSelectedTime(e.target.value)}\n                        >\n                          {renderTimeOptions(intervalType)}\n                        </select>\n\n\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <TileLayer\n                key={selectedBasemapLayer.url}\n                attribution={selectedBasemapLayer.attribution}\n                url={selectedBasemapLayer.url}\n                subdomains={selectedBasemapLayer.subdomains}\n              />\n\n\n\n\n              <BaseMap />\n\n\n              {selectedDataType === 'avg_biomass_raster' ? (\n                <>\n\n<ImageOverlay\n                    opacity={1}\n                    attribution=\"\"\n                    key=\"avg_biomass_raster\"\n                    url={Avg_Biomass}\n                    fitBounds={true}\n                    // interactive={true}\n                    bounds={pngRasterBounds}\n\n                  />\n                  <RasterLayerLegend\n                    legendURL={Avg_Biomass_Legend}\n                    Title=\"Avg. Biomass Production\"\n                    Unit=\"(kg/ha/year)\"\n                  />\n\n                </>\n\n              ) : (\n                <>\n                  {selectedDataType === \"NPP\" && selectedTime !== '' && intervalType ? (\n                    <>\n                      {ColorLegendsDataItem && (\n                        <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                      )}\n\n                      <GeoJSON\n                        key={selectedDataType + selectedTime + intervalType}\n                        style={DistrictStyle}\n                        data={AFG_districts.features}\n                        onEachFeature={DistrictOnEachfeature}\n                      />\n                    </>\n                  ) : (\n                    <GeoJSON\n                      style={{\n                        fillColor: \"black\",\n                        weight: 2,\n                        color: \"black\",\n                        fillOpacity: \"0.001\",\n                        interactive: false,\n                      }}\n                      data={AfghanistanCountry.features}\n                    // onEachFeature={DistrictOnEachfeature}\n                    />\n                  )}\n                </>\n\n              )}\n\n\n             \n\n\n\n\n\n              <FiltererdJsonFeature />\n\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BiomassPage;\n"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","pcp_ssp585","pcp_ssp245","tdeg_ssp245","tdeg_ssp585","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_WaterProductivity","Yearly_ETB","Monthly_ETB","Yearly_ETG","Monthly_ETG","_ref","ColorLegendsDataItem","gradientColors","join","firstColor","lastColor","length","_jsxs","className","children","_jsx","style","borderRight","concat","backgroundImage","borderLeft","legendURL","src","alt","filteredFeaturesItems","districtData","map","entry","name","DISTRICT","biomassProduction","calculateAverageOfArray","getAnnualDataFromMonthly","NPP","npp","toFixed","sort","a","b","districtNames","minHeight","Math","max","Chart","options","chart","type","stacked","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","dataLabels","xaxis","categories","title","text","offsetX","yaxis","offsetY","tooltip","y","formatter","val","responsive","breakpoint","legend","position","series","data","width","height","BiomassPage","intervalType","setIntervalType","useState","selectedTime","setSelectedTime","selectedDataType","setSelectedDataType","selectedView","selectedFeatureName","useSelectedFeatureContext","District_Stats","filter","item","SelectedFeaturesStatsData","SelectedFeaturesAverageStatsFunction","selectedBasemapLayer","setSelectedBasemapLayer","BaseMapsLayers","handleBasemapSelection","e","selectedItem","find","target","value","handleDataLayerSelection","prevSelectedRaster","Plot","x","MonthsArray","AETI","mode","marker","color","layout","side","showgrid","yaxis2","overlaying","orientation","index","maxHeight","overflow","BiomassProductionChart","MapContainer","fullscreenControl","center","mapCenter","backgroundColor","border","margin","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","id","option","checked","onChange","htmlFor","renderTimeOptions","TileLayer","attribution","url","subdomains","BaseMap","_Fragment","ImageOverlay","opacity","Avg_Biomass","fitBounds","bounds","pngRasterBounds","RasterLayerLegend","MapLegend","GeoJSON","feature","density","DataItem","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature"],"sourceRoot":""}
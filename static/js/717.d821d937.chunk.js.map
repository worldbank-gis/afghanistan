{"version":3,"file":"static/js/717.d821d937.chunk.js","mappings":"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","sources":["../node_modules/react-leaflet/lib/WMSTileLayer.js","components/BaseMapLandCover.js","components/react-plotly-charts/PlotlyLandCoverPiChart.js","pages/LandClassificationPage.js"],"sourcesContent":["import { createElementObject, createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer } from 'leaflet';\nexport const WMSTileLayer = createTileLayerComponent(function createWMSTileLayer({ eventHandlers: _eh , params ={} , url , ...options }, context) {\n    const layer = new TileLayer.WMS(url, {\n        ...params,\n        ...withPane(options, context)\n    });\n    return createElementObject(layer, context);\n}, function updateWMSTileLayer(layer, props, prevProps) {\n    updateGridLayer(layer, props, prevProps);\n    if (props.params != null && props.params !== prevProps.params) {\n        layer.setParams(props.params);\n    }\n});\n","import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents, WMSTileLayer } from 'react-leaflet'\n// import indiastates  from '../assets/data/indiaStates.json';\n// import indiaRivers  from '../assets/data/indiaRivers.json';\n\n\n\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\n\n\n\n\nconst BaseMapLandCover = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n  const map = useMap();\n\n  const HandleMouseHover = () => {\n\n\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n    return null;\n  };\n\n\n\n\n  const handleZoomToCenter = () => {\n    map.setView([34, 67], 6);\n\n  };\n\n\n\n\n  return (\n    <>\n      \n      \n\n\n      <HandleMouseHover />\n\n      <div\n        className='coordinates_container' >\n        Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n        {mousePosition.lng.toFixed(4)}\n      </div>\n      <button className='zoom_btn' onClick={handleZoomToCenter}><FaHome /></button>\n      <ScaleControl />\n\n\n\n\n    </>\n  )\n}\n\nexport default BaseMapLandCover","import React from 'react'\nimport Plot from 'react-plotly.js'\n\nconst PlotlyLandCoverPiChart = ({SelectedFeaturesStatsData}) => {\n  return (\n    <Plot\n    data={[\n      {\n        labels: ['Tree cover', 'Shrubland', 'Grassland', 'Cropland', 'Built-up', 'Bare/sparse vegetation', 'Snow and ice', 'Permanent water bodies', 'Herbaceous wetland', 'Mangroves', 'Moss and lichen'],\n        values: [SelectedFeaturesStatsData.Trees, SelectedFeaturesStatsData.Shrubland,SelectedFeaturesStatsData.Grassland,SelectedFeaturesStatsData.Cropland,SelectedFeaturesStatsData.Builtup,SelectedFeaturesStatsData.Bare_Sparse_vegetation,SelectedFeaturesStatsData.Snow_and_ice,SelectedFeaturesStatsData.Permanent_water_bodies,SelectedFeaturesStatsData.Herbaceous_wetland,SelectedFeaturesStatsData.Moss_and_lichen,],\n\n        type: 'pie',\n        marker: {\n          colors: ['#006400', '#FFBB23', '#FFFF4C', '#F096FF', '#FA0100', '#B4B4B4', '#F0F0F0', '#0064C8', '#0096A0', '#04CF75', '#FAE69F',],\n        },\n        hoverinfo: 'label+percent+text',\n        textinfo: 'label+text',\n        text: [\n          `${SelectedFeaturesStatsData.Trees} ha`,\n          `${SelectedFeaturesStatsData.Shrubland} ha`,\n          `${SelectedFeaturesStatsData.Grassland} ha`,\n          `${SelectedFeaturesStatsData.Cropland} ha`,\n          `${SelectedFeaturesStatsData.Builtup} ha`,\n          `${SelectedFeaturesStatsData.Bare_Sparse_vegetation} ha`,\n          `${SelectedFeaturesStatsData.Snow_and_ice} ha`,\n          `${SelectedFeaturesStatsData.Permanent_water_bodies} ha`,\n          `${SelectedFeaturesStatsData.Herbaceous_wetland} ha`,\n          `${SelectedFeaturesStatsData.Moss_and_lichen} ha`,\n        ],\n        \n      },\n    ]}\n    layout={{\n      margin: {\n        l: 100, \n        t: 100, \n        b: 100, \n        r: 100, \n      },\n    }}\n\n    style={{ width: \"100%\", height: \"100%\" }}\n  />\n  )\n}\n\nexport default PlotlyLandCoverPiChart","import React from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON, TileLayer, WMSTileLayer } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { SelectedFeaturesAverageStats, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport worldcover_Legend from \"../assets/images/worldcover_Legend.png\"\nimport BaseMapLandCover from '../components/BaseMapLandCover';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport Plot from 'react-plotly.js';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport RasterMap from '../components/RasterMap';\nimport PlotlyLandCoverPiChart from '../components/react-plotly-charts/PlotlyLandCoverPiChart';\n\n\nconst LandClassificationPage = () => {\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n\n  // function DistrictOnEachfeature(feature, layer) {\n\n  //   layer.on('mouseover', function (e) {\n  //     const DataItem = Zonal_Stat_Land_cover.find(item => item.NAME === feature.properties.NAME);\n\n\n  //     const popupContent = `\n  //           <div>\n  //             District: ${feature.properties.NAME}<br/>\n  //             Trees: ${DataItem.Trees} ha<br/>\n  //             Shrubland: ${DataItem.Shrubland} ha<br/>\n  //             Grassland: ${DataItem.Grassland} ha<br/>\n  //             Cropland: ${DataItem.Cropland} ha<br/>\n  //             Builtup: ${DataItem.Builtup} ha<br/>\n  //             Bare, Sparse vegetation: ${DataItem.BareSparseVegetation} ha<br/>\n  //             Snow and Ice: ${DataItem.SnowAndIce} ha<br/>\n  //             Permanent water bodies: ${DataItem.PermanentWaterBodies} ha<br/>\n  //             Herbaceous wetland: ${DataItem.HerbaceousWetland} ha<br/>\n  //             Moss and lichen: ${DataItem.MossAndLichen} ha<br/>\n  //           </div>\n  //         `;\n  //     layer.bindTooltip(popupContent, { sticky: true });\n  //     layer.openTooltip();\n  //   });\n\n  //   layer.on('mouseout', function () {\n  //     layer.closeTooltip();\n  //   });\n  // }\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Land Cover class</h4>\n            </div>\n            <PlotlyLandCoverPiChart SelectedFeaturesStatsData={SelectedFeaturesStatsData}/>\n\n\n\n\n\n          </div>\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Land Cover class area by district (ha)</h4>\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>District</th>\n                    <th>Irrigated cropland</th>\n                    <th>Rainfed cropland</th>\n                    <th>Ocean and water bodies</th>\n                    <th>Non-cropland(other land covers)</th>\n\n\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredFeaturesItems.map((item, index) => (\n                    <tr key={index}>\n                      <td>{item.DISTRICT}</td>\n                      <td>{item.Irrigated_cropland}</td>\n                      <td>{item.Rainfed_cropland}</td>\n                      <td>{item.Ocean_and_water_bodies}</td>\n                      <td>{item.Non_cropland}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n        </div>\n\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n\n\n              <GeoJSON\n                style={{\n                  fillColor: 'black',\n                  weight: 2,\n                  color: 'black',\n                  fillOpacity: \"0.001\",\n                  // interactive: false\n                }}\n                data={AFG_districts.features}\n              // onEachFeature={DistrictOnEachfeature}\n              />\n              {/* <TileLayer url='https://services.terrascope.be/wms/v2?'/> */}\n\n              <div className='legend-panel'>\n                <img src={worldcover_Legend} alt='worldcover_Legend' />\n              </div>\n\n              <WMSTileLayer\n                zIndex={10}\n\n                url={`https://services.terrascope.be/wms/v2?`}\n                params={{ 'LAYERS': 'WORLDCOVER_2020_MAP', \"TILED\": \"true\", \"VERSION\": \"1.1.1\" }}\n                // maxZoom={6}\n                version='1.1.1'\n                // transparent={true}\n                format='image/png'\n                opacity={1}\n              />\n\n              <BaseMapLandCover />\n              <FiltererdJsonFeature />\n\n\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LandClassificationPage"],"names":["WMSTileLayer","createTileLayerComponent","_ref","context","eventHandlers","_eh","params","url","options","layer","TileLayer","WMS","withPane","createElementObject","props","prevProps","updateGridLayer","setParams","BaseMapLandCover","mousePosition","setMousePosition","useState","lat","lng","map","useMap","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","className","toFixed","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","SelectedFeaturesStatsData","Plot","data","labels","values","Trees","Shrubland","Grassland","Cropland","Builtup","Bare_Sparse_vegetation","Snow_and_ice","Permanent_water_bodies","Herbaceous_wetland","Moss_and_lichen","type","marker","colors","hoverinfo","textinfo","text","concat","layout","margin","l","t","b","r","style","width","height","LandClassificationPage","filteredFeaturesItems","selectedView","selectedFeatureName","useSelectedFeatureContext","SelectedFeaturesAverageStats","PlotlyLandCoverPiChart","item","index","DISTRICT","Irrigated_cropland","Rainfed_cropland","Ocean_and_water_bodies","Non_cropland","MapContainer","fullscreenControl","center","backgroundColor","border","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","GeoJSON","fillColor","weight","color","fillOpacity","AFG_districts","features","src","worldcover_Legend","alt","zIndex","version","format","opacity","FiltererdJsonFeature"],"sourceRoot":""}
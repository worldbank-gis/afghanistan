{"version":3,"file":"static/js/408.e610016e.chunk.js","mappings":"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","sources":["assets/data/ColorLegendsData.js","components/MapLegend.js","pages/WaterProductivity.js"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [350, 230, 150, 80],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"350\",\n        MinValue: \"80\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [15, 10, 5, 1],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"15\",\n        MinValue: \"1\",\n    },\n    pcp_ssp585:{\n        Title: \"Precipitation\",\n        Unit: \"(mm)\",\n        Value: [200, 100, 50, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"200\",\n        MinValue: \"0\",\n    },\n    pcp_ssp245:{\n        Title: \"Precipitation\",\n        Unit: \"(mm)\",\n        Value: [100, 80, 40, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"100\",\n        MinValue: \"0\",\n    },\n    tdeg_ssp245:{\n        Title: \"Temperature\",\n        Unit: \"(°C)\",\n        Value: [3, 2, 1, 0],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"3\",\n        MinValue: \"0\",\n    },\n    tdeg_ssp585:{\n        Title: \"Temperature\",\n        Unit: \"(°C)\",\n        Value: [3, 2, 1, 0],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"3\",\n        MinValue: \"0\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 20],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [1800, 1500, 1200, 800],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"1800\",\n        MinValue: \"800\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [280, 200, 150, 50],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"280\",\n        MinValue: \"50\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [80, 50, 20, 10],\n        Colors: [\"#eff24b\", \"#fcd432\", \"#fca132\",\"#f24207\", \"#802101\"],\n        MaxValue: \"80\",\n        MinValue: \"10\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [15, 10, 5, 0.2],\n        Colors: [\"#eff24b\", \"#fcd432\", \"#fca132\",\"#f24207\", \"#802101\"],\n        MaxValue: \"15\",\n        MinValue: \"0.2\",\n    },\n    // NPP*22022\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [360, 300, 200, 13],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"8000\",\n        MinValue: \"300\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [9, 6, 2, 0.4],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"200\",\n        MinValue: \"10\",\n    },\n    Yearly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"(kg/m3)\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#017d09\", \"#02c70f\", \"#fc8003\", \"#fc3503\",\"#ab3600\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n\n\n\n    Yearly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Yearly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n","import React from 'react';\n\nconst MapLegend = ({ ColorLegendsDataItem }) => {\n    const { Title, Unit, Colors, MaxValue, MinValue } = ColorLegendsDataItem;\n    const gradientColors = Colors.join(', ');\n    const firstColor = Colors[0];\n    const lastColor = Colors[Colors.length - 1];\n\n    return (\n        <div className=\"legend_container\">\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n            <div className=\"legend-color-container\">\n            <div className='legend_left_arrow' style={{borderRight: `25px solid ${lastColor}`}}></div>\n                <div className='legend-color' style={{ backgroundImage: `linear-gradient(to left, ${gradientColors})` }}></div>\n                <div className='legend_right_arrow' style={{borderLeft: `25px solid ${firstColor}`}}></div>\n            </div>\n            <div className=\"legend-item\">\n                <p className=\"legend-num-value\">{MinValue}</p>\n                <p className=\"legend-num-value\"> {MaxValue}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default MapLegend;\n","import React, { useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON, TileLayer } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { MonthsArray, SelectedFeaturesAverageStatsFunction, fillDensityColor, renderTimeOptions } from '../helpers/functions';\nimport { BaseMapsLayers, mapCenter, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\n\nimport MapLegend from '../components/MapLegend';\nimport Plot from 'react-plotly.js';\nimport { ColorLegendsData } from '../assets/data/ColorLegendsData';\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\n\nimport District_Stats from \"../assets/data/District_Stats.json\"\n\n\nconst WaterProductivity = () => {\n  const [selectedDataType, setSelectedDataType] = useState('WaterProductivity');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState(5);\n  const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n\n\n\n\n  const filteredFeaturesItems = selectedView && selectedFeatureName!== \"\" ? District_Stats.filter(item => item[selectedView] === selectedFeatureName) : District_Stats;\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStatsFunction(filteredFeaturesItems) \n\n  \n  const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n\n\n  const handleBasemapSelection = (e) => {\n    const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n    setSelectedBasemapLayer(selectedItem);\n\n\n  };\n\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = District_Stats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n\n      const biomassProduction = (DataItem['NPP'][selectedTime] * 22.22 * 0.1 / DataItem['AETI'][selectedTime]).toFixed(2);\n\n\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              Biomass Water Productivity: ${biomassProduction} ${intervalType === \"Yearly\" ? \"(kg/ha/year)\" : \"(kg/ha/month)\"\n        }<br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime) {\n      const getDensityFromData = (name) => {\n        const DataItem = District_Stats.find((item) => item.DISTRICT === name);\n        return DataItem ? DataItem['NPP'][selectedTime] * 22.22 * 0.1 / DataItem['AETI'][selectedTime] : null;\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n      return {\n        // fillColor: density ? selectedDensityFunc(density):\"none\",\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n\n  const handleDataLayerSelection = (e) => {\n    const value = e.target.value;\n    setSelectedDataType((prevSelectedRaster) =>\n      prevSelectedRaster === value ? '' : value\n    );\n\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n\n\n\n\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Biomass Water Productivity (BWP)</h4>\n            </div>\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.NPP.map((value, index) => (value * 22.222 * 0.1) / (SelectedFeaturesStatsData.AETI[index])),\n                  type: \"scatter\",\n                  mode: \"lines+markers\",\n                  marker: { color: \"green\" },\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: \"Year\",\n                },\n                yaxis: {\n                  title: \"Biomass Water Productivity (kg/m3)\"\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n          </div>\n\n{/* \n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Biomass Water Productivity for only cropland (BWP<sub>crop</sub>)</h4>\n            </div>\n          </div>\n\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Irrigated Water Productivity (IWP)</h4>\n            </div>\n          </div>\n\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Rainfed Water Productivity (RWP)</h4>\n            </div>\n          </div>\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Irrigation volume consumed</h4>\n            </div>\n          </div> */}\n\n\n        </div>\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={mapCenter}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n\n\n              <div className='map_layer_manager'>\n                <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseOne\">\n                        Base Map\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n                        {BaseMapsLayers.map(option => (\n                          <div key={option.value} className=\"collapse_layers_item\">\n                            <input\n                              type=\"radio\"\n                              id={option.name}\n                              name=\"data_type\"\n                              value={option.name}\n                              checked={selectedBasemapLayer?.name === option.name}\n                              onChange={handleBasemapSelection}\n                            />\n                            <label htmlFor={option.name}>{option.name}</label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  {/* <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                        Raster Layers\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"avg_aeti_raster\"\n                            value=\"avg_aeti_raster\"\n                            checked={selectedRaster === 'avg_aeti_raster'}\n                            onChange={handleRasterSelectionChange}\n                          />\n                          <label htmlFor=\"avg_aeti_raster\">Avg. Annual Evapotranspiration</label>\n\n\n                        </div>\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"avg_ret_raster\"\n                            value=\"avg_ret_raster\"\n                            checked={selectedRaster === 'avg_ret_raster'}\n                            onChange={handleRasterSelectionChange}\n                          />\n                          <label htmlFor=\"avg_ret_raster\">Avg. Annual Potential ET</label>\n\n                        </div>\n\n                      </div>\n                    </div>\n                  </div> */}\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseThree\">\n                        Vector Data Layers\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n\n                      <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"WaterProductivity\"\n                            value=\"WaterProductivity\"\n                            checked={selectedDataType === 'WaterProductivity'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"WaterProductivity\">Biomass Water Productivity</label>\n                        </div>\n\n                        <select\n                          value={selectedTime}\n                          onChange={(e) => setSelectedTime(e.target.value)}\n                        >\n                          {renderTimeOptions(intervalType)}\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <TileLayer\n                key={selectedBasemapLayer.url}\n                attribution={selectedBasemapLayer.attribution}\n                url={selectedBasemapLayer.url}\n                subdomains={selectedBasemapLayer.subdomains}\n              />\n\n\n\n\n\n              {selectedDataType === \"WaterProductivity\" && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n              ) : (\n                <GeoJSON\n                  style={{\n                    fillColor: \"black\",\n                    weight: 2,\n                    color: \"black\",\n                    fillOpacity: \"0.001\",\n                    interactive: false,\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n\n              <FiltererdJsonFeature />\n\n\n\n\n\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default WaterProductivity"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","pcp_ssp585","pcp_ssp245","tdeg_ssp245","tdeg_ssp585","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_WaterProductivity","Yearly_ETB","Monthly_ETB","Yearly_ETG","Monthly_ETG","_ref","ColorLegendsDataItem","gradientColors","join","firstColor","lastColor","length","_jsxs","className","children","_jsx","style","borderRight","concat","backgroundImage","borderLeft","WaterProductivity","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","selectedView","selectedFeatureName","useSelectedFeatureContext","filteredFeaturesItems","District_Stats","filter","item","SelectedFeaturesStatsData","SelectedFeaturesAverageStatsFunction","selectedBasemapLayer","setSelectedBasemapLayer","BaseMapsLayers","handleBasemapSelection","e","selectedItem","find","name","target","value","Plot","data","x","MonthsArray","y","NPP","map","index","AETI","type","mode","marker","color","layout","xaxis","title","yaxis","width","height","MapContainer","fullscreenControl","center","mapCenter","backgroundColor","border","margin","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","id","option","checked","onChange","htmlFor","prevSelectedRaster","renderTimeOptions","TileLayer","attribution","url","subdomains","_Fragment","MapLegend","GeoJSON","feature","density","DataItem","DISTRICT","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","opacity","dashArray","fillOpacity","AFG_districts","onEachFeature","layer","on","biomassProduction","toFixed","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature","BaseMap"],"sourceRoot":""}
{"version":3,"file":"static/js/691.8f6a8ad8.chunk.js","mappings":"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","sources":["assets/data/ColorLegendsData.js","pages/WaterFootprintPage.js"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [300, 100, 80, 10],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"300\",\n        MinValue: \"10\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [10, 6, 2, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"10\",\n        MinValue: \"0\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 10],\n        Colors: [\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"10\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [300, 100, 80, 10],\n        Colors: [\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"300\",\n        MinValue: \"10\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [300, 100, 80, 10],\n        Colors: [\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"300\",\n        MinValue: \"10\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [1, 0.9, 0.8, 0.7],\n        Colors: [\"#900C3F\", \"#C70039\", \"#F94C10\", \"#F8DE22\"],\n        MaxValue: \"1\",\n        MinValue: \"0.7\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [1, 0.9, 0.8, 0.7],\n        Colors: [\"#900C3F\", \"#C70039\", \"#F94C10\", \"#F8DE22\"],\n        MaxValue: \"1\",\n        MinValue: \"0.7\",\n    },\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [300, 50, 10, 5],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"300\",\n        MinValue: \"5\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [80, 20, 10, 5],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"300\",\n        MinValue: \"5\",\n    },\n\n    Yearly_ET_Blue:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [550, 100, 50, 20,6],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"550\",\n        MinValue: \"6\",\n    },\n    Monthly_ET_Blue:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [577, 100, 50, 20,6],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"577\",\n        MinValue: \"6\",\n    },\n    Yearly_ET_Green:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#4F6F52\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ET_Green:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#4F6F52\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n\n// const ET_Green_Density = (density => {\n//     return density > 180\n//       ? '#50623A'\n//       : density > 120\n//         ? '#4F6F52'\n//         : density > 50\n//           ? '#739072'\n//           : density > 20\n//             ? '#86A789'\n//             : '#D2E3C8';\n//   })\n\n\n\n\n\n\n\n\n// const Annual_RET_Density = (density) => {\n//     return density > 300\n//       ? \"#D04848\"\n//       : density > 200\n//         ? \"#F3B95F\"\n//         : density > 80\n//           ? \"#FDE767\"\n//           : density > 11\n//             ? \"#6895D2\"\n//             : \"#6895D2\";\n//   };\n  \n//   const Monthly_RET_Density = (density) => {\n//     return density > 18\n//       ? \"#D04848\"\n//       : density > 10\n//         ? \"#F3B95F\"\n//         : density > 5\n//           ? \"#FDE767\"\n//           : density > 0\n//             ? \"#6895D2\"\n//             : \"#6895D2\";\n//   };\n  \n//   const Annual_AETI_Density = (density) => {\n//     return density > 300\n//       ? \"#D04848\"\n//       : density > 200\n//         ? \"#F3B95F\"\n//         : density > 80\n//           ? \"#FDE767\"\n//           : density > 11\n//             ? \"#6895D2\"\n//             : \"#6895D2\";\n//   };\n  \n//   const Monthly_AETI_Density = (density) => {\n//     return density > 18\n//       ? \"#D04848\"\n//       : density > 10\n//         ? \"#F3B95F\"\n//         : density > 5\n//           ? \"#FDE767\"\n//           : density > 0\n//             ? \"#6895D2\"\n//             : \"#6895D2\";\n//   };","import React, { useEffect, useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport { fillDensityColor, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Zonal_Stat_ETB from \"../assets/data/Zonal_Stat_ETB_Annual.json\"\nimport Zonal_stat_ETG from \"../assets/data/Zonal_stat_ETG_Annual.json\"\nimport MapLegend from '../components/MapLegend';\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport DistrictAreaData from \"../assets/data/DistrictAreaData.json\"\nimport cropSpecificWaterFootprints from \"../assets/data/cropSpecificWaterFootprints.json\"\nimport Plot from 'react-plotly.js';\n\n\nconst WaterFootprintPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('ET_Green');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState('2023');\n\n  const YearOfSelectedTime = selectedTime && selectedTime.split('-')[0];\n\n  let selectedDataset;\n  if (selectedDataType === 'ET_Blue') {\n    selectedDataset = Zonal_Stat_ETB;\n  } else if (selectedDataType === 'ET_Green') {\n    selectedDataset = Zonal_stat_ETG;\n  }\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on('mouseover', function (e) {\n      const DataItem = selectedDataset.find(item => item.NAME === feature.properties.NAME);\n      const popupContent = `\n          <div>\n            District: ${feature.properties.NAME}<br/>\n            ${selectedDataType === 'ET_Green' ? 'ET Green' : selectedDataType === 'ET_Blue' ? 'ET Blue' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${DataItem[selectedTime].toFixed(2)}\n          </div>\n        `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on('mouseout', function () {\n      layer.closeTooltip();\n    });\n  }\n\n\n  const DistrictStyle = (feature => {\n    if (selectedTime && selectedDataset) {\n      const getDensityFromData = (name) => {\n        const DataItem = selectedDataset.find(item => item.NAME === name.toString());\n        return DataItem ? DataItem[selectedTime] : null;\n      };\n\n      const density = getDensityFromData(feature.properties.NAME);\n      return ({\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: 'black',\n        dashArray: '2',\n        fillOpacity: 1\n      });\n\n    }\n\n  });\n\n  const renderTableRows = () => {\n    return Zonal_Stat_ETB.map((districtData, index) => {\n      const blueValue = districtData[YearOfSelectedTime];\n      const greenValue = Zonal_stat_ETG[index][YearOfSelectedTime];\n      const Area = DistrictAreaData[index]['AREA']\n      if (blueValue !== undefined && greenValue !== undefined) {\n        return (\n          <tr key={index}>\n            <td>{districtData.NAME}</td>\n            <td>{blueValue.toFixed(2)}</td>\n            <td>{greenValue.toFixed(2)}</td>\n            <td>{(blueValue*0.001*Area/1000000).toFixed(2)}</td>\n            <td>{(greenValue*0.001*Area/1000000).toFixed(2)}</td>\n          </tr>\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n\n\n  // Get the first three entries\nconst topCropEntries = cropSpecificWaterFootprints.slice(0,10);\n\n// Get the sum of the remaining entries\nconst restCropEntriesSum = cropSpecificWaterFootprints.slice(10).reduce((acc, curr) => acc + curr.WFP, 0);\n\n// Combine the first three entries and the sum into a new array\nconst newCropData = [\n  ...topCropEntries,\n  {\n    \"CropName\": \"Other Crops\",\n    \"WFP\": restCropEntriesSum\n  }\n];\n\n\n\n\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n          <div className='card_container'>\n\n            <select className='m-1' value={selectedDataType} onChange={(e) => setSelectedDataType(e.target.value)}>\n              <option value=\"ET_Blue\">ET Blue</option>\n              <option value=\"ET_Green\">ET Green</option>\n            </select>\n\n            <select className='m-1' value={intervalType} onChange={(e) => setIntervalType(e.target.value)}>\n              {/* <option value=\"Monthly\"> Monthly</option> */}\n              <option value=\"Yearly\"> Yearly</option>\n            </select>\n\n\n            <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n              {renderTimeOptions(intervalType)}\n            </select>\n\n          </div>\n          <div className='card_container'>\n\n            <div className='defination_container'>\n              <h4>Water Footprint</h4>\n              <p>Water footprint refers to the total volume of water used in the production process of goods or services, including both direct water use (e.g., irrigation, processing water) and indirect water use (e.g., water embedded in inputs like raw materials and energy). In this section we also present Blue and Green ET. The Green water represents the fraction of precipitation that infiltrates into the soil and is available to plants; while blue water comprising runoff, groundwater, and stream base flow.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"card_container\" style={{overflow:\"scroll\"}}>\n            <div className='defination_container'>\n              <h4>Crop Specific water footprint (BCM/year)</h4>\n            </div>\n\n            <Plot\n              data={[\n                {\n                  y: newCropData.map((entry) => entry.CropName),\n                  x: newCropData.map((entry) => (entry.WFP ) / 1000000000),\n                  type: \"bar\",\n                  orientation: 'h',\n                },\n              ]}\n              layout={{\n                yaxis: {\n                  title: \"Crop Type\",\n                  autorange: \"reversed\",\n                },\n                xaxis: {\n                  title: `Crop Specific water footprint (BCM/year)`\n                },\n                margin: {\n                  l: 220, \n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n          </div>\n\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Average anuual Green and Blue ET by districts for year {YearOfSelectedTime}</h4>\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>District</th>\n                    <th>Average ET Blue (mm/year)</th>\n                    <th>Average ET Green (mm/year)</th>\n                    <th>Average ET Blue Volume (MCM/year)</th>\n                    <th>Average ET Green Volume (MCM/year)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {renderTableRows()}\n                </tbody>\n\n              </table>\n            </div>\n          </div>\n\n\n\n\n\n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <SearchBar />\n\n\n\n              {selectedDataType && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n\n              ) : (\n                <GeoJSON\n                  style={{\n                    fillColor: 'black',\n                    weight: 2,\n                    color: 'black',\n                    fillOpacity: \"0.001\",\n                    interactive: false\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WaterFootprintPage"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_ET_Blue","Monthly_ET_Blue","Yearly_ET_Green","Monthly_ET_Green","WaterFootprintPage","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","YearOfSelectedTime","split","selectedDataset","Zonal_Stat_ETB","Zonal_stat_ETG","ColorLegendsDataItem","concat","newCropData","cropSpecificWaterFootprints","slice","reduce","acc","curr","WFP","_jsx","className","children","_jsxs","value","onChange","e","target","renderTimeOptions","style","overflow","Plot","data","y","map","entry","CropName","x","type","orientation","layout","yaxis","title","autorange","xaxis","margin","l","width","height","districtData","index","blueValue","greenValue","Area","DistrictAreaData","undefined","NAME","toFixed","MapContainer","fullscreenControl","center","backgroundColor","border","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","SearchBar","_Fragment","MapLegend","GeoJSON","feature","density","name","DataItem","find","item","toString","getDensityFromData","properties","fillColor","fillDensityColor","weight","opacity","color","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","BaseMap"],"sourceRoot":""}
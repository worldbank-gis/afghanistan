{"version":3,"file":"static/js/375.f7cfbe10.chunk.js","mappings":"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","sources":["components/charts/WaterFootprintChart.js","pages/WaterFootprintPage.js"],"sourcesContent":["import React from 'react'\n\nimport cropSpecificWaterFootprints from \"../../assets/data/cropSpecificWaterFootprints.json\"\nimport Chart from \"react-apexcharts\";\n\nconst WaterFootprintChart = () => {\n    // Get the first three entries\n    const topCropEntries = cropSpecificWaterFootprints.slice(0, 10);\n\n    // Get the sum of the remaining entries\n    const restCropEntriesSum = cropSpecificWaterFootprints.slice(10).reduce((acc, curr) => acc + curr.WFP, 0);\n\n    // Combine the first three entries and the sum into a new array\n    const newCropData = [\n        ...topCropEntries,\n        {\n            \"CropName\": \"Other Crops\",\n            \"WFP\": restCropEntriesSum\n        }\n    ];\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: newCropData.map((entry) => entry.CropName),\n                    title: {\n                        text: 'Crop Specific water footprint (BCM/year)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'Crop Type',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (BCM/year)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: newCropData.map((entry) => (entry.WFP) / 1000000000),\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            height=\"500px\"\n        />\n    )\n}\n\nexport default WaterFootprintChart","import React, { useEffect, useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport { SelectedFeaturesAverageStats, calculateAverageOfArray, calculateSumOfArray, fillDensityColor, getAnnualDataFromMonthly, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport MapLegend from '../components/MapLegend';\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport WaterFootprintChart from '../components/charts/WaterFootprintChart';\nimport DistrictStats from \"../assets/data/District_Stats.json\"\n\n\nconst WaterFootprintPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('ETG');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState(5);\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on('mouseover', function (e) {\n      const DataItem = DistrictStats.find(item => item.DISTRICT === feature.properties.NAME);\n      const popupContent = `\n          <div>\n            District: ${feature.properties.NAME}<br/>\n            ${selectedDataType === 'ETG' ? 'ET Green' : selectedDataType === 'ETB' ? 'ET Blue' : null}  (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'}): ${DataItem[selectedDataType][selectedTime]}\n          </div>\n        `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on('mouseout', function () {\n      layer.closeTooltip();\n    });\n  }\n\n\n  const DistrictStyle = (feature => {\n    if (selectedTime !== \"\") {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find(item => item.DISTRICT === name);\n\n        return DataItem && DataItem[selectedDataType][selectedTime]\n      };\n\n      const density = getDensityFromData(feature.properties.NAME);\n      return ({\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: 'black',\n        dashArray: '2',\n        fillOpacity: 1\n      });\n\n    }\n\n  });\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n\n          <div className='card_container'>\n\n            <div className='defination_container'>\n              <h4>Water Footprint</h4>\n              <p>Water footprint refers to the total volume of water used in the production process of goods or services, including both direct water use (e.g., irrigation, processing water) and indirect water use (e.g., water embedded in inputs like raw materials and energy). In this section we also present Blue and Green ET. The Green water represents the fraction of precipitation that infiltrates into the soil and is available to plants; while blue water comprising runoff, groundwater, and stream base flow.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"card_container\" style={{ overflow: \"scroll\" }}>\n            <div className='defination_container'>\n              <h4>Crop Specific water footprint (BCM/year)</h4>\n            </div>\n            <WaterFootprintChart />\n\n\n          </div>\n\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Average anuual Green and Blue ET by districts</h4>\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>District</th>\n                    <th>Average ET Blue (mm/year)</th>\n                    <th>Average ET Green (mm/year)</th>\n                    <th>Average ET Blue Volume (MCM/year)</th>\n                    <th>Average ET Green Volume (MCM/year)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredFeaturesItems.map((districtData, index) => (\n                    <tr key={index}>\n                      <td>{districtData.DISTRICT}</td>\n                      <td>{calculateSumOfArray(districtData.ETB).toFixed(2)}</td>\n                      <td>{calculateSumOfArray(districtData.ETG).toFixed(2)}</td>\n                      <td>{(calculateAverageOfArray(districtData.ETB) * 0.001 * districtData.AREA / 1000000).toFixed(2)}</td>\n                      <td>{(calculateAverageOfArray(districtData.ETG) * 0.001 * districtData.AREA / 1000000).toFixed(2)}</td>\n                    </tr>\n                  ))}\n\n                </tbody>\n\n              </table>\n            </div>\n          </div>\n\n\n\n\n\n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <div className='map_options_container'>\n\n                <select className='m-1' value={selectedDataType} onChange={(e) => setSelectedDataType(e.target.value)}>\n                  <option value=\"ETB\">ET Blue</option>\n                  <option value=\"ETG\">ET Green</option>\n                </select>\n\n                {/* <select className='m-1' value={intervalType} onChange={(e) => setIntervalType(e.target.value)}>\n  <option value=\"Monthly\"> Monthly</option>\n  <option value=\"Yearly\"> Yearly</option>\n</select> */}\n\n\n                <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n                  {renderTimeOptions(intervalType)}\n                </select>\n\n              </div>\n\n\n\n              {selectedDataType && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n\n              ) : (\n                <GeoJSON\n                  style={{\n                    fillColor: 'black',\n                    weight: 2,\n                    color: 'black',\n                    fillOpacity: \"0.001\",\n                    interactive: false\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n              <FiltererdJsonFeature />\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WaterFootprintPage"],"names":["WaterFootprintChart","newCropData","cropSpecificWaterFootprints","slice","reduce","acc","curr","WFP","_jsx","Chart","options","chart","type","stacked","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","dataLabels","xaxis","categories","map","entry","CropName","title","text","offsetX","yaxis","offsetY","tooltip","y","formatter","val","concat","responsive","breakpoint","legend","position","series","data","width","height","WaterFootprintPage","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","filteredFeaturesItems","selectedView","selectedFeatureName","useSelectedFeatureContext","ColorLegendsDataItem","SelectedFeaturesAverageStats","ColorLegendsData","className","children","_jsxs","style","overflow","districtData","index","DISTRICT","calculateSumOfArray","ETB","toFixed","ETG","calculateAverageOfArray","AREA","MapContainer","fullscreenControl","center","backgroundColor","border","margin","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","value","onChange","e","target","renderTimeOptions","_Fragment","MapLegend","GeoJSON","feature","density","name","DataItem","DistrictStats","find","item","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","opacity","color","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature","BaseMap"],"sourceRoot":""}
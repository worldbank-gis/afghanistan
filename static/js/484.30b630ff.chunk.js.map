{"version":3,"file":"static/js/484.30b630ff.chunk.js","mappings":"iTAIA,MAkFA,EAlF+BA,IAAgC,IAA/B,sBAAEC,GAAuBD,EACrD,MAAME,EAAeD,EAAsBE,KAAKC,IAAK,CACjDC,KAAMD,EAAME,SACZC,mBAAmBC,EAAAA,EAAAA,KAAwBC,EAAAA,EAAAA,IAAyBL,EAAMM,IAAIP,KAAKQ,GAAc,MAANA,MAAeC,QAAQ,OAItHV,EAAaW,MAAK,CAACC,EAAGC,IAAMA,EAAER,kBAAoBO,EAAEP,oBAEpD,MAAMS,EAAgBd,EAAaC,KAAKC,GAAUA,EAAMC,OAClDE,EAAoBL,EAAaC,KAAKC,GAAUA,EAAMG,oBAItDU,EAAYC,KAAKC,IADM,GACqBH,EAAcI,OAAQ,KAExE,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACFC,QAAS,CACLC,MAAO,CACHC,KAAM,MACNC,SAAS,EACTC,QAAS,CACLC,MAAM,GAEVC,KAAM,CACFC,SAAS,IAGjBC,YAAa,CACTC,IAAK,CACDC,YAAY,IAGpBC,WAAY,CACRJ,SAAS,GAEbK,MAAO,CACHC,WAAYpB,EACZqB,MAAO,CACHC,KAAM,2CACNC,QAAS,KAGjBC,MAAO,CACHH,MAAO,CACHC,KAAM,gBACNG,QAAS,KAKjBC,QAAS,CACLC,EAAG,CACCC,UAAW,SAAUC,GACjB,MAAM,GAANC,OAAUD,EAAG,gBACjB,IAGRE,WAAY,CAAC,CACTC,WAAY,IACZzB,QAAS,CACL0B,OAAQ,CACJC,SAAU,SACVX,SAAU,GACVE,QAAS,OAKzBU,OAAQ,CAAC,CACLC,KAAM7C,IAEVkB,KAAK,MACL4B,MAAM,OAENC,OAAQrC,EAAY,MACtB,E,cCpDV,MA6QA,EA7QoBsC,KAClB,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,WAC1CC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,IAC1CG,EAAkBC,IAAuBJ,EAAAA,EAAAA,UAAS,QAEnD,sBAAEzD,EAAqB,aAAE8D,EAAY,oBAAEC,IAAwBC,EAAAA,EAAAA,KAC/DC,GAA4BC,EAAAA,EAAAA,IAA6BlE,GAOzDmE,EAAuBC,EAAAA,EAAiB,GAADvB,OAAIU,EAAY,KAAAV,OAAIe,IAyDjE,OAHAS,QAAQC,IAAIL,EAA0BM,OAIpCnD,EAAAA,EAAAA,KAAA,OAAKoD,UAAU,0BAAyBC,UACtCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAG/BrD,EAAAA,EAAAA,KAAA,OAAKoD,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCrD,EAAAA,EAAAA,KAAA,MAAAqD,SAAI,wBACJrD,EAAAA,EAAAA,KAAA,KAAAqD,SAAG,ucAaPrD,EAAAA,EAAAA,KAAA,OAAKoD,UAAU,iBAAgBC,UAE/BrD,EAAAA,EAAAA,KAACuD,EAAAA,EAAI,CACDxB,KAAM,CACJ,CACEyB,EAAGC,EAAAA,GACHnC,EAAGuB,EAA0BM,KAC7B/C,KAAM,UACNsD,KAAM,gBACN1E,KAAM,gCACN2E,OAAQ,CAAEC,MAAO,SACjBzC,MAAO,MAET,CACEqC,EAAGC,EAAAA,GACHnC,EAAGuB,EAA0BxD,IAAIP,KAAI+E,GAAiB,OAARA,IAC9CzD,KAAM,UACNsD,KAAM,gBACN1E,KAAM,mCACN2E,OAAQ,CAAEC,MAAO,OACjBzC,MAAO,OAGX2C,OAAQ,CACNhD,MAAO,CACLE,MAAO,QAETG,MAAO,CACLH,MAAO,gCACP+C,KAAM,OACNC,UAAU,GAEZC,OAAQ,CACNjD,MAAO,mCACP+C,KAAM,QACNG,WAAY,IACZF,UAAU,GAEZpC,OAAQ,CACNuC,YAAa,IACbX,EAAG,EACHlC,EAAG,MAGP8C,MAAO,CAAEpC,MAAO,OAAQC,OAAQ,aAMpCqB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BrD,EAAAA,EAAAA,KAAA,OAAKoD,UAAU,uBAAsBC,UACnCrD,EAAAA,EAAAA,KAAA,MAAAqD,SAAI,0BAENrD,EAAAA,EAAAA,KAACuD,EAAAA,EAAI,CACHxB,KAAM,CACJ,CACEyB,EAAGC,EAAAA,GACHnC,EAAGuB,EAA0BxD,IAAIP,KAAI,CAAC+E,EAAOQ,IAAmB,OAARR,EAAiB,MAAmD,KAAxChB,EAA0BM,KAAKkB,MACnHjE,KAAM,QAGV0D,OAAQ,CACNhD,MAAO,CACLE,MAAO,QAETG,MAAO,CACLH,MAAO,uCAGXoD,MAAO,CAAEpC,MAAO,OAAQC,OAAQ,cAIpCqB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAiBgB,MAAO,CAAEE,UAAW,QAASC,SAAU,UAAWlB,SAAA,EAChFrD,EAAAA,EAAAA,KAAA,OAAKoD,UAAU,uBAAsBC,UACnCrD,EAAAA,EAAAA,KAAA,MAAAqD,SAAI,mCAENrD,EAAAA,EAAAA,KAACwE,EAAsB,CAAC5F,sBAAuBA,WAInDoB,EAAAA,EAAAA,KAAA,OAAKoD,UAAU,oBAAmBC,UAChCrD,EAAAA,EAAAA,KAAA,OAAKoD,UAAU,iBAAiBgB,MAAO,CAAEnC,OAAQ,QAASoB,UACxDC,EAAAA,EAAAA,MAACmB,EAAAA,EAAY,CACXC,mBAAmB,EACnBC,OAAQ,CAAC,GAAI,IACbP,MAAO,CACLpC,MAAO,OACPC,OAAQ,OACR2C,gBAAiB,QACjBC,OAAQ,OACRC,OAAQ,QAEVtE,MAAMuE,EAAAA,EAAAA,MACNC,UAAW,CACT,CAAC,GAAI,IACL,CAAC,GAAI,KAGPC,SAASF,EAAAA,EAAAA,MACTG,UAAU,EACVC,UAAUC,EAAAA,EAAAA,MAGVC,iBAAiB,EAAMhC,SAAA,EAExBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACvCrD,EAAAA,EAAAA,KAAA,UACEoD,UAAU,MACVS,MAAOrB,EACP8C,SAjJsBC,IAChC9C,EAAoB8C,EAAEC,OAAO3B,MAAM,EAgJUR,UAEnCrD,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,MAAKR,SAAC,0BAItBC,EAAAA,EAAAA,MAAA,UACEF,UAAU,MACVS,MAAO1B,EACPmD,SAtJsBC,IAChCnD,EAAgBmD,EAAEC,OAAO3B,OACzBtB,EAAgB,GAAG,EAoJ0Bc,SAAA,EAEnCrD,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,UAASR,SAAC,aACxBrD,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,SAAQR,SAAC,eAGzBrD,EAAAA,EAAAA,KAAA,UACEoD,UAAU,MACVS,MAAOvB,EACPgD,SAAWC,GAAMhD,EAAgBgD,EAAEC,OAAO3B,OAAOR,UAEhDoC,EAAAA,EAAAA,IAAkBtD,SAMnBnC,EAAAA,EAAAA,KAAC0F,EAAAA,EAAO,IAGc,QAArBlD,GAA+C,KAAjBF,GAAuBH,GACpDmB,EAAAA,EAAAA,MAAAqC,EAAAA,SAAA,CAAAtC,SAAA,CACGN,IACC/C,EAAAA,EAAAA,KAAC4F,EAAAA,EAAS,CAAC7C,qBAAsBA,KAGnC/C,EAAAA,EAAAA,KAAC6F,EAAAA,EAAO,CAENzB,MAzMK0B,IACrB,GAAoB,KAAhBxD,EAAoB,CACtB,MAIMyD,EAJsB/G,KAC1B,MAAMgH,EAAWC,EAAcC,MAAMC,GAASA,EAAKlH,WAAaD,IAChE,OAAOgH,GAA4B,YAAhB7D,EAA4B6D,EAASxD,GAAkBF,IAAclD,EAAAA,EAAAA,IAAyB4G,EAASxD,IAAmBF,EAAa,EAE5I8D,CAAmBN,EAAQO,WAAWC,MACtD,MAAO,CAELC,UAAWxD,GAAuByD,EAAAA,EAAAA,IAAiBzD,EAAsBgD,GAAW,OACpFU,OAAQ,EACRC,QAAS,EACT9C,MAAO,QACP+C,UAAW,IACXC,YAAa,EAEjB,GA0LgB7E,KAAM8E,EAAcC,SACpBC,cAlOlB,SAA+BjB,EAASkB,GACtCA,EAAMC,GAAG,aAAa,SAAU1B,GAC9B,MAAMS,EAAWC,EAAcC,MAC5BC,GAASA,EAAKlH,WAAa6G,EAAQO,WAAWC,OAE3CpH,EAAoC,YAAhBiD,GAAsE,OAAzC6D,EAASxD,GAAkBF,IAAsB/C,QAAQ,IAAwE,QAAnEH,EAAAA,EAAAA,IAAyB4G,EAASxD,IAAmBF,IAAsB/C,QAAQ,GAElM2H,EAAY,gDAAAzF,OAEEqE,EAAQO,WAAWC,KAAI,6CAAA7E,OACbvC,EAAiB,KAAAuC,OAAqB,WAAjBU,EAA4B,eAAiB,gBAAe,yCAI/G6E,EAAMG,YAAYD,EAAc,CAAEE,QAAQ,IAC1CJ,EAAMK,aACR,IAEAL,EAAMC,GAAG,YAAY,WACnBD,EAAMM,cACR,GACF,GA0MuB9E,EAAmBF,EAAeH,OAO3CnC,EAAAA,EAAAA,KAAC6F,EAAAA,EAAO,CACNzB,MAAO,CACLmC,UAAW,QACXE,OAAQ,EACR7C,MAAO,QACPgD,YAAa,QACbW,aAAa,GAEfxF,KAAMyF,EAAAA,YAIVxH,EAAAA,EAAAA,KAACyH,EAAAA,EAAoB,eAOzB,C","sources":["components/charts/BiomassProductionChart.js","pages/BiomassPage.js"],"sourcesContent":["import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateAverageOfArray, calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst BiomassProductionChart = ({ filteredFeaturesItems }) => {\n    const districtData = filteredFeaturesItems.map((entry) => ({\n        name: entry.DISTRICT,\n        biomassProduction: calculateAverageOfArray(getAnnualDataFromMonthly(entry.NPP.map((npp) => npp * 22.22))).toFixed(2)\n    }));\n\n    // Sort the district data based on biomass production (highest to lowest)\n    districtData.sort((a, b) => b.biomassProduction - a.biomassProduction);\n\n    const districtNames = districtData.map((entry) => entry.name);\n    const biomassProduction = districtData.map((entry) => entry.biomassProduction);\n\n    // Calculate the minimum height based on the number of districts\n    const minHeightPerDistrict = 20; // Adjust this value as needed\n    const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Average Biomass Mean Annual (kg/ha/year)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (kg/ha/year)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: biomassProduction\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default BiomassProductionChart","import React, { useState } from \"react\";\nimport SearchBar from \"../components/SearchBar\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport BaseMap from \"../components/BaseMap\";\nimport AfghanistanCountry from \"../assets/data/shapefiles/AFG_boundary.json\";\nimport {\n  MonthsArray,\n  SelectedFeaturesAverageStats,\n  calculateAverageOfArray,\n  fillDensityColor,\n  getAnnualDataFromMonthly,\n  renderTimeOptions,\n  setDragging,\n  setInitialMapZoom,\n} from \"../helpers/functions\";\nimport Plot from \"react-plotly.js\";\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport MapLegend from \"../components/MapLegend\";\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport FiltererdJsonFeature from \"./FiltererdJsonFeature\";\nimport { useSelectedFeatureContext } from \"../contexts/SelectedFeatureContext\";\nimport BiomassProductionChart from \"../components/charts/BiomassProductionChart\";\nimport DistrictStats from \"../assets/data/District_Stats.json\"\n\n\nconst BiomassPage = () => {\n  const [intervalType, setIntervalType] = useState(\"Yearly\");\n  const [selectedTime, setSelectedTime] = useState(5);\n  const [selectedDataType, setSelectedDataType] = useState(\"NPP\");\n\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n\n\n\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = DistrictStats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n      const biomassProduction = intervalType ==='Monthly' ? (DataItem[selectedDataType][selectedTime]*22.222).toFixed(2) :(getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]*22.222).toFixed(2)\n\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              Biomass Production: ${biomassProduction} ${intervalType === \"Yearly\" ? \"(kg/ha/year)\" : \"(kg/ha/month)\"\n        }<br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime !==\"\") {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find((item) => item.DISTRICT === name);\n        return DataItem && intervalType ==='Monthly' ? DataItem[selectedDataType][selectedTime]:getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n      return {\n        // fillColor: density ? selectedDensityFunc(density):\"none\",\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n  console.log(SelectedFeaturesStatsData.AETI)\n\n\n  return (\n    <div className=\"dasboard_page_container\">\n      <div className=\"main_dashboard\">\n        <div className=\"left_panel_equal\">\n          \n\n          <div className=\"card_container\">\n            <div className=\"defination_container\">\n              <h4>Biomass production</h4>\n              <p>\n                Biomass estimation in agriculture is crucial for predicting\n                yields, monitoring crop health, optimizing harvest timing and\n                allocating resources efficiently. Biomass refers to organic\n                matter derived from living or recently living organisms. Biomass\n                production in agriculture refers to the harvesting of organic\n                matter from plants, including crops, grasses, and trees, which\n                can be used for various purposes such as food, feed, fiber and\n                biofuels.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"card_container\">\n\n          <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.AETI,\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Evapotranspiration (mm/month)\",\n                  marker: { color: 'green' },\n                  yaxis: 'y1',\n                },\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.NPP.map(value => value * 22.222),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Biomass Production (kg/ha/month)\",\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Evapotranspiration (mm/month)\",\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: \"Biomass Production (kg/ha/month)\",\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n\n            \n          </div>\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Water Productivity</h4>\n            </div>\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.NPP.map((value, index) => (value * 22.222 * 0.0001) / (SelectedFeaturesStatsData.AETI[index] * 0.001)),\n                  type: \"bar\",\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: \"Year\",\n                },\n                yaxis: {\n                  title: 'Average Water Productivity (kg/m3)'\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n          </div>\n\n          <div className=\"card_container\" style={{ maxHeight: \"800px\", overflow: \"scroll\" }}>\n            <div className='defination_container'>\n              <h4>Average Biomass Mean Annual</h4>\n            </div>\n            <BiomassProductionChart filteredFeaturesItems={filteredFeaturesItems}/>\n          </div>\n        </div>\n\n        <div className=\"right_panel_equal\">\n          <div className=\"card_container\" style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                backgroundColor: \"white\",\n                border: \"none\",\n                margin: \"auto\",\n              }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[\n                [23, 49],\n                [41, 82],\n              ]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n             <div className=\"map_options_container\">\n            <select\n              className=\"m-1\"\n              value={selectedDataType}\n              onChange={handleSelectedDataChange}\n            >\n              <option value=\"NPP\">Biomass Production</option>\n              {/* <option value=\"AETI\">Evapotranspiration</option> */}\n            </select>\n\n            <select\n              className=\"m-1\"\n              value={intervalType}\n              onChange={handleIntervalTypeChange}\n            >\n              <option value=\"Monthly\">Monthly</option>\n              <option value=\"Yearly\">Yearly</option>\n            </select>\n\n            <select\n              className=\"m-1\"\n              value={selectedTime}\n              onChange={(e) => setSelectedTime(e.target.value)}\n            >\n              {renderTimeOptions(intervalType)}\n            </select>\n\n          </div>\n\n\n              <BaseMap />\n\n\n              {selectedDataType === \"NPP\" && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n              ) : (\n                <GeoJSON\n                  style={{\n                    fillColor: \"black\",\n                    weight: 2,\n                    color: \"black\",\n                    fillOpacity: \"0.001\",\n                    interactive: false,\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n              <FiltererdJsonFeature  />\n\n             \n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BiomassPage;\n"],"names":["_ref","filteredFeaturesItems","districtData","map","entry","name","DISTRICT","biomassProduction","calculateAverageOfArray","getAnnualDataFromMonthly","NPP","npp","toFixed","sort","a","b","districtNames","minHeight","Math","max","length","_jsx","Chart","options","chart","type","stacked","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","dataLabels","xaxis","categories","title","text","offsetX","yaxis","offsetY","tooltip","y","formatter","val","concat","responsive","breakpoint","legend","position","series","data","width","height","BiomassPage","intervalType","setIntervalType","useState","selectedTime","setSelectedTime","selectedDataType","setSelectedDataType","selectedView","selectedFeatureName","useSelectedFeatureContext","SelectedFeaturesStatsData","SelectedFeaturesAverageStats","ColorLegendsDataItem","ColorLegendsData","console","log","AETI","className","children","_jsxs","Plot","x","MonthsArray","mode","marker","color","value","layout","side","showgrid","yaxis2","overlaying","orientation","style","index","maxHeight","overflow","BiomassProductionChart","MapContainer","fullscreenControl","center","backgroundColor","border","margin","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","onChange","e","target","renderTimeOptions","BaseMap","_Fragment","MapLegend","GeoJSON","feature","density","DataItem","DistrictStats","find","item","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","opacity","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature"],"sourceRoot":""}
{"version":3,"file":"static/js/836.b44e8987.chunk.js","mappings":"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","sources":["pages/PrecipitationPage.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { MonthsArray, SelectedFeaturesAverageStats, YearsArray, fillDensityColor, getAnnualDataFromMonthly, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Plot from 'react-plotly.js';\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport MapLegend from '../components/MapLegend';\nimport tiff_raster from \"../assets/raster_data/clipped_chirps-v2.0.2023.tif\"\nimport RasterMap from '../components/RasterMap';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport DistrictStats from \"../assets/data/District_Stats.json\"\n\nconst PrecipitationPage = () => {\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n\n  const [selectedDataType, setSelectedDataType] = useState('PCP');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedRaster, setSelectedRaster] = useState('');\n  const [selectedTime, setSelectedTime] = useState(5);\n\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = DistrictStats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              ${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${intervalType ==='Monthly' ? DataItem[selectedDataType][selectedTime]:getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]}\n        <br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime !==\"\") {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find((item) => item.DISTRICT === name);\n        return DataItem && intervalType ==='Monthly' ? DataItem[selectedDataType][selectedTime]:getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n      return {\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        // fillColor: selectedTime !== '' ? Annual_Density(density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n  const handleRasterSelectionChange = (e) => {\n    setSelectedRaster(e.target.value);\n  };\n\n\n  const TableAnnualData = {\n    Year: YearsArray,\n    Yearly_AETI: getAnnualDataFromMonthly(SelectedFeaturesStatsData.AETI),\n    Yearly_PCP: getAnnualDataFromMonthly(SelectedFeaturesStatsData.PCP),\n    Yearly_RET: getAnnualDataFromMonthly(SelectedFeaturesStatsData.RET),\n    Yearly_ETB: SelectedFeaturesStatsData.ETB,\n    Yearly_ETG: SelectedFeaturesStatsData.ETG,\n  }\n\n\n\n\n\n  // const ChartColors = aridityIndex.map(value => {\n  //   if (value >= 1) {\n  //     return \"#F8DE22\";\n  //   } else if (value >= 0.6) {\n  //     return \"#F94C10\";\n  //   } else if (value >= 0.3) {\n  //     return \"#C70039\";\n  //   } else {\n  //     return \"#900C3F\";\n  //   }\n  // });\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n\n        <div className='left_panel_equal'>\n\n\n      \n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Precipitation</h4>\n              <p>\n                Precipitation is key water source in the hydrological cycle. It refers to all forms of condensation of atmospheric water vapor that falls from clouds. The main forms of precipitation include drizzling, rain, sleet, snow, ice pellets, graupel and hail. In the river basins, where there is no other inflow (e.g. through surface or subsurface flow), the total precipitation accounts for the entire total gross inflow, in the water accounting terms, in any given time\n              </p>\n            </div>\n          </div>\n\n\n\n\n\n\n          <div className='card_container'>\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.PCP,\n                  type: 'bar',\n                  name: \"Precipitation (mm/year)\",\n                  yaxis: 'y1',\n                },\n                {\n                  x: MonthsArray,\n                  // y: SelectedFeaturesStatsData.RET,\n                  y: SelectedFeaturesStatsData.RET.map(value => value /10),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Potential ET (mm/year)\",\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Precipitation (mm/year)\",\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: \"Potential ET (mm/year)\",\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n\n          </div>\n\n          <div className='card_container'>\n            {/* <div className='defination_container'>\n              <h4>Aridity Index</h4>\n            </div> */}\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.AridityIndex,\n                  type: 'bar',\n                  // marker: {\n                  //   color: ChartColors,\n                  // },\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Aridity Index\"\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              {/* <h4>Land Cover class area by district (ha)</h4> */}\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>Year</th>\n                    <th>Evapotranspiration (mm/year)</th>\n                    <th>Precipitation (mm/year)</th>\n                    <th>PCP - ET (mm/year)</th>\n                    <th>Potential ET (mm/year)</th>\n                    <th>Aridity Index</th>\n                    <th>ET Blue (mm/year)</th>\n                    <th>ET Green (mm/year)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {TableAnnualData.Year.map((year, index) => (\n                    <tr key={index}>\n                      <td>{year}</td>\n                      <td>{TableAnnualData.Yearly_AETI[index]}</td>\n                      <td>{TableAnnualData.Yearly_PCP[index]}</td>\n                      <td className={TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index] < 0 ? 'red-text' : ''}>\n                        {(TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index]).toFixed(1)}\n                      </td>\n                      <td>{(TableAnnualData.Yearly_RET[index]/10).toFixed(2)}</td>\n                      <td>{(TableAnnualData.Yearly_PCP[index] / (TableAnnualData.Yearly_RET[index]/10)).toFixed(2)}</td>\n                      <td>{TableAnnualData.Yearly_ETB[index].toFixed(1)}</td>\n                      <td>{TableAnnualData.Yearly_ETG[index].toFixed(1)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n\n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <div className='map_options_container'>\n            <select className='m-1' value={selectedDataType} onChange={handleSelectedDataChange}>\n              <option value=\"PCP\">Precipitation</option>\n              <option value=\"RET\">Potential ET</option>\n              <option value=\"AridityIndex\">Average Aridity Index</option>\n            </select>\n\n            <select className='m-1' value={intervalType} onChange={handleIntervalTypeChange}>\n              <option value=\"Monthly\">Monthly</option>\n              <option value=\"Yearly\">Yearly</option>\n            </select>\n\n\n            <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n              {renderTimeOptions(intervalType)}\n            </select>\n\n            <select className='m-1' value={selectedRaster} onChange={handleRasterSelectionChange}>\n              <option value=\"\">Select Raster Map</option>\n              <option value=\"pcp_annual_2023\">Annual PCP 2023</option>\n              {/* <option value=\"Yearly\">Yearly</option> */}\n            </select>\n\n\n          </div>\n\n              {selectedRaster === 'pcp_annual_2023' ? (\n                <>\n                  <RasterMap\n                    colorPalatte=\"viridis\"\n                    maxValue={1000}\n                    minValue={1}\n                    url={tiff_raster}\n                    popopContent=\"PCP Value\"\n                  />\n                  <MapLegend ColorLegendsDataItem={\n                    {\n                      Title: \"Annual Precipitation 2023\",\n                      Unit: \"(mm)\",\n                      Value: [1, 200, 400, 700, 1000],\n                      Colors: [\"#fde725\", \"#5ec962\", \"#21918c\", \"#3b528b\", \"#440154\"],\n                      MaxValue: \"1002\",\n                      MinValue: \"36\",\n                    }\n                  } />\n                </>\n\n              ) : (\n                <>\n                  {selectedDataType && selectedTime !== '' && intervalType ? (\n                    <>\n                      {ColorLegendsDataItem && (\n                        <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                      )}\n                      <GeoJSON\n                        key={selectedDataType + selectedTime + intervalType}\n                        style={DistrictStyle}\n                        data={AFG_districts.features}\n                        onEachFeature={DistrictOnEachfeature}\n                      />\n\n                    </>\n\n                  ) : (\n                    <GeoJSON\n                      style={{\n                        fillColor: 'black',\n                        weight: 2,\n                        color: 'black',\n                        fillOpacity: \"0.001\",\n                        interactive: false\n                      }}\n                      data={AfghanistanCountry.features}\n                    />\n                  )}\n                </>\n\n              )}\n\n              <FiltererdJsonFeature />\n\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PrecipitationPage"],"names":["PrecipitationPage","filteredFeaturesItems","selectedView","selectedFeatureName","useSelectedFeatureContext","SelectedFeaturesStatsData","SelectedFeaturesAverageStats","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedRaster","setSelectedRaster","selectedTime","setSelectedTime","ColorLegendsDataItem","ColorLegendsData","concat","TableAnnualData","Year","YearsArray","Yearly_AETI","getAnnualDataFromMonthly","AETI","Yearly_PCP","PCP","Yearly_RET","RET","Yearly_ETB","ETB","Yearly_ETG","ETG","_jsx","className","children","_jsxs","Plot","data","x","MonthsArray","y","type","name","yaxis","map","value","mode","marker","color","layout","xaxis","title","side","showgrid","yaxis2","overlaying","legend","orientation","style","width","height","AridityIndex","year","index","toFixed","MapContainer","fullscreenControl","center","backgroundColor","border","margin","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","onChange","e","target","renderTimeOptions","_Fragment","RasterMap","colorPalatte","maxValue","minValue","url","tiff_raster","popopContent","MapLegend","Title","Unit","Value","Colors","MaxValue","MinValue","GeoJSON","feature","density","DataItem","DistrictStats","find","item","DISTRICT","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","opacity","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature","BaseMap"],"sourceRoot":""}
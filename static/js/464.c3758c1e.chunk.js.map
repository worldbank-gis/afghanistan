{"version":3,"file":"static/js/464.c3758c1e.chunk.js","mappings":"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","sources":["pages/PrecipitationPage.js"],"sourcesContent":["import React, { useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { fillDensityColor, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Plot from 'react-plotly.js';\nimport { AFG_Data_Annual, AFG_Data_Monthly } from '../assets/data/AFG_Data';\nimport Zonal_Stat_RET_Annual from \"../assets/data/Zonal_Stat_RET_Annual.json\"\nimport Zonal_Stat_PCP_Annual from \"../assets/data/Zonal_Stat_AETI_Annual.json\"\nimport Zonal_Stat_AridityIndex_Annual from \"../assets/data/Zonal_Stat_AridityIndex_Annual.json\"\nimport Zonal_Stat_RET_Monthly from \"../assets/data/Zonal_Stat_RET_Monthly.json\"\nimport Zonal_Stat_PCP_Monthly from \"../assets/data/Zonal_Stat_AETI_Monthly.json\"\nimport Zonal_Stat_AridityIndex_Monthly from \"../assets/data/Zonal_Stat_AridityIndex_Monthly.json\"\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport MapLegend from '../components/MapLegend';\nimport Zonal_Stat_Data from \"../assets/data/Zonal_Stat_Data.json\"\n\nconst PrecipitationPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('PCP');\n  const [intervalType, setIntervalType] = useState('Monthly');\n  const [selectedTime, setSelectedTime] = useState('2023-12');\n\n  const chartData = intervalType === 'Yearly' ? AFG_Data_Annual : AFG_Data_Monthly;\n  let selectedDataset;\n\n  if (selectedDataType === \"PCP\") {\n    selectedDataset =\n      intervalType === \"Yearly\"\n        ? Zonal_Stat_PCP_Annual\n        : Zonal_Stat_PCP_Monthly;\n  } if (selectedDataType === \"RET\") {\n    selectedDataset =\n      intervalType === \"Yearly\"\n        ? Zonal_Stat_RET_Annual\n        : Zonal_Stat_RET_Monthly;\n\n  } if (selectedDataType === \"AridityIndex\") {\n    selectedDataset =\n      intervalType === \"Yearly\"\n        ? Zonal_Stat_AridityIndex_Annual\n        : Zonal_Stat_AridityIndex_Monthly;\n  }\n  \n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = selectedDataset.find(\n        (item) => item.NAME === feature.properties.NAME\n      );\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              ${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${DataItem[selectedTime]}\n        <br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime && selectedDataset) {\n      const getDensityFromData = (name) => {\n        const DataItem = selectedDataset.find((item) => item.NAME === name);\n        return DataItem ? DataItem[selectedTime] : null;\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n      return {\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        // fillColor: selectedTime !== '' ? Annual_Density(density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n\n        <div className='left_panel_equal'>\n\n\n          <div className='card_container'>\n            <select className='m-1' value={selectedDataType} onChange={handleSelectedDataChange}>\n              <option value=\"PCP\">Precipitation</option>\n              <option value=\"RET\">Potential ET</option>\n              <option value=\"AridityIndex\">Average Aridity Index</option>\n            </select>\n\n            <select className='m-1' value={intervalType} onChange={handleIntervalTypeChange}>\n              <option value=\"Monthly\">Monthly</option>\n              <option value=\"Yearly\">Yearly</option>\n            </select>\n\n\n            <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n              {renderTimeOptions(intervalType)}\n            </select>\n\n\n          </div>\n\n          <div className='card_container'>\n\n            <div className='defination_container'>\n              <h4>Precipitation</h4>\n              <p>\n                Precipitation is key water source in the hydrological cycle. It refers to all forms of condensation of atmospheric water vapor that falls from clouds. The main forms of precipitation include drizzling, rain, sleet, snow, ice pellets, graupel and hail. In the river basins, where there is no other inflow (e.g. through surface or subsurface flow), the total precipitation accounts for the entire total gross inflow, in the water accounting terms, in any given time\n              </p>\n              \n            </div>\n          </div>\n\n\n\n\n          <div className='card_container'>\n\n            <Plot\n              data={[\n                {\n                  x: chartData.map(entry => entry.Time),\n                  y: chartData.map(entry => entry[selectedDataType]),\n                  type: selectedDataType === 'RET' ? 'scatter' : 'bar',\n                  mode: selectedDataType === 'RET' ? 'lines+markers' : '',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: `${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}`,\n                },\n              }}\n              style={{ width: \"100%\", height: \"calc(100% - 100px)\" }}\n            />\n\n\n\n\n\n            {/* <Plot\n              data={[\n                {\n                  x: chartData.map(entry => entry.Time),\n                  y: chartData.map(entry => entry.PCP),\n                  type: 'bar',\n                  name: `Precipitation (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`,\n                  yaxis: 'y1',\n                },\n                {\n                  x: chartData.map(entry => entry.Time),\n                  y: chartData.map(entry => entry.AETI),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: `Potential ET (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`,\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: `Precipitation (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`,\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: `Potential ET (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`,\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            /> */}\n\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              {/* <h4>Land Cover class area by district (ha)</h4> */}\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>Year</th>\n                    <th>Evapotranspiration (mm/year)</th>\n                    <th>Precipitation (mm/year)</th>\n                    <th>PCP - ET (mm/year)</th>\n                    <th>Potential ET (mm/year)</th>\n                    <th>Aridity Index</th>\n                    <th>ET Blue (mm/year)</th>\n                    <th>ET Green (mm/year)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {AFG_Data_Annual.map((item, index) => (\n                    <tr key={index}>\n                      <td>{item.Time}</td>\n                      <td>{item.AETI}</td>\n                      <td>{item.PCP}</td>\n                      <td>{(item.PCP - item.AETI).toFixed(1)}</td>\n                      <td>{item.RET}</td>\n                      <td>{item.AridityIndex}</td>\n                      <td>{(item.ETBlue).toFixed(1)}</td>\n                      <td>{(item.ETGreen).toFixed(1)}</td>\n\n                    </tr>\n                  ))}\n                </tbody>\n\n              </table>\n            </div>\n          </div>\n\n\n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <SearchBar />\n\n              {selectedDataType && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n\n                </>\n\n              ) : (\n                <GeoJSON\n                  style={{\n                    fillColor: 'black',\n                    weight: 2,\n                    color: 'black',\n                    fillOpacity: \"0.001\",\n                    interactive: false\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PrecipitationPage"],"names":["PrecipitationPage","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","chartData","AFG_Data_Annual","AFG_Data_Monthly","selectedDataset","Zonal_Stat_PCP_Annual","Zonal_Stat_PCP_Monthly","Zonal_Stat_RET_Annual","Zonal_Stat_RET_Monthly","Zonal_Stat_AridityIndex_Annual","Zonal_Stat_AridityIndex_Monthly","ColorLegendsDataItem","ColorLegendsData","concat","_jsx","className","children","_jsxs","value","onChange","e","target","renderTimeOptions","Plot","data","x","map","entry","Time","y","type","mode","layout","xaxis","title","yaxis","style","width","height","item","index","AETI","PCP","toFixed","RET","AridityIndex","ETBlue","ETGreen","MapContainer","fullscreenControl","center","backgroundColor","border","margin","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","SearchBar","_Fragment","MapLegend","GeoJSON","feature","density","name","DataItem","find","NAME","getDensityFromData","properties","fillColor","fillDensityColor","weight","opacity","color","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","BaseMap"],"sourceRoot":""}
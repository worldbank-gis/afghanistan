{"version":3,"file":"static/js/375.18fefafb.chunk.js","mappings":"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","sources":["components/BaseMapWithoutBaselayers.js","components/RasterMap.js","pages/FiltererdJsonFeature.js","components/react-plotly-charts/PlotlyLandCoverPiChart.js","pages/LandClassificationPage.js","../node_modules/geotiff/dist-browser|sync","../node_modules/react-leaflet/lib/WMSTileLayer.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents } from 'react-leaflet'\nimport { FaHome } from \"react-icons/fa\";\n\n\n\n\n\nconst BaseMapWithoutBaselayers = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n  const map = useMap();\n\n  const HandleMouseHover = () => {\n\n\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n    return null;\n  };\n\n\n\n\n  const handleZoomToCenter = () => {\n    map.setView([34, 67], 6);\n\n  };\n\n\n\n\n  return (\n    <>\n\n      <HandleMouseHover />\n\n      <div\n        className='coordinates_container' >\n        Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n        {mousePosition.lng.toFixed(4)}\n      </div>\n      <button className='zoom_btn' onClick={handleZoomToCenter}><FaHome /></button>\n      <ScaleControl />\n\n\n\n\n    </>\n  )\n}\n\nexport default BaseMapWithoutBaselayers","import React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport 'leaflet-geotiff-2';\nimport 'leaflet-geotiff-2/dist/leaflet-geotiff-rgb';\nimport 'leaflet-geotiff-2/dist/leaflet-geotiff-plotty';\n\n\nconst RasterMap = ({ url , colorPalatte, maxValue, minValue,popopContent }) => {\n  const [loading, setLoading] = useState(true);\n  const map = useMap();\n  let popup = L.popup();\n\n  \n\n  useEffect(() => {\n    setLoading(true);\n    const plottyRenderer = L.LeafletGeotiff.plotty({\n      // Optional. Minimum values to plot.\n      displayMin: minValue,\n      // Optional. Maximum values to plot.\n      displayMax: maxValue,\n      // Optional flag for plotty to enable/disable displayMin/Max.\n      applyDisplayRange: true,\n      // Optional. If true values outside `displayMin` to `displayMax` will be rendered as if they were valid values.\n      clampLow: true,\n      clampHigh: true,\n  \n      // colorScale: \"hot\",\n      colorScale: colorPalatte,\n\n  \n    });\n  \n    // console.log(plottyRenderer)\n    const options = {\n      // renderer: null,\n      renderer: plottyRenderer,\n      // useWorker: false,\n      // bounds: [[22.5444989120000017, 77.2885380120000036], [22.7877842760000000, 77.7441607800000014]],\n  \n      // band: 0,\n      // image: 0,\n      // clip: undefined,\n      pane: 'overlayPane',\n      onError: null,\n      arrayBuffer: null,\n      noDataValue: undefined,\n      // noDataKey: undefined,\n      // blockSize: 65536,\n      opacity: 1,\n      // clearBeforeMove: false,\n    };\n\n\n\n    const geotiffLayer = L.leafletGeotiff(url, options)\n      .on('load', () => {\n        setLoading(false);\n      })\n      .addTo(map);\n\n\n  map.on('mousemove', (event) => {\n    const latlng = event.latlng;\n\n    const pixelValue = geotiffLayer.getValueAtLatLng(latlng.lat, latlng.lng);\n    if (pixelValue && pixelValue !== null && pixelValue !== '' && pixelValue !== 9999 && pixelValue !== -9999) {\n\n      // Format the pixelValue to show up to 3 decimal places\n      const formattedPixelValue = pixelValue.toFixed(3);\n      // Update the content of the popup with the formatted pixel value\n      popup\n        .setLatLng(latlng)\n        .setContent(`${popopContent}: ${formattedPixelValue}`)\n        .openOn(map);\n    } else {\n      // If pixelValue is empty, null, or 999, close the popup\n      map.closePopup();\n    }\n  });\n\n   // Clean up when the component unmounts\n   return () => {\n    map.removeLayer(geotiffLayer);\n    map.off('mousemove');\n    map.closePopup(); \n\n  };\n\n  }, [url, map]);\n\n  return loading ?\n  <div className='map_layer_loader_container'>\n    <div className=\"map_loader_container\">\n      <span className=\"map_loader\"></span>\n    </div>\n\n  </div> : null;\n};\n\nexport default RasterMap;\n","import React, { useEffect } from 'react';\nimport { GeoJSON, Pane, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport {  mapCenter, setInitialMapZoom } from '../helpers/functions';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport AFG_boundary from '../assets/data/shapefiles/AFG_boundary.json';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport AFG_provinces from '../assets/data/shapefiles/AFG_provinces.json';\nimport AFG_watershed from '../assets/data/shapefiles/AFG_watershed.json';\nimport AFG_water_basin from '../assets/data/shapefiles/AFG_water_basin.json';\n\nconst FiltererdJsonFeature = () => {\n    const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n    const map = useMap();\n    const intialZoom=setInitialMapZoom()\n\n\n    const selectedFeatureData = () => {\n        switch (selectedView) {\n            case 'BASIN':\n                return AFG_water_basin.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'WATERSHED':\n                return AFG_watershed.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'PROVINCE':\n                return AFG_provinces.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'DISTRICT':\n                return AFG_districts.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'COUNTRY':\n                return AFG_boundary.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            default:\n                return null;\n        }\n    };\n    const filteredData=selectedFeatureData()\n\n\n\n    useEffect(() => {\n        if (filteredData) {\n            const bounds = L.geoJSON(filteredData.geometry).getBounds();\n            map.flyToBounds(bounds);\n            // map.setView(bounds.getCenter(), intialZoom);\n        }\n        else{\n            map.flyTo(mapCenter,intialZoom);\n        }\n    }, [filteredData, map,intialZoom]);\n\n\n    return (\n        <Pane name=\"selected_features\" style={{ zIndex: 1000 }}>\n        <GeoJSON\n            key={`${selectedFeatureName+selectedView}`}\n            style={{ fillColor: 'none', weight: 4, color: 'yellow', fillOpacity: \"0.4\" }}\n            data={filteredData}\n        />\n        </Pane>\n    );\n};\n\nexport default FiltererdJsonFeature;\n","import React from 'react'\nimport Plot from 'react-plotly.js'\n\nconst PlotlyLandCoverPiChart = ({SelectedFeaturesStatsData}) => {\n  return (\n    <Plot\n    data={[\n      {\n        labels: ['Tree cover', 'Shrubland', 'Grassland', 'Cropland', 'Built-up', 'Bare/sparse vegetation', 'Snow and ice', 'Permanent water bodies', 'Herbaceous wetland', 'Mangroves', 'Moss and lichen'],\n        values: [SelectedFeaturesStatsData.Trees, SelectedFeaturesStatsData.Shrubland,SelectedFeaturesStatsData.Grassland,SelectedFeaturesStatsData.Cropland,SelectedFeaturesStatsData.Builtup,SelectedFeaturesStatsData.Bare_Sparse_vegetation,SelectedFeaturesStatsData.Snow_and_ice,SelectedFeaturesStatsData.Permanent_water_bodies,SelectedFeaturesStatsData.Herbaceous_wetland,SelectedFeaturesStatsData.Moss_and_lichen,],\n\n        type: 'pie',\n        marker: {\n          colors: ['#006400', '#FFBB23', '#FFFF4C', '#F096FF', '#FA0100', '#B4B4B4', '#F0F0F0', '#0064C8', '#0096A0', '#04CF75', '#FAE69F',],\n        },\n        hoverinfo: 'label+percent+text',\n        textinfo: 'label+text',\n        text: [\n          `${SelectedFeaturesStatsData.Trees} ha`,\n          `${SelectedFeaturesStatsData.Shrubland} ha`,\n          `${SelectedFeaturesStatsData.Grassland} ha`,\n          `${SelectedFeaturesStatsData.Cropland} ha`,\n          `${SelectedFeaturesStatsData.Builtup} ha`,\n          `${SelectedFeaturesStatsData.Bare_Sparse_vegetation} ha`,\n          `${SelectedFeaturesStatsData.Snow_and_ice} ha`,\n          `${SelectedFeaturesStatsData.Permanent_water_bodies} ha`,\n          `${SelectedFeaturesStatsData.Herbaceous_wetland} ha`,\n          `${SelectedFeaturesStatsData.Moss_and_lichen} ha`,\n        ],\n        \n      },\n    ]}\n    layout={{\n      margin: {\n        l: 100, \n        t: 100, \n        b: 100, \n        r: 100, \n      },\n    }}\n\n    style={{ width: \"100%\", height: \"100%\" }}\n  />\n  )\n}\n\nexport default PlotlyLandCoverPiChart","import React from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON, TileLayer, WMSTileLayer, ImageOverlay } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { SelectedFeaturesAverageStats, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport worldcover_Legend from \"../assets/images/worldcover_Legend.png\"\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport Plot from 'react-plotly.js';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport RasterMap from '../components/RasterMap';\nimport PlotlyLandCoverPiChart from '../components/react-plotly-charts/PlotlyLandCoverPiChart';\nimport BaseMapWithoutBaselayers from '../components/BaseMapWithoutBaselayers';\n\nconst LandClassificationPage = () => {\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n\n  // function DistrictOnEachfeature(feature, layer) {\n\n  //   layer.on('mouseover', function (e) {\n  //     const DataItem = Zonal_Stat_Land_cover.find(item => item.NAME === feature.properties.NAME);\n\n\n  //     const popupContent = `\n  //           <div>\n  //             District: ${feature.properties.NAME}<br/>\n  //             Trees: ${DataItem.Trees} ha<br/>\n  //             Shrubland: ${DataItem.Shrubland} ha<br/>\n  //             Grassland: ${DataItem.Grassland} ha<br/>\n  //             Cropland: ${DataItem.Cropland} ha<br/>\n  //             Builtup: ${DataItem.Builtup} ha<br/>\n  //             Bare, Sparse vegetation: ${DataItem.BareSparseVegetation} ha<br/>\n  //             Snow and Ice: ${DataItem.SnowAndIce} ha<br/>\n  //             Permanent water bodies: ${DataItem.PermanentWaterBodies} ha<br/>\n  //             Herbaceous wetland: ${DataItem.HerbaceousWetland} ha<br/>\n  //             Moss and lichen: ${DataItem.MossAndLichen} ha<br/>\n  //           </div>\n  //         `;\n  //     layer.bindTooltip(popupContent, { sticky: true });\n  //     layer.openTooltip();\n  //   });\n\n  //   layer.on('mouseout', function () {\n  //     layer.closeTooltip();\n  //   });\n  // }\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Land Cover class</h4>\n            </div>\n            <PlotlyLandCoverPiChart SelectedFeaturesStatsData={SelectedFeaturesStatsData} />\n\n\n\n\n\n          </div>\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Land Cover class area by district (ha)</h4>\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>District</th>\n                    <th>Irrigated cropland</th>\n                    <th>Rainfed cropland</th>\n                    <th>Ocean and water bodies</th>\n                    <th>Non-cropland(other land covers)</th>\n\n\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredFeaturesItems.map((item, index) => (\n                    <tr key={index}>\n                      <td>{item.DISTRICT}</td>\n                      <td>{item.Irrigated_cropland}</td>\n                      <td>{item.Rainfed_cropland}</td>\n                      <td>{item.Ocean_and_water_bodies}</td>\n                      <td>{item.Non_cropland}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n        </div>\n\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <BaseMapWithoutBaselayers/>\n\n\n              <GeoJSON\n                style={{\n                  fillColor: 'black',\n                  weight: 2,\n                  color: 'black',\n                  fillOpacity: \"0.001\",\n                  // interactive: false\n                }}\n                data={AFG_districts.features}\n              // onEachFeature={DistrictOnEachfeature}\n              />\n              {/* <TileLayer url='https://services.terrascope.be/wms/v2?'/> */}\n\n              <div className='legend-panel'>\n                <img src={worldcover_Legend} alt='worldcover_Legend' />\n              </div>\n\n              <WMSTileLayer\n                zIndex={10}\n\n                url={`https://services.terrascope.be/wms/v2?`}\n                params={{ 'LAYERS': 'WORLDCOVER_2020_MAP', \"TILED\": \"true\", \"VERSION\": \"1.1.1\" }}\n                // maxZoom={6}\n                version='1.1.1'\n                // transparent={true}\n                format='image/png'\n                opacity={1}\n              />\n\n\n\n          \n              <FiltererdJsonFeature />\n\n\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LandClassificationPage","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 4938;\nmodule.exports = webpackEmptyContext;","import { createElementObject, createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer } from 'leaflet';\nexport const WMSTileLayer = createTileLayerComponent(function createWMSTileLayer({ eventHandlers: _eh , params ={} , url , ...options }, context) {\n    const layer = new TileLayer.WMS(url, {\n        ...params,\n        ...withPane(options, context)\n    });\n    return createElementObject(layer, context);\n}, function updateWMSTileLayer(layer, props, prevProps) {\n    updateGridLayer(layer, props, prevProps);\n    if (props.params != null && props.params !== prevProps.params) {\n        layer.setParams(props.params);\n    }\n});\n"],"names":["BaseMapWithoutBaselayers","mousePosition","setMousePosition","useState","lat","lng","map","useMap","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","className","toFixed","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","_ref","url","colorPalatte","maxValue","minValue","popopContent","loading","setLoading","popup","L","useEffect","options","renderer","plotty","displayMin","displayMax","applyDisplayRange","clampLow","clampHigh","colorScale","pane","onError","arrayBuffer","noDataValue","undefined","opacity","geotiffLayer","on","addTo","event","pixelValue","getValueAtLatLng","formattedPixelValue","setLatLng","setContent","concat","openOn","closePopup","removeLayer","off","FiltererdJsonFeature","selectedView","selectedFeatureName","useSelectedFeatureContext","intialZoom","setInitialMapZoom","filteredData","selectedFeatureData","AFG_water_basin","find","feature","properties","NAME","AFG_watershed","AFG_provinces","AFG_districts","AFG_boundary","bounds","geometry","getBounds","flyToBounds","flyTo","mapCenter","Pane","name","style","zIndex","GeoJSON","fillColor","weight","color","fillOpacity","data","SelectedFeaturesStatsData","Plot","labels","values","Trees","Shrubland","Grassland","Cropland","Builtup","Bare_Sparse_vegetation","Snow_and_ice","Permanent_water_bodies","Herbaceous_wetland","Moss_and_lichen","type","marker","colors","hoverinfo","textinfo","text","layout","margin","l","t","b","r","width","height","LandClassificationPage","filteredFeaturesItems","SelectedFeaturesAverageStats","PlotlyLandCoverPiChart","item","index","DISTRICT","Irrigated_cropland","Rainfed_cropland","Ocean_and_water_bodies","Non_cropland","MapContainer","fullscreenControl","center","backgroundColor","border","zoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","features","src","worldcover_Legend","alt","WMSTileLayer","params","version","format","webpackEmptyContext","req","Error","code","keys","resolve","id","module","exports","createTileLayerComponent","context","eventHandlers","_eh","layer","TileLayer","WMS","withPane","createElementObject","props","prevProps","updateGridLayer","setParams"],"sourceRoot":""}
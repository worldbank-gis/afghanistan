{"version":3,"file":"static/js/818.5a7dd8b8.chunk.js","mappings":"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","sources":["assets/data/ColorLegendsData.js","components/MapLegend.js","pages/FiltererdJsonFeature.js","components/charts/CropWaterFootprintChart.js","components/charts/WaterFootprintChart.js","pages/WaterFootprintPage.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/react-leaflet/lib/Pane.js"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [350, 230, 150, 80],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"350\",\n        MinValue: \"80\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [15, 10, 5, 1],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"15\",\n        MinValue: \"1\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 20],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [1800, 1500, 1200, 800],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"1800\",\n        MinValue: \"800\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [280, 200, 150, 50],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"280\",\n        MinValue: \"50\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [80, 50, 20, 10],\n        Colors: [\"#802101\", \"#f24207\", \"#fca132\",\"#fcd432\", \"#eff24b\"],\n        MaxValue: \"80\",\n        MinValue: \"10\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [15, 10, 5, 0.2],\n        Colors: [\"#802101\", \"#f24207\", \"#fca132\",\"#fcd432\", \"#eff24b\"],\n        MaxValue: \"15\",\n        MinValue: \"0.2\",\n    },\n    // NPP*22022\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [360, 300, 200, 13],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"8000\",\n        MinValue: \"300\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [9, 6, 2, 0.4],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"200\",\n        MinValue: \"10\",\n    },\n    Yearly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n    Monthly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n\n\n    Yearly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Yearly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n","import React from 'react';\n\nconst MapLegend = ({ ColorLegendsDataItem }) => {\n    const { Title, Unit, Value, Colors, MaxValue, MinValue } = ColorLegendsDataItem;\n    const gradientColors = Colors.join(', ');\n    const firstColor = Colors[0];\n    const lastColor = Colors[Colors.length - 1];\n\n    return (\n        <div className=\"legend_container\">\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n            <div className=\"legend-color-container\">\n            <div className='legend_left_arrow' style={{borderRight: `25px solid ${lastColor}`}}></div>\n                <div className='legend-color' style={{ backgroundImage: `linear-gradient(to left, ${gradientColors})` }}></div>\n                <div className='legend_right_arrow' style={{borderLeft: `25px solid ${firstColor}`}}></div>\n            </div>\n            <div className=\"legend-item\">\n                <p className=\"legend-num-value\">{MinValue}</p>\n                <p className=\"legend-num-value\"> {MaxValue}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default MapLegend;\n","import React, { useEffect } from 'react';\nimport { GeoJSON, Pane, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport {  mapCenter, setInitialMapZoom } from '../helpers/functions';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport AFG_boundary from '../assets/data/shapefiles/AFG_boundary.json';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport AFG_provinces from '../assets/data/shapefiles/AFG_provinces.json';\nimport AFG_watershed from '../assets/data/shapefiles/AFG_watershed.json';\nimport AFG_water_basin from '../assets/data/shapefiles/AFG_water_basin.json';\n\nconst FiltererdJsonFeature = () => {\n    const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n    const map = useMap();\n    const intialZoom=setInitialMapZoom()\n\n\n    const selectedFeatureData = () => {\n        switch (selectedView) {\n            case 'BASIN':\n                return AFG_water_basin.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'WATERSHED':\n                return AFG_watershed.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'PROVINCE':\n                return AFG_provinces.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'DISTRICT':\n                return AFG_districts.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'COUNTRY':\n                return AFG_boundary.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            default:\n                return null;\n        }\n    };\n    const filteredData=selectedFeatureData()\n\n\n\n    useEffect(() => {\n        if (filteredData) {\n            const bounds = L.geoJSON(filteredData.geometry).getBounds();\n            map.flyToBounds(bounds);\n            // map.setView(bounds.getCenter(), intialZoom);\n        }\n        else{\n            map.flyTo(mapCenter,intialZoom);\n        }\n    }, [filteredData, map,intialZoom]);\n\n\n    return (\n        <Pane name=\"selected_features\" style={{ zIndex: 1000 }}>\n        <GeoJSON\n            key={`${selectedFeatureName+selectedView}`}\n            style={{ fillColor: 'none', weight: 4, color: 'yellow', fillOpacity: \"0.4\" }}\n            data={filteredData}\n        />\n        </Pane>\n    );\n};\n\nexport default FiltererdJsonFeature;\n","import React from 'react'\n\nimport cropSpecificWaterFootprints from \"../../assets/data/cropSpecificWaterFootprints.json\"\nimport Chart from \"react-apexcharts\";\n\nconst CropWaterFootprintChart = () => {\n    // Get the first three entries\n    const topCropEntries = cropSpecificWaterFootprints.slice(0, 10);\n\n    // Get the sum of the remaining entries\n    const restCropEntriesSum = cropSpecificWaterFootprints.slice(10).reduce((acc, curr) => acc + curr.WFP, 0);\n\n    // Combine the first three entries and the sum into a new array\n    const newCropData = [\n        ...topCropEntries,\n        {\n            \"CropName\": \"Other Crops\",\n            \"WFP\": restCropEntriesSum\n        }\n    ];\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: newCropData.map((entry) => entry.CropName),\n                    title: {\n                        text: 'Crop Specific water footprint (BCM/year)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'Crop Type',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (BCM/year)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: newCropData.map((entry) => (entry.WFP) / 1000000000),\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            height=\"500px\"\n        />\n    )\n}\n\nexport default CropWaterFootprintChart","import React from 'react'\n\n\nimport Chart from \"react-apexcharts\";\n\nconst WaterFootprintChart = () => {\n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    // bar: {\n                    //     horizontal: true,\n                    // },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: [\"A\",\"B\",\"C\",\"D\",\"E\",],\n                    title: {\n                        text: 'Water Type',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'Water footprint (BCM/year)',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (BCM/year)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: [1,2,3,5,6]\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            height=\"500px\"\n        />\n    )\n}\n\nexport default WaterFootprintChart","import React, { useEffect, useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport { SelectedFeaturesAverageStats, calculateAverageOfArray, calculateSumOfArray, fillDensityColor, getAnnualDataFromMonthly, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport MapLegend from '../components/MapLegend';\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport CropWaterFootprintChart from '../components/charts/CropWaterFootprintChart';\nimport DistrictStats from \"../assets/data/District_Stats.json\"\nimport CTCBlueWaterFlowChart from '../components/charts/CTCBlueWaterFlowChart';\nimport CTCGreenWaterFlowChart from '../components/charts/CTCGreenWaterFlowChart';\nimport WaterFootprintChart from '../components/charts/WaterFootprintChart';\n\n\nconst WaterFootprintPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('ETG');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState(5);\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on('mouseover', function (e) {\n      const DataItem = DistrictStats.find(item => item.DISTRICT === feature.properties.NAME);\n      const popupContent = `\n          <div>\n            District: ${feature.properties.NAME}<br/>\n            ${selectedDataType === 'ETG' ? 'ET Green' : selectedDataType === 'ETB' ? 'ET Blue' : null}  (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'}): ${DataItem[selectedDataType][selectedTime]}\n          </div>\n        `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on('mouseout', function () {\n      layer.closeTooltip();\n    });\n  }\n\n\n  const DistrictStyle = (feature => {\n    if (selectedTime !== \"\") {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find(item => item.DISTRICT === name);\n\n        return DataItem && DataItem[selectedDataType][selectedTime]\n      };\n\n      const density = getDensityFromData(feature.properties.NAME);\n      return ({\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: 'black',\n        dashArray: '2',\n        fillOpacity: 1\n      });\n\n    }\n\n  });\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n\n\n\n          <div className=\"card_container\" style={{ overflow: \"scroll\" }}>\n            <div className='defination_container'>\n              <h4>Crop Specific water footprint (BCM/year)</h4>\n            </div>\n            <CropWaterFootprintChart />\n\n\n          </div>\n\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Average anuual Green and Blue ET by districts</h4>\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>District</th>\n                    <th>Average ET Blue (mm/year)</th>\n                    <th>Average ET Green (mm/year)</th>\n                    <th>Average ET Blue Volume (MCM/year)</th>\n                    <th>Average ET Green Volume (MCM/year)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredFeaturesItems.map((districtData, index) => (\n                    <tr key={index}>\n                      <td>{districtData.DISTRICT}</td>\n                      <td>{calculateSumOfArray(districtData.ETB).toFixed(2)}</td>\n                      <td>{calculateSumOfArray(districtData.ETG).toFixed(2)}</td>\n                      <td>{(calculateAverageOfArray(districtData.ETB) * 0.001 * districtData.AREA / 1000000).toFixed(2)}</td>\n                      <td>{(calculateAverageOfArray(districtData.ETG) * 0.001 * districtData.AREA / 1000000).toFixed(2)}</td>\n                    </tr>\n                  ))}\n\n                </tbody>\n\n              </table>\n            </div>\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Water Footprint</h4>\n            </div>\n            \n<WaterFootprintChart/>\n\n          </div>\n\n\n          {/* <div className='card_container'>\n            <div className='defination_container'>\n              <h4> Virtual Blue Water Footprint</h4>\n            </div>\n            <iframe\n                title=\"Embedded Chart\"\n                src={process.env.PUBLIC_URL + '/Afghanistan_blue.html'}\n                width=\"100%\"\n                height=\"400px\"\n                frameBorder=\"0\"\n            />\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4> Virtual Green Water Footprint</h4>\n            </div>\n            <iframe\n                title=\"Embedded Chart\"\n                src={process.env.PUBLIC_URL + '/Afghanistan_green.html'}\n                width=\"100%\"\n                height=\"400px\"\n                frameBorder=\"0\"\n            />\n          </div>\n\n\n          \n\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Country-to-Country Blue Water Flow (MCM)</h4>\n            </div>\n            <CTCBlueWaterFlowChart />\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Country-to-Country Green Water Flow (MCM)</h4>\n            </div>\n            <CTCGreenWaterFlowChart />\n          </div>\n */}\n\n\n\n\n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <div className='map_options_container'>\n\n                <select className='m-1' value={selectedDataType} onChange={(e) => setSelectedDataType(e.target.value)}>\n                  <option value=\"ETB\">ET Blue</option>\n                  <option value=\"ETG\">ET Green</option>\n                </select>\n\n                {/* <select className='m-1' value={intervalType} onChange={(e) => setIntervalType(e.target.value)}>\n  <option value=\"Monthly\"> Monthly</option>\n  <option value=\"Yearly\"> Yearly</option>\n</select> */}\n\n\n                <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n                  {renderTimeOptions(intervalType)}\n                </select>\n\n              </div>\n\n\n\n              {selectedDataType && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n\n              ) : (\n                <GeoJSON\n                  style={{\n                    fillColor: 'black',\n                    weight: 2,\n                    color: 'black',\n                    fillOpacity: \"0.001\",\n                    interactive: false\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n              <FiltererdJsonFeature />\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WaterFootprintPage","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","import { LeafletProvider, addClassName, useLeafletContext } from '@react-leaflet/core';\nimport React, { forwardRef, useState, useEffect, useImperativeHandle, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nconst DEFAULT_PANES = [\n    'mapPane',\n    'markerPane',\n    'overlayPane',\n    'popupPane',\n    'shadowPane',\n    'tilePane',\n    'tooltipPane'\n];\nfunction omitPane(obj, pane) {\n    const { [pane]: _p , ...others } = obj;\n    return others;\n}\nfunction createPane(name, props, context) {\n    if (DEFAULT_PANES.indexOf(name) !== -1) {\n        throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${name}`);\n    }\n    if (context.map.getPane(name) != null) {\n        throw new Error(`A pane with this name already exists: ${name}`);\n    }\n    const parentPaneName = props.pane ?? context.pane;\n    const parentPane = parentPaneName ? context.map.getPane(parentPaneName) : undefined;\n    const element = context.map.createPane(name, parentPane);\n    if (props.className != null) {\n        addClassName(element, props.className);\n    }\n    if (props.style != null) {\n        Object.keys(props.style).forEach((key)=>{\n            // @ts-ignore\n            element.style[key] = props.style[key];\n        });\n    }\n    return element;\n}\nfunction PaneComponent(props, forwardedRef) {\n    const [paneName] = useState(props.name);\n    const [paneElement, setPaneElement] = useState(null);\n    useImperativeHandle(forwardedRef, ()=>paneElement, [\n        paneElement\n    ]);\n    const context = useLeafletContext();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const newContext = useMemo(()=>({\n            ...context,\n            pane: paneName\n        }), [\n        context\n    ]);\n    useEffect(()=>{\n        setPaneElement(createPane(paneName, props, context));\n        return function removeCreatedPane() {\n            const pane = context.map.getPane(paneName);\n            pane?.remove?.();\n            // @ts-ignore map internals\n            if (context.map._panes != null) {\n                // @ts-ignore map internals\n                context.map._panes = omitPane(context.map._panes, paneName);\n                // @ts-ignore map internals\n                context.map._paneRenderers = omitPane(// @ts-ignore map internals\n                context.map._paneRenderers, paneName);\n            }\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return props.children != null && paneElement != null ? /*#__PURE__*/ createPortal(/*#__PURE__*/ React.createElement(LeafletProvider, {\n        value: newContext\n    }, props.children), paneElement) : null;\n}\nexport const Pane = /*#__PURE__*/ forwardRef(PaneComponent);\n"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_WaterProductivity","Monthly_WaterProductivity","Yearly_ETB","Monthly_ETB","Yearly_ETG","Monthly_ETG","_ref","ColorLegendsDataItem","gradientColors","join","firstColor","lastColor","length","_jsxs","className","children","_jsx","style","borderRight","concat","backgroundImage","borderLeft","FiltererdJsonFeature","selectedView","selectedFeatureName","useSelectedFeatureContext","map","useMap","intialZoom","setInitialMapZoom","filteredData","selectedFeatureData","AFG_water_basin","find","feature","properties","NAME","AFG_watershed","AFG_provinces","AFG_districts","AFG_boundary","useEffect","bounds","L","geometry","getBounds","flyToBounds","flyTo","mapCenter","Pane","name","zIndex","GeoJSON","fillColor","weight","color","fillOpacity","data","CropWaterFootprintChart","newCropData","cropSpecificWaterFootprints","slice","reduce","acc","curr","WFP","Chart","options","chart","type","stacked","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","dataLabels","xaxis","categories","entry","CropName","title","text","offsetX","yaxis","offsetY","tooltip","y","formatter","val","responsive","breakpoint","legend","position","series","width","height","WaterFootprintChart","WaterFootprintPage","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","filteredFeaturesItems","SelectedFeaturesAverageStats","overflow","districtData","index","DISTRICT","calculateSumOfArray","ETB","toFixed","ETG","calculateAverageOfArray","AREA","MapContainer","fullscreenControl","center","backgroundColor","border","margin","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","value","onChange","e","target","renderTimeOptions","_Fragment","MapLegend","density","DataItem","DistrictStats","item","getDensityFromData","fillDensityColor","opacity","dashArray","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","BaseMap","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","DEFAULT_PANES","omitPane","obj","pane","_p","others","PaneComponent","forwardedRef","paneName","paneElement","setPaneElement","useImperativeHandle","context","useLeafletContext","newContext","useMemo","_props$pane","indexOf","getPane","parentPaneName","parentPane","undefined","createPane","addClassName","Object","keys","forEach","key","_pane$remove","remove","call","_panes","_paneRenderers","createPortal","React","LeafletProvider","forwardRef"],"sourceRoot":""}
{"version":3,"file":"static/js/218.6d410da7.chunk.js","mappings":"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","sources":["assets/data/ColorLegendsData.js","components/MapLegend.js","components/RasterLayerLegend.js","components/charts/TotalConsumptionChart.js","components/charts/UnitConsumptionChart.js","pages/EvapotranspirationPage.js"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [350, 230, 150, 80],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"350\",\n        MinValue: \"80\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [15, 10, 5, 1],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"15\",\n        MinValue: \"1\",\n    },\n    pcp_ssp585:{\n        Title: \"Precipitation\",\n        Unit: \"(mm)\",\n        Value: [200, 100, 50, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"200\",\n        MinValue: \"0\",\n    },\n    pcp_ssp245:{\n        Title: \"Precipitation\",\n        Unit: \"(mm)\",\n        Value: [100, 80, 40, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"100\",\n        MinValue: \"0\",\n    },\n    tdeg_ssp245:{\n        Title: \"Temperature\",\n        Unit: \"(°C)\",\n        Value: [3, 2, 1, 0],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"3\",\n        MinValue: \"0\",\n    },\n    tdeg_ssp585:{\n        Title: \"Temperature\",\n        Unit: \"(°C)\",\n        Value: [3, 2, 1, 0],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"3\",\n        MinValue: \"0\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 20],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [1800, 1500, 1200, 800],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"1800\",\n        MinValue: \"800\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [280, 200, 150, 50],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"280\",\n        MinValue: \"50\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [80, 50, 20, 10],\n        Colors: [\"#eff24b\", \"#fcd432\", \"#fca132\",\"#f24207\", \"#802101\"],\n        MaxValue: \"80\",\n        MinValue: \"10\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [15, 10, 5, 0.2],\n        Colors: [\"#eff24b\", \"#fcd432\", \"#fca132\",\"#f24207\", \"#802101\"],\n        MaxValue: \"15\",\n        MinValue: \"0.2\",\n    },\n    // NPP*22022\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [360, 300, 200, 13],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"8000\",\n        MinValue: \"300\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [9, 6, 2, 0.4],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"200\",\n        MinValue: \"10\",\n    },\n    Yearly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"(kg/m3)\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#017d09\", \"#02c70f\", \"#fc8003\", \"#fc3503\",\"#ab3600\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n\n\n\n    Yearly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Yearly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n","import React from 'react';\n\nconst MapLegend = ({ ColorLegendsDataItem }) => {\n    const { Title, Unit, Colors, MaxValue, MinValue } = ColorLegendsDataItem;\n    const gradientColors = Colors.join(', ');\n    const firstColor = Colors[0];\n    const lastColor = Colors[Colors.length - 1];\n\n    return (\n        <div className=\"legend_container\">\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n            <div className=\"legend-color-container\">\n            <div className='legend_left_arrow' style={{borderRight: `25px solid ${lastColor}`}}></div>\n                <div className='legend-color' style={{ backgroundImage: `linear-gradient(to left, ${gradientColors})` }}></div>\n                <div className='legend_right_arrow' style={{borderLeft: `25px solid ${firstColor}`}}></div>\n            </div>\n            <div className=\"legend-item\">\n                <p className=\"legend-num-value\">{MinValue}</p>\n                <p className=\"legend-num-value\"> {MaxValue}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default MapLegend;\n","import React from 'react'\n\nconst RasterLayerLegend = ({ legendURL, Title, Unit }) => {\n    return (\n        <div className=\"legend_container\">\n\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n\n\n            <img\n                src={legendURL}\n                alt=\"Legend_Img\"\n\n            />\n\n        </div>\n\n    )\n}\n\nexport default RasterLayerLegend","import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst TotalConsumptionChart = ({ filteredFeaturesItems }) => {\n\n    // Calculate total consumptions and sort districts based on total consumption\n    const districtData = filteredFeaturesItems.map((entry) => {\n        const totalConsumption = (calculateSumOfArray(getAnnualDataFromMonthly(entry.AETI)) * 0.001 * entry.AREA / 1000000000).toFixed(2);\n        return { district: entry.DISTRICT, totalConsumption };\n    });\n    districtData.sort((a, b) => b.totalConsumption - a.totalConsumption);\n\n    const districtNames = districtData.map((data) => data.district);\n    const totalConsumptions = districtData.map((data) => data.totalConsumption);\n\n    // Calculate the minimum height based on the number of districts\n    const minHeightPerDistrict = 20; // Adjust this value as needed\n    const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Total Consumption (BCM)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} BCM`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: totalConsumptions\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default TotalConsumptionChart","import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateAverageOfArray, calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst UnitConsumptionChart = ({ filteredFeaturesItems }) => {\n\n    const districtData = filteredFeaturesItems.map((entry) => ({\n        name: entry.DISTRICT,\n        UnitConsumptions: calculateAverageOfArray((entry.AETI.map((aeti) => aeti * 10))).toFixed(2)\n    }));\n\n    districtData.sort((a, b) => b.UnitConsumptions - a.UnitConsumptions);\n\n\n    const districtNames = districtData.map((entry) => entry.name);\n    const UnitConsumptions = districtData.map((entry) => entry.UnitConsumptions);\n\n    // const districtNames = filteredFeaturesItems.map((entry) => entry.DISTRICT);\n    // const UnitConsumptions= filteredFeaturesItems.map((entry) => (calculateAverageOfArray((entry.AETI)) * 10) );\n\n\n   const minHeightPerDistrict = 20; // Adjust this value as needed\n    const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n\n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Unit Consumption (m3/ha)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (m3/ha)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: UnitConsumptions\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default UnitConsumptionChart","import React, { useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON, TileLayer, ImageOverlay } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { MonthsArray, SelectedFeaturesAverageStatsFunction, YearsArray, calculateAverageOfArray, calculateSumOfArray, fillDensityColor, getAnnualDataFromMonthly, renderTimeOptions } from '../helpers/functions';\nimport { BaseMapsLayers, mapCenter, pngRasterBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport MapLegend from '../components/MapLegend';\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport HorizontalBarChart from '../components/charts/TotalConsumptionChart';\nimport UnitConsumptionChart from '../components/charts/UnitConsumptionChart';\nimport DistrictStats from \"../assets/data/District_Stats.json\"\nimport District_Stats from \"../assets/data/District_Stats.json\"\nimport Plot from 'react-plotly.js';\nimport Avg_AETI from \"../assets/raster_data/Avg_AETI.png\"\nimport Avg_AETI_Legend from \"../assets/legends/Avg_AETI_Legend.png\"\nimport Avg_RET from \"../assets/raster_data/Avg_RET.png\"\nimport Avg_RET_Legend from \"../assets/legends/Avg_RET_Legend.png\"\nimport RasterLayerLegend from '../components/RasterLayerLegend';\n\nconst EvapotranspirationPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('AETI');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState(5);\n  const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n\n  const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n\n\n  const handleBasemapSelection = (e) => {\n    const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n    setSelectedBasemapLayer(selectedItem);\n\n\n  };\n\n\n\n  const filteredFeaturesItems = selectedView && selectedFeatureName !== \"\" ? District_Stats.filter(item => item[selectedView] === selectedFeatureName) : District_Stats;\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStatsFunction(filteredFeaturesItems)\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = DistrictStats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              ${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${intervalType === 'Monthly' ? DataItem[selectedDataType][selectedTime] : getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]}\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime && selectedDataType) {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find((item) => item.DISTRICT === name);\n        return DataItem && intervalType === 'Monthly' ? DataItem[selectedDataType][selectedTime] : getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n\n      return {\n        // fillColor: selectedDensityFunc(density),\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleDataLayerSelection = (e) => {\n    const value = e.target.value;\n    setSelectedDataType((prevSelectedRaster) =>\n      prevSelectedRaster === value ? '' : value\n    );\n\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n\n  <option value=\"AETI\">Evapotranspiration</option>\n\n\n  let TableAnnualData;\n\n  if (SelectedFeaturesStatsData) {\n    TableAnnualData = {\n      Year: YearsArray,\n      Yearly_AETI: getAnnualDataFromMonthly(SelectedFeaturesStatsData.AETI),\n      Yearly_PCP: getAnnualDataFromMonthly(SelectedFeaturesStatsData.PCP),\n      Yearly_RET: getAnnualDataFromMonthly(SelectedFeaturesStatsData.RET),\n      Yearly_ETB: SelectedFeaturesStatsData.ETB,\n      Yearly_ETG: SelectedFeaturesStatsData.ETG,\n    }\n  }\n\n\n\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n\n\n        <>\n          <div className='left_panel_equal'>\n\n\n            <div className='card_container'>\n              <div className='defination_container'>\n                <h4>Evapotranspiration and Potential ET</h4>\n              </div>\n              <Plot\n                data={[\n                  {\n                    x: MonthsArray,\n                    y: SelectedFeaturesStatsData.AETI,\n                    fill: 'tozeroy',\n                    type: 'scatter',\n                    name: \"Evapotranspiration (mm/month)\",\n                    yaxis: 'y1',\n                  },\n                  {\n                    x: MonthsArray,\n                    // y: SelectedFeaturesStatsData.RET,\n                    y: SelectedFeaturesStatsData.RET.map(value => value / 10),\n                    type: 'scatter',\n                    mode: 'lines+markers',\n                    name: \"Potential ET (mm/month)\",\n                    marker: { color: 'red' },\n                    yaxis: 'y2',\n                  },\n                ]}\n                layout={{\n                  xaxis: {\n                    title: 'Year',\n                  },\n                  yaxis: {\n                    title: \"Evapotranspiration (mm/month)\",\n                    side: 'left',\n                    showgrid: false,\n                  },\n                  yaxis2: {\n                    title: \"Potential ET (mm/month)\",\n                    side: 'right',\n                    overlaying: 'y',\n                    showgrid: false,\n                  },\n                  legend: {\n                    orientation: 'h',\n                    x: 0,\n                    y: 1.2,\n                  },\n                }}\n\n                style={{ width: \"100%\", height: \"100%)\" }}\n              />\n            </div>\n\n            <div className='card_container'>\n              {/* <div className='defination_container'>\n      <h4>Land Cover class area by district (ha)</h4>\n    </div> */}\n              <div className='item_table_container'>\n                <table className='item_table'>\n                  <thead>\n                    <tr>\n                      <th>Year</th>\n                      <th>Total Evapotranspiration (BCM/year)</th>\n                      <th>ET Blue (BCM/year)</th>\n                      <th>ET Green (BCM/year)</th>\n                      <th>Precipitation (PCP) (BCM/year)</th>\n                      <th>PCP - ET (BCM/year)</th>\n                      <th>Portion of PCP locally consumed (%)</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {TableAnnualData.Year.map((year, index) => (\n                      <tr key={index}>\n                        <td>{year}</td>\n                        <td>{(TableAnnualData.Yearly_AETI[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                        <td>{(TableAnnualData.Yearly_ETB[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                        <td>{(TableAnnualData.Yearly_ETG[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                        <td>{(TableAnnualData.Yearly_PCP[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                        <td className={TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index] < 0 ? 'red-text' : ''}>\n                          {((TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index]) * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(2)}\n                        </td>\n\n                        <td>{(TableAnnualData.Yearly_AETI[index] * 100 / TableAnnualData.Yearly_PCP[index]).toFixed(1)}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            <div className=\"card_container\" style={{ maxHeight: \"600px\", overflow: \"scroll\" }}>\n\n              <div className='defination_container'>\n                <h4>Total Consumption (BCM)</h4>\n              </div>\n\n              <HorizontalBarChart filteredFeaturesItems={filteredFeaturesItems} />\n            </div>\n\n            <div className=\"card_container\" style={{ maxHeight: \"600px\", overflow: \"scroll\" }}>\n\n              <div className='defination_container'>\n                <h4>Unit Consumption (m<sup>3</sup>/ha)</h4>\n              </div>\n\n              <UnitConsumptionChart filteredFeaturesItems={filteredFeaturesItems} />\n            </div>\n\n\n          </div>\n\n          <div className='right_panel_equal' >\n            <div className='card_container' style={{ height: \"100%\" }}>\n              <MapContainer\n                fullscreenControl={true}\n                center={mapCenter}\n                style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                zoom={setInitialMapZoom()}\n                maxBounds={[[23, 49], [41, 82]]}\n                // maxZoom={8}\n                minZoom={setInitialMapZoom()}\n                keyboard={false}\n                dragging={setDragging()}\n                // attributionControl={false}\n                // scrollWheelZoom={false}\n                doubleClickZoom={false}\n              >\n\n                <div className='map_layer_manager'>\n                  <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\n                    <div className=\"accordion-item\">\n                      <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                        <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseOne\">\n                          Base Map\n                        </button>\n                      </h2>\n                      <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                        <div className=\"accordion-body map_layer_collapse_body\">\n                          {BaseMapsLayers.map(option => (\n                            <div key={option.value} className=\"collapse_layers_item\">\n                              <input\n                                type=\"radio\"\n                                id={option.name}\n                                name=\"data_type\"\n                                value={option.name}\n                                checked={selectedBasemapLayer?.name === option.name}\n                                onChange={handleBasemapSelection}\n                              />\n                              <label htmlFor={option.name}>{option.name}</label>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"accordion-item\">\n                      <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                        <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                          Raster Layers\n                        </button>\n                      </h2>\n                      <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                        <div className=\"accordion-body map_layer_collapse_body\">\n                          <div className=\"collapse_layers_item\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"avg_aeti_raster\"\n                              value=\"avg_aeti_raster\"\n                              checked={selectedDataType === 'avg_aeti_raster'}\n                              onChange={handleDataLayerSelection}\n                            />\n                            <label htmlFor=\"avg_aeti_raster\">Avg. Annual Evapotranspiration</label>\n                          </div>\n                          <div className=\"collapse_layers_item\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"avg_ret_raster\"\n                              value=\"avg_ret_raster\"\n                              checked={selectedDataType === 'avg_ret_raster'}\n                              onChange={handleDataLayerSelection}\n                            />\n                            <label htmlFor=\"avg_ret_raster\">Avg. Annual Potential ET</label>\n\n                          </div>\n\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"accordion-item\">\n                      <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                        <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseThree\">\n                          Vector Data Layers\n                        </button>\n                      </h2>\n                      <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                        <div className=\"accordion-body map_layer_collapse_body\">\n\n                          <div className=\"collapse_layers_item\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"AETI\"\n                              value=\"AETI\"\n                              checked={selectedDataType === 'AETI'}\n                              onChange={handleDataLayerSelection}\n                            />\n                            <label htmlFor=\"AETI\">Evapotranspiration</label>\n                          </div>\n                          <div className=\"collapse_layers_item\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"RET\"\n                              value=\"RET\"\n                              checked={selectedDataType === 'RET'}\n                              onChange={handleDataLayerSelection}\n                            />\n                            <label htmlFor=\"RET\">Potential ET</label>\n                          </div>\n\n\n                          <select value={intervalType} onChange={handleIntervalTypeChange}>\n                            <option value=\"Monthly\">Monthly</option>\n                            <option value=\"Yearly\">Yearly</option>\n                          </select>\n\n\n                          <select value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n                            {renderTimeOptions(intervalType)}\n                          </select>\n\n\n\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <TileLayer\n                  key={selectedBasemapLayer.url}\n                  attribution={selectedBasemapLayer.attribution}\n                  url={selectedBasemapLayer.url}\n                  subdomains={selectedBasemapLayer.subdomains}\n                />\n\n\n\n\n\n                {selectedDataType === 'avg_aeti_raster' ? (\n                  <>\n                    <ImageOverlay\n                      opacity={1}\n                      attribution=\"\"\n                      key=\"avg_aeti_raster\"\n                      url={Avg_AETI}\n                      fitBounds={true}\n                      // interactive={true}\n                      bounds={pngRasterBounds}\n\n                    />\n                    <RasterLayerLegend\n                      legendURL={Avg_AETI_Legend}\n                      Title=\"Avg. Annual Evapotranspiration\"\n                      Unit=\"(mm/year)\"\n                    />\n\n                  </>\n\n                ) : selectedDataType === 'avg_ret_raster' ? (\n                  <>\n\n                    <ImageOverlay\n                      opacity={1}\n                      attribution=\"\"\n                      key=\"avg_ret_raster\"\n                      url={Avg_RET}\n                      fitBounds={true}\n                      // interactive={true}\n                      bounds={pngRasterBounds}\n\n                    />\n                    <RasterLayerLegend\n                      legendURL={Avg_RET_Legend}\n                      Title=\"Avg. Potential ET\"\n                      Unit=\"(mm/year)\"\n                    />\n\n\n                  </>\n\n                ) : (\n                  <>\n                    {selectedDataType !== \"\" && selectedTime !== \"\" && intervalType !== \"\" ? (\n                      <>\n                        {ColorLegendsDataItem && (\n                          <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                        )}\n\n                        <GeoJSON\n                          key={selectedDataType + selectedTime + intervalType}\n                          style={DistrictStyle}\n                          data={AFG_districts.features}\n                          onEachFeature={DistrictOnEachfeature}\n                        />\n                      </>\n\n                    ) : (\n\n                      <GeoJSON\n                        style={{\n                          fillColor: 'black',\n                          weight: 2,\n                          color: 'black',\n                          fillOpacity: \"0.001\",\n                          interactive: false\n                        }}\n                        data={AfghanistanCountry.features}\n                      // onEachFeature={DistrictOnEachfeature}\n                      />\n                    )}\n                  </>\n\n                )}\n\n\n\n\n\n\n\n\n                <FiltererdJsonFeature />\n\n\n\n                <BaseMap />\n\n              </MapContainer>\n            </div>\n          </div>\n        </>\n\n\n      </div>\n    </div >\n  )\n}\n\nexport default EvapotranspirationPage"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","pcp_ssp585","pcp_ssp245","tdeg_ssp245","tdeg_ssp585","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_WaterProductivity","Yearly_ETB","Monthly_ETB","Yearly_ETG","Monthly_ETG","_ref","ColorLegendsDataItem","gradientColors","join","firstColor","lastColor","length","_jsxs","className","children","_jsx","style","borderRight","concat","backgroundImage","borderLeft","legendURL","src","alt","filteredFeaturesItems","districtData","map","entry","totalConsumption","calculateSumOfArray","getAnnualDataFromMonthly","AETI","AREA","toFixed","district","DISTRICT","sort","a","b","districtNames","data","totalConsumptions","minHeight","Math","max","Chart","options","chart","type","stacked","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","dataLabels","xaxis","categories","title","text","offsetX","yaxis","offsetY","tooltip","y","formatter","val","responsive","breakpoint","legend","position","series","width","height","name","UnitConsumptions","calculateAverageOfArray","aeti","EvapotranspirationPage","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","selectedView","selectedFeatureName","useSelectedFeatureContext","selectedBasemapLayer","setSelectedBasemapLayer","BaseMapsLayers","handleBasemapSelection","e","selectedItem","find","item","target","value","District_Stats","filter","SelectedFeaturesStatsData","SelectedFeaturesAverageStatsFunction","handleDataLayerSelection","prevSelectedRaster","TableAnnualData","Year","YearsArray","PCP","RET","ETB","ETG","_Fragment","Plot","x","MonthsArray","fill","mode","marker","color","layout","side","showgrid","yaxis2","overlaying","orientation","year","index","maxHeight","overflow","HorizontalBarChart","UnitConsumptionChart","MapContainer","fullscreenControl","center","mapCenter","backgroundColor","border","margin","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","id","option","checked","onChange","htmlFor","renderTimeOptions","TileLayer","attribution","url","subdomains","ImageOverlay","opacity","Avg_AETI","fitBounds","bounds","pngRasterBounds","RasterLayerLegend","Avg_RET","Avg_RET_Legend","MapLegend","GeoJSON","feature","density","DataItem","DistrictStats","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature","BaseMap"],"sourceRoot":""}
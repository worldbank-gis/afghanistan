{"version":3,"file":"static/js/394.1ca6dd38.chunk.js","mappings":"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","sources":["assets/data/ColorLegendsData.js","components/MapLegend.js","components/RasterLayerLegend.js","pages/PrecipitationPage.js","../node_modules/react-leaflet/lib/ImageOverlay.js"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [350, 230, 150, 80],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"350\",\n        MinValue: \"80\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [15, 10, 5, 1],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"15\",\n        MinValue: \"1\",\n    },\n    pcp_ssp585:{\n        Title: \"Precipitation\",\n        Unit: \"(mm)\",\n        Value: [200, 100, 50, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"200\",\n        MinValue: \"0\",\n    },\n    pcp_ssp245:{\n        Title: \"Precipitation\",\n        Unit: \"(mm)\",\n        Value: [100, 80, 40, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"100\",\n        MinValue: \"0\",\n    },\n    tdeg_ssp245:{\n        Title: \"Temperature\",\n        Unit: \"(°C)\",\n        Value: [3, 2, 1, 0],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"3\",\n        MinValue: \"0\",\n    },\n    tdeg_ssp585:{\n        Title: \"Temperature\",\n        Unit: \"(°C)\",\n        Value: [3, 2, 1, 0],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"3\",\n        MinValue: \"0\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 20],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [1800, 1500, 1200, 800],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"1800\",\n        MinValue: \"800\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [280, 200, 150, 50],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"280\",\n        MinValue: \"50\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [80, 50, 20, 10],\n        Colors: [\"#eff24b\", \"#fcd432\", \"#fca132\",\"#f24207\", \"#802101\"],\n        MaxValue: \"80\",\n        MinValue: \"10\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [15, 10, 5, 0.2],\n        Colors: [\"#eff24b\", \"#fcd432\", \"#fca132\",\"#f24207\", \"#802101\"],\n        MaxValue: \"15\",\n        MinValue: \"0.2\",\n    },\n    // NPP*22022\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [360, 300, 200, 13],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"8000\",\n        MinValue: \"300\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [9, 6, 2, 0.4],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"200\",\n        MinValue: \"10\",\n    },\n    Yearly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"(kg/m3)\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#017d09\", \"#02c70f\", \"#fc8003\", \"#fc3503\",\"#ab3600\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n\n\n\n    Yearly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Yearly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n","import React from 'react';\n\nconst MapLegend = ({ ColorLegendsDataItem }) => {\n    const { Title, Unit, Colors, MaxValue, MinValue } = ColorLegendsDataItem;\n    const gradientColors = Colors.join(', ');\n    const firstColor = Colors[0];\n    const lastColor = Colors[Colors.length - 1];\n\n    return (\n        <div className=\"legend_container\">\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n            <div className=\"legend-color-container\">\n            <div className='legend_left_arrow' style={{borderRight: `25px solid ${lastColor}`}}></div>\n                <div className='legend-color' style={{ backgroundImage: `linear-gradient(to left, ${gradientColors})` }}></div>\n                <div className='legend_right_arrow' style={{borderLeft: `25px solid ${firstColor}`}}></div>\n            </div>\n            <div className=\"legend-item\">\n                <p className=\"legend-num-value\">{MinValue}</p>\n                <p className=\"legend-num-value\"> {MaxValue}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default MapLegend;\n","import React from 'react'\n\nconst RasterLayerLegend = ({ legendURL, Title, Unit }) => {\n    return (\n        <div className=\"legend_container\">\n\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n\n\n            <img\n                src={legendURL}\n                alt=\"Legend_Img\"\n\n            />\n\n        </div>\n\n    )\n}\n\nexport default RasterLayerLegend","import React, { useState } from 'react'\nimport { MapContainer, GeoJSON, TileLayer, ImageOverlay } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { MonthsArray, SelectedFeaturesAverageStatsFunction, YearsArray, fillDensityColor, getAnnualDataFromMonthly, renderTimeOptions } from '../helpers/functions';\nimport Plot from 'react-plotly.js';\nimport { BaseMapsLayers, mapCenter, pngRasterBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\n\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport MapLegend from '../components/MapLegend';\nimport Avg_PCP from \"../assets/raster_data/Avg_PCP.png\"\nimport Avg_PCP_Legend from \"../assets/legends/Avg_PCP_Legend.png\"\nimport Avg_RET from \"../assets/raster_data/Avg_RET.png\"\nimport Avg_AridityIndex from \"../assets/raster_data/Avg_Aridity_Index.png\"\nimport Avg_RET_Legend from \"../assets/legends/Avg_RET_Legend.png\"\nimport Avg_AridityIndex_Legend from \"../assets/legends/Avg_Aridity_Index_legend.png\"\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport District_Stats from \"../assets/data/District_Stats.json\"\nimport RasterLayerLegend from '../components/RasterLayerLegend';\n\n\nconst PrecipitationPage = () => {\n  const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n\n\n\n  const filteredFeaturesItems = selectedView && selectedFeatureName !== \"\" ? District_Stats.filter(item => item[selectedView] === selectedFeatureName) : District_Stats;\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStatsFunction(filteredFeaturesItems)\n\n\n  const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n\n\n  const handleBasemapSelection = (e) => {\n    const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n    setSelectedBasemapLayer(selectedItem);\n\n\n  };\n\n\n\n  const [selectedDataType, setSelectedDataType] = useState('PCP');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState(5);\n\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = District_Stats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              ${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${intervalType === 'Monthly' ? DataItem[selectedDataType][selectedTime] : getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]}\n        <br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime !== \"\") {\n      const getDensityFromData = (name) => {\n        const DataItem = District_Stats.find((item) => item.DISTRICT === name);\n        return DataItem && intervalType === 'Monthly' ? DataItem[selectedDataType][selectedTime] : getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n\n      return {\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        // fillColor: selectedTime !== '' ? Annual_Density(density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleDataLayerSelection = (e) => {\n    const value = e.target.value;\n    setSelectedDataType((prevSelectedRaster) =>\n      prevSelectedRaster === value ? '' : value\n    );\n\n  };\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n\n\n\n  const TableAnnualData = {\n    Year: YearsArray,\n    Yearly_AETI: getAnnualDataFromMonthly(SelectedFeaturesStatsData.AETI),\n    Yearly_PCP: getAnnualDataFromMonthly(SelectedFeaturesStatsData.PCP),\n    Yearly_RET: getAnnualDataFromMonthly(SelectedFeaturesStatsData.RET),\n    Yearly_ETB: SelectedFeaturesStatsData.ETB,\n    Yearly_ETG: SelectedFeaturesStatsData.ETG,\n  }\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n\n        <div className='left_panel_equal'>\n\n\n          <div className='card_container'>\n\n            <div className='defination_container'>\n              <h4>Precipitation and Potential ET</h4>\n            </div>\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.PCP,\n                  type: 'bar',\n                  name: \"Precipitation (mm/year)\",\n                  yaxis: 'y1',\n                },\n                {\n                  x: MonthsArray,\n                  // y: SelectedFeaturesStatsData.RET,\n                  y: SelectedFeaturesStatsData.RET.map(value => value / 10),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Potential ET (mm/year)\",\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Precipitation (mm/year)\",\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: \"Potential ET (mm/year)\",\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n\n\n\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Aridity Index</h4>\n            </div>\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.AridityIndex,\n                  type: 'bar',\n                  marker: {\n                    color: SelectedFeaturesStatsData.AridityIndex.map(value => {\n                      if (value > 15) {\n                        return '#eff24b';\n                      } else if (value > 10) {\n                        return '#fcd432';\n                      } else if (value > 5) {\n                        return '#fca132';\n                      } else if (value > 0.2) {\n                        return '#f24207';\n                      } else {\n                        return '#802101';\n                      }\n                    }),\n                  },\n\n\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Aridity Index\"\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n          </div>\n\n          <div className='card_container'>\n            {/* <div className='defination_container'>\n              <h4>Land Cover class area by district (ha)</h4>\n            </div> */}\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>Year</th>\n                    <th>Evapotranspiration (mm/year)</th>\n                    <th>Precipitation (mm/year)</th>\n                    <th>PCP - ET (mm/year)</th>\n                    <th>Potential ET (mm/year)</th>\n                    <th>Aridity Index</th>\n                    <th>ET Blue (mm/year)</th>\n                    <th>ET Green (mm/year)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {TableAnnualData.Year.map((year, index) => (\n                    <tr key={index}>\n                      <td>{year}</td>\n                      <td>{TableAnnualData.Yearly_AETI[index]}</td>\n                      <td>{TableAnnualData.Yearly_PCP[index]}</td>\n                      <td className={TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index] < 0 ? 'red-text' : ''}>\n                        {(TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index]).toFixed(1)}\n                      </td>\n                      <td>{(TableAnnualData.Yearly_RET[index] / 10).toFixed(2)}</td>\n                      <td>{(TableAnnualData.Yearly_PCP[index] / (TableAnnualData.Yearly_RET[index] / 10)).toFixed(2)}</td>\n                      <td>{TableAnnualData.Yearly_ETB[index].toFixed(1)}</td>\n                      <td>{TableAnnualData.Yearly_ETG[index].toFixed(1)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n\n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={mapCenter}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n\n\n              <div className='map_layer_manager'>\n                <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseOne\">\n                        Base Map\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n                        {BaseMapsLayers.map(option => (\n                          <div key={option.value} className=\"collapse_layers_item\">\n                            <input\n                              type=\"radio\"\n                              id={option.name}\n                              name=\"data_type\"\n                              value={option.name}\n                              checked={selectedBasemapLayer?.name === option.name}\n                              onChange={handleBasemapSelection}\n                            />\n                            <label htmlFor={option.name}>{option.name}</label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                        Raster Layers\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"avg_pcp_raster\"\n                            value=\"avg_pcp_raster\"\n                            checked={selectedDataType === 'avg_pcp_raster'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"avg_pcp_raster\">Avg. Annual Precipitation</label>\n\n\n                        </div>\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"avg_ret_raster\"\n                            value=\"avg_ret_raster\"\n                            checked={selectedDataType === 'avg_ret_raster'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"avg_ret_raster\">Avg. Annual Potential ET</label>\n\n                        </div>\n\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"avg_aridityIndex_raster\"\n                            value=\"avg_aridityIndex_raster\"\n                            checked={selectedDataType === 'avg_aridityIndex_raster'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"avg_aridityIndex_raster\">Avg. Aridity Index</label>\n\n                        </div>\n\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseThree\">\n                        Vector Data Layers\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"PCP\"\n                            value=\"PCP\"\n                            checked={selectedDataType === 'PCP'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"PCP\">Precipitation</label>\n                        </div>\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"RET\"\n                            value=\"RET\"\n                            checked={selectedDataType === 'RET'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"RET\">Potential ET</label>\n                        </div>\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"AridityIndex\"\n                            value=\"AridityIndex\"\n                            checked={selectedDataType === 'AridityIndex'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"AridityIndex\">Aridity Index</label>\n                        </div>\n\n\n\n                        <select value={intervalType} onChange={handleIntervalTypeChange}>\n                          <option value=\"Monthly\">Monthly</option>\n                          <option value=\"Yearly\">Yearly</option>\n                        </select>\n\n\n                        <select value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n                          {renderTimeOptions(intervalType)}\n                        </select>\n\n\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <TileLayer\n                key={selectedBasemapLayer.url}\n                attribution={selectedBasemapLayer.attribution}\n                url={selectedBasemapLayer.url}\n                subdomains={selectedBasemapLayer.subdomains}\n              />\n\n\n\n              {selectedDataType === 'avg_pcp_raster' ? (\n                <>\n\n                  <ImageOverlay\n                    opacity={1}\n                    attribution=\"\"\n                    key=\"avg_pcp_raster\"\n                    url={Avg_PCP}\n                    fitBounds={true}\n                    // interactive={true}\n                    bounds={pngRasterBounds}\n\n                  />\n                  <RasterLayerLegend\n                    legendURL={Avg_PCP_Legend}\n                    Title=\"Avg. Annual Precipitation\"\n                    Unit=\"(mm/year)\"\n                  />\n\n                </>\n\n              ) : selectedDataType === 'avg_ret_raster' ? (\n                <>\n\n                  <ImageOverlay\n                    opacity={1}\n                    attribution=\"\"\n                    key=\"avg_ret_raster\"\n                    url={Avg_RET}\n                    fitBounds={true}\n                    // interactive={true}\n                    bounds={pngRasterBounds}\n\n                  />\n                  <RasterLayerLegend\n                    legendURL={Avg_RET_Legend}\n                    Title=\"Avg. Potential ET\"\n                    Unit=\"(mm/year)\"\n                  />\n\n\n                </>\n\n              ): selectedDataType === 'avg_aridityIndex_raster' ? (\n                <>\n\n                  <ImageOverlay\n                    opacity={1}\n                    attribution=\"\"\n                    key=\"avg_aridityIndex_raster\"\n                    url={Avg_AridityIndex}\n                    fitBounds={true}\n                    // interactive={true}\n                    bounds={pngRasterBounds}\n\n                  />\n                  <RasterLayerLegend\n                    legendURL={Avg_AridityIndex_Legend}\n                    Title=\"Avg. Aridity Index\"\n                    Unit=\"\"\n                  />\n\n\n                </>\n\n              ) : (\n                <>\n                  {selectedDataType && selectedTime !== '' && intervalType ? (\n                    <>\n                      {ColorLegendsDataItem && (\n                        <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                      )}\n                      <GeoJSON\n                        key={selectedDataType + selectedTime + intervalType}\n                        style={DistrictStyle}\n                        data={AFG_districts.features}\n                        onEachFeature={DistrictOnEachfeature}\n                      />\n\n                    </>\n\n                  ) : (\n                    <GeoJSON\n                      style={{\n                        fillColor: 'black',\n                        weight: 2,\n                        color: 'black',\n                        fillOpacity: \"0.001\",\n                        interactive: false\n                      }}\n                      data={AfghanistanCountry.features}\n                    />\n                  )}\n                </>\n\n              )}\n\n              <FiltererdJsonFeature />\n\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PrecipitationPage","import { createElementObject, createLayerComponent, extendContext, updateMediaOverlay } from '@react-leaflet/core';\nimport { LatLngBounds, ImageOverlay as LeafletImageOverlay } from 'leaflet';\nexport const ImageOverlay = createLayerComponent(function createImageOveraly({ bounds , url , ...options }, ctx) {\n    const overlay = new LeafletImageOverlay(url, bounds, options);\n    return createElementObject(overlay, extendContext(ctx, {\n        overlayContainer: overlay\n    }));\n}, function updateImageOverlay(overlay, props, prevProps) {\n    updateMediaOverlay(overlay, props, prevProps);\n    if (props.bounds !== prevProps.bounds) {\n        const bounds = props.bounds instanceof LatLngBounds ? props.bounds : new LatLngBounds(props.bounds);\n        overlay.setBounds(bounds);\n    }\n    if (props.url !== prevProps.url) {\n        overlay.setUrl(props.url);\n    }\n});\n"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","pcp_ssp585","pcp_ssp245","tdeg_ssp245","tdeg_ssp585","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_WaterProductivity","Yearly_ETB","Monthly_ETB","Yearly_ETG","Monthly_ETG","_ref","ColorLegendsDataItem","gradientColors","join","firstColor","lastColor","length","_jsxs","className","children","_jsx","style","borderRight","concat","backgroundImage","borderLeft","legendURL","src","alt","PrecipitationPage","selectedView","selectedFeatureName","useSelectedFeatureContext","filteredFeaturesItems","District_Stats","filter","item","SelectedFeaturesStatsData","SelectedFeaturesAverageStatsFunction","selectedBasemapLayer","setSelectedBasemapLayer","useState","BaseMapsLayers","handleBasemapSelection","e","selectedItem","find","name","target","value","selectedDataType","setSelectedDataType","intervalType","setIntervalType","selectedTime","setSelectedTime","handleDataLayerSelection","prevSelectedRaster","TableAnnualData","Year","YearsArray","getAnnualDataFromMonthly","AETI","PCP","RET","ETB","ETG","Plot","data","x","MonthsArray","y","type","yaxis","map","mode","marker","color","layout","xaxis","title","side","showgrid","yaxis2","overlaying","legend","orientation","width","height","AridityIndex","year","index","toFixed","MapContainer","fullscreenControl","center","mapCenter","backgroundColor","border","margin","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","id","option","checked","onChange","htmlFor","renderTimeOptions","TileLayer","attribution","url","subdomains","_Fragment","ImageOverlay","opacity","Avg_PCP","fitBounds","bounds","pngRasterBounds","RasterLayerLegend","Avg_RET","Avg_RET_Legend","Avg_AridityIndex","MapLegend","GeoJSON","feature","density","DataItem","DISTRICT","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature","BaseMap","createLayerComponent","ctx","options","overlay","LeafletImageOverlay","createElementObject","extendContext","overlayContainer","props","prevProps","updateMediaOverlay","LatLngBounds","setBounds","setUrl"],"sourceRoot":""}
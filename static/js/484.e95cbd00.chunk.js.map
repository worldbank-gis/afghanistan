{"version":3,"file":"static/js/484.e95cbd00.chunk.js","mappings":"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","sources":["assets/data/ColorLegendsData.js","components/MapLegend.js","components/charts/BiomassProductionChart.js","pages/BiomassPage.js","pages/FiltererdJsonFeature.js"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [350, 230, 150, 80],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"350\",\n        MinValue: \"80\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [15, 10, 5, 1],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"15\",\n        MinValue: \"1\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 20],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [1800, 1500, 1200, 800],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"1800\",\n        MinValue: \"800\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [280, 200, 150, 50],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"280\",\n        MinValue: \"50\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [80, 50, 20, 10],\n        Colors: [\"#802101\", \"#f24207\", \"#fca132\",\"#fcd432\", \"#eff24b\"],\n        MaxValue: \"80\",\n        MinValue: \"10\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [15, 10, 5, 0.2],\n        Colors: [\"#802101\", \"#f24207\", \"#fca132\",\"#fcd432\", \"#eff24b\"],\n        MaxValue: \"15\",\n        MinValue: \"0.2\",\n    },\n    // NPP*22022\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [360, 300, 200, 13],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"8000\",\n        MinValue: \"300\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [9, 6, 2, 0.4],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"200\",\n        MinValue: \"10\",\n    },\n    Yearly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n    Monthly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n\n\n    Yearly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Yearly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n","import React from 'react';\n\nconst MapLegend = ({ ColorLegendsDataItem }) => {\n    const { Title, Unit, Value, Colors, MaxValue, MinValue } = ColorLegendsDataItem;\n    const gradientColors = Colors.join(', ');\n    const firstColor = Colors[0];\n    const lastColor = Colors[Colors.length - 1];\n\n    return (\n        <div className=\"legend_container\">\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n            <div className=\"legend-color-container\">\n            <div className='legend_left_arrow' style={{borderRight: `25px solid ${lastColor}`}}></div>\n                <div className='legend-color' style={{ backgroundImage: `linear-gradient(to left, ${gradientColors})` }}></div>\n                <div className='legend_right_arrow' style={{borderLeft: `25px solid ${firstColor}`}}></div>\n            </div>\n            <div className=\"legend-item\">\n                <p className=\"legend-num-value\">{MinValue}</p>\n                <p className=\"legend-num-value\"> {MaxValue}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default MapLegend;\n","import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateAverageOfArray, calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst BiomassProductionChart = ({ filteredFeaturesItems }) => {\n    const districtData = filteredFeaturesItems.map((entry) => ({\n        name: entry.DISTRICT,\n        biomassProduction: calculateAverageOfArray(getAnnualDataFromMonthly(entry.NPP.map((npp) => npp * 22.22))).toFixed(2)\n    }));\n\n    // Sort the district data based on biomass production (highest to lowest)\n    districtData.sort((a, b) => b.biomassProduction - a.biomassProduction);\n\n    const districtNames = districtData.map((entry) => entry.name);\n    const biomassProduction = districtData.map((entry) => entry.biomassProduction);\n\n    // Calculate the minimum height based on the number of districts\n    const minHeightPerDistrict = 20; // Adjust this value as needed\n    const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n    \n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: true\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Average Biomass Mean Annual (kg/ha/year)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (kg/ha/year)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: biomassProduction\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default BiomassProductionChart","import React, { useState } from \"react\";\nimport SearchBar from \"../components/SearchBar\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport BaseMap from \"../components/BaseMap\";\nimport AfghanistanCountry from \"../assets/data/shapefiles/AFG_boundary.json\";\nimport {\n  MonthsArray,\n  SelectedFeaturesAverageStats,\n  calculateAverageOfArray,\n  fillDensityColor,\n  getAnnualDataFromMonthly,\n  renderTimeOptions,\n  setDragging,\n  setInitialMapZoom,\n} from \"../helpers/functions\";\nimport Plot from \"react-plotly.js\";\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport MapLegend from \"../components/MapLegend\";\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport FiltererdJsonFeature from \"./FiltererdJsonFeature\";\nimport { useSelectedFeatureContext } from \"../contexts/SelectedFeatureContext\";\nimport BiomassProductionChart from \"../components/charts/BiomassProductionChart\";\nimport DistrictStats from \"../assets/data/District_Stats.json\"\n\n\nconst BiomassPage = () => {\n  const [intervalType, setIntervalType] = useState(\"Yearly\");\n  const [selectedTime, setSelectedTime] = useState(5);\n  const [selectedDataType, setSelectedDataType] = useState(\"NPP\");\n\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n\n\n\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = DistrictStats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n      const biomassProduction = intervalType ==='Monthly' ? (DataItem[selectedDataType][selectedTime]*22.222).toFixed(2) :(getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]*22.222).toFixed(2)\n\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              Biomass Production: ${biomassProduction} ${intervalType === \"Yearly\" ? \"(kg/ha/year)\" : \"(kg/ha/month)\"\n        }<br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime !==\"\") {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find((item) => item.DISTRICT === name);\n        return DataItem && intervalType ==='Monthly' ? DataItem[selectedDataType][selectedTime]:getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n      return {\n        // fillColor: density ? selectedDensityFunc(density):\"none\",\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n  console.log(SelectedFeaturesStatsData.AETI)\n\n\n  return (\n    <div className=\"dasboard_page_container\">\n      <div className=\"main_dashboard\">\n        <div className=\"left_panel_equal\">\n          \n\n\n          <div className=\"card_container\">\n\n          <div className='defination_container'>\n              <h4>Biomass Production</h4>\n            </div>\n\n          <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.AETI,\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Evapotranspiration (mm/month)\",\n                  marker: { color: 'green' },\n                  yaxis: 'y1',\n                },\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.NPP.map(value => value * 22.222),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Biomass Production (kg/ha/month)\",\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Evapotranspiration (mm/month)\",\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: \"Biomass Production (kg/ha/month)\",\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n\n            \n          </div>\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Water Productivity</h4>\n            </div>\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.NPP.map((value, index) => (value * 22.222 * 0.0001) / (SelectedFeaturesStatsData.AETI[index] * 0.001)),\n                  type: \"bar\",\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: \"Year\",\n                },\n                yaxis: {\n                  title: 'Average Water Productivity (kg/m3)'\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n          </div>\n\n          <div className=\"card_container\" style={{ maxHeight: \"800px\", overflow: \"scroll\" }}>\n            <div className='defination_container'>\n              <h4>Average Biomass Mean Annual</h4>\n            </div>\n            <BiomassProductionChart filteredFeaturesItems={filteredFeaturesItems}/>\n          </div>\n        </div>\n\n        <div className=\"right_panel_equal\">\n          <div className=\"card_container\" style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                backgroundColor: \"white\",\n                border: \"none\",\n                margin: \"auto\",\n              }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[\n                [23, 49],\n                [41, 82],\n              ]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n             <div className=\"map_options_container\">\n            <select\n              className=\"m-1\"\n              value={selectedDataType}\n              onChange={handleSelectedDataChange}\n            >\n              <option value=\"NPP\">Biomass Production</option>\n              {/* <option value=\"AETI\">Evapotranspiration</option> */}\n            </select>\n\n            <select\n              className=\"m-1\"\n              value={intervalType}\n              onChange={handleIntervalTypeChange}\n            >\n              <option value=\"Monthly\">Monthly</option>\n              <option value=\"Yearly\">Yearly</option>\n            </select>\n\n            <select\n              className=\"m-1\"\n              value={selectedTime}\n              onChange={(e) => setSelectedTime(e.target.value)}\n            >\n              {renderTimeOptions(intervalType)}\n            </select>\n\n          </div>\n\n\n              <BaseMap />\n\n\n              {selectedDataType === \"NPP\" && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n              ) : (\n                <GeoJSON\n                  style={{\n                    fillColor: \"black\",\n                    weight: 2,\n                    color: \"black\",\n                    fillOpacity: \"0.001\",\n                    interactive: false,\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n              <FiltererdJsonFeature  />\n\n             \n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BiomassPage;\n","import React, { useEffect } from 'react';\nimport { GeoJSON, Pane, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport {  mapCenter, setInitialMapZoom } from '../helpers/functions';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport AFG_boundary from '../assets/data/shapefiles/AFG_boundary.json';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport AFG_provinces from '../assets/data/shapefiles/AFG_provinces.json';\nimport AFG_watershed from '../assets/data/shapefiles/AFG_watershed.json';\nimport AFG_water_basin from '../assets/data/shapefiles/AFG_water_basin.json';\n\nconst FiltererdJsonFeature = () => {\n    const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n    const map = useMap();\n    const intialZoom=setInitialMapZoom()\n\n\n    const selectedFeatureData = () => {\n        switch (selectedView) {\n            case 'BASIN':\n                return AFG_water_basin.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'WATERSHED':\n                return AFG_watershed.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'PROVINCE':\n                return AFG_provinces.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'DISTRICT':\n                return AFG_districts.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'COUNTRY':\n                return AFG_boundary.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            default:\n                return null;\n        }\n    };\n    const filteredData=selectedFeatureData()\n\n\n\n    useEffect(() => {\n        if (filteredData) {\n            const bounds = L.geoJSON(filteredData.geometry).getBounds();\n            map.flyToBounds(bounds);\n            // map.setView(bounds.getCenter(), intialZoom);\n        }\n        else{\n            map.flyTo(mapCenter,intialZoom);\n        }\n    }, [filteredData, map,intialZoom]);\n\n\n    return (\n        <Pane name=\"selected_features\" style={{ zIndex: 1000 }}>\n        <GeoJSON\n            key={`${selectedFeatureName+selectedView}`}\n            style={{ fillColor: 'none', weight: 4, color: 'yellow', fillOpacity: \"0.4\" }}\n            data={filteredData}\n        />\n        </Pane>\n    );\n};\n\nexport default FiltererdJsonFeature;\n"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_WaterProductivity","Monthly_WaterProductivity","Yearly_ETB","Monthly_ETB","Yearly_ETG","Monthly_ETG","_ref","ColorLegendsDataItem","gradientColors","join","firstColor","lastColor","length","_jsxs","className","children","_jsx","style","borderRight","concat","backgroundImage","borderLeft","filteredFeaturesItems","districtData","map","entry","name","DISTRICT","biomassProduction","calculateAverageOfArray","getAnnualDataFromMonthly","NPP","npp","toFixed","sort","a","b","districtNames","minHeight","Math","max","Chart","options","chart","type","stacked","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","dataLabels","xaxis","categories","title","text","offsetX","yaxis","offsetY","tooltip","y","formatter","val","responsive","breakpoint","legend","position","series","data","width","height","BiomassPage","intervalType","setIntervalType","useState","selectedTime","setSelectedTime","selectedDataType","setSelectedDataType","selectedView","selectedFeatureName","useSelectedFeatureContext","SelectedFeaturesStatsData","SelectedFeaturesAverageStats","console","log","AETI","Plot","x","MonthsArray","mode","marker","color","value","layout","side","showgrid","yaxis2","overlaying","orientation","index","maxHeight","overflow","BiomassProductionChart","MapContainer","fullscreenControl","center","backgroundColor","border","margin","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","onChange","e","target","renderTimeOptions","BaseMap","_Fragment","MapLegend","GeoJSON","feature","density","DataItem","DistrictStats","find","item","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","opacity","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature","useMap","intialZoom","filteredData","selectedFeatureData","AFG_water_basin","AFG_watershed","AFG_provinces","AFG_boundary","useEffect","bounds","L","geometry","getBounds","flyToBounds","flyTo","mapCenter","Pane","zIndex"],"sourceRoot":""}
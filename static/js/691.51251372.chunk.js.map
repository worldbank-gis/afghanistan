{"version":3,"file":"static/js/691.51251372.chunk.js","mappings":"0jwFAoBA,MA6PA,EA7P2BA,KACzB,MAAOC,EAAkBC,IAAuBC,EAAAA,EAAAA,UAAS,aAClDC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,WAC1CG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,QAE3CK,EAAqBF,GAAgBA,EAAaG,MAAM,KAAK,GAEnE,IAAIC,EACqB,YAArBT,EACFS,EAAkBC,EACY,aAArBV,IACTS,EAAkBE,GAEpB,MAAMC,EAAuBC,EAAAA,EAAiB,GAADC,OAAIX,EAAY,KAAAW,OAAId,IAsBjE,MAkDIe,EAAc,IANGC,EAA4BC,MAAM,EAAE,IAQzD,CACE,SAAY,cACZ,IAPuBD,EAA4BC,MAAM,IAAIC,QAAO,CAACC,EAAKC,IAASD,EAAMC,EAAKC,KAAK,KAkBrG,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBC,UACtCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAG/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAE7BC,EAAAA,EAAAA,MAAA,UAAQF,UAAU,MAAMG,MAAO1B,EAAkB2B,SAAWC,GAAM3B,EAAoB2B,EAAEC,OAAOH,OAAOF,SAAA,EACpGF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,UAASF,SAAC,aACxBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,WAAUF,SAAC,iBAG3BF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,MAAMG,MAAOvB,EAAcwB,SAAWC,GAAMxB,EAAgBwB,EAAEC,OAAOH,OAAOF,UAE5FF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,eAIzBF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,MAAMG,MAAOrB,EAAcsB,SAAWC,GAAMtB,EAAgBsB,EAAEC,OAAOH,OAAOF,UAC3FM,EAAAA,EAAAA,IAAkB3B,SAIvBmB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAE7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,qBACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,6fAKPC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAiBQ,MAAO,CAACC,SAAS,UAAUR,SAAA,EACzDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,UACnCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,gDAGNF,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CACHC,KAAM,CACJ,CACEC,EAAGpB,EAAYqB,KAAKC,GAAUA,EAAMC,WACpCC,EAAGxB,EAAYqB,KAAKC,GAAWA,EAAMhB,IAAQ,MAC7CmB,KAAM,MACNC,YAAa,MAGjBC,OAAQ,CACNC,MAAO,CACLC,MAAO,YACPC,UAAW,YAEbC,MAAO,CACLF,MAAM,4CAERG,OAAQ,CACNC,EAAG,MAGPjB,MAAO,CAAEkB,MAAO,OAAQC,OAAQ,cAKpCzB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,0DAAwDjB,QAE9De,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,MAAA,SAAOF,UAAU,aAAYC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,SAAAE,UACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,cACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,+BACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,gCACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,uCACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,6CAGRF,EAAAA,EAAAA,KAAA,SAAAE,SA1HLd,EAAe0B,KAAI,CAACe,EAAcC,KACvC,MAAMC,EAAYF,EAAa5C,GACzB+C,EAAa3C,EAAeyC,GAAO7C,GACnCgD,EAAOC,EAAiBJ,GAAa,KAC3C,YAAkBK,IAAdJ,QAA0CI,IAAfH,GAE3B7B,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAK2B,EAAaO,QAClBpC,EAAAA,EAAAA,KAAA,MAAAE,SAAK6B,EAAUM,QAAQ,MACvBrC,EAAAA,EAAAA,KAAA,MAAAE,SAAK8B,EAAWK,QAAQ,MACxBrC,EAAAA,EAAAA,KAAA,MAAAE,UAAgB,KAAV6B,EAAgBE,EAAK,KAASI,QAAQ,MAC5CrC,EAAAA,EAAAA,KAAA,MAAAE,UAAiB,KAAX8B,EAAiBC,EAAK,KAASI,QAAQ,OALtCP,GASJ,IACT,kBAwHE9B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAiBQ,MAAO,CAAEmB,OAAQ,QAAS1B,UACxDC,EAAAA,EAAAA,MAACmC,EAAAA,EAAY,CACXC,mBAAmB,EACnBC,OAAQ,CAAC,GAAI,IACb/B,MAAO,CAAEkB,MAAO,OAAQC,OAAQ,OAAQa,gBAAiB,QAASC,OAAQ,OAAQjB,OAAQ,QAC1FkB,MAAMC,EAAAA,EAAAA,MACNC,UAAW,CAAC,CAAC,GAAI,IAAK,CAAC,GAAI,KAC3BC,SAASF,EAAAA,EAAAA,MACTG,UAAU,EACVC,UAAUC,EAAAA,EAAAA,MAGVC,iBAAiB,EAAMhD,SAAA,EAEvBF,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,IAITzE,GAAqC,KAAjBK,GAAuBF,GAC1CsB,EAAAA,EAAAA,MAAAiD,EAAAA,SAAA,CAAAlD,SAAA,CACGZ,IACCU,EAAAA,EAAAA,KAACqD,EAAAA,EAAS,CAAC/D,qBAAsBA,KAGnCU,EAAAA,EAAAA,KAACsD,EAAAA,EAAO,CAEN7C,MAzLK8C,IACrB,GAAIxE,GAAgBI,EAAiB,CACnC,MAKMqE,EALsBC,KAC1B,MAAMC,EAAWvE,EAAgBwE,MAAKC,GAAQA,EAAKxB,OAASqB,EAAKI,aACjE,OAAOH,EAAWA,EAAS3E,GAAgB,IAAI,EAGjC+E,CAAmBP,EAAQQ,WAAW3B,MACtD,MAAQ,CACN4B,UAAW1E,GAAuB2E,EAAAA,EAAAA,IAAiB3E,EAAsBkE,GAAW,OACpFU,OAAQ,EACRC,QAAS,EACTC,MAAO,QACPC,UAAW,IACXC,YAAa,EAGjB,GAyKgB1D,KAAM2D,EAAcC,SACpBC,cA9MlB,SAA+BlB,EAASmB,GACtCA,EAAMC,GAAG,aAAa,SAAUrE,GAC9B,MAAMoD,EAAWvE,EAAgBwE,MAAKC,GAAQA,EAAKxB,OAASmB,EAAQQ,WAAW3B,OACzEwC,EAAY,4CAAApF,OAEA+D,EAAQQ,WAAW3B,KAAI,uBAAA5C,OACZ,aAArBd,EAAkC,WAAkC,YAArBA,EAAiC,UAAY,KAAI,MAAAc,OAA0B,iBAArBd,EAAsC,GAAE,IAAAc,OAAwB,WAAjBX,EAA4B,UAAY,WAAU,KAAG,MAAAW,OAAKkE,EAAS3E,GAAcsD,QAAQ,GAAE,gCAGvPqC,EAAMG,YAAYD,EAAc,CAAEE,QAAQ,IAC1CJ,EAAMK,aACR,IAEAL,EAAMC,GAAG,YAAY,WACnBD,EAAMM,cACR,GACF,GA2LuBtG,EAAmBK,EAAeF,OAQ3CmB,EAAAA,EAAAA,KAACsD,EAAAA,EAAO,CACN7C,MAAO,CACLuD,UAAW,QACXE,OAAQ,EACRE,MAAO,QACPE,YAAa,QACbW,aAAa,GAEfrE,KAAMsE,EAAAA,YAQVlF,EAAAA,EAAAA,KAACmF,EAAAA,EAAO,eAMZ,C","sources":["pages/WaterFootprintPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport { fillDensityColor, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Zonal_Stat_ETB from \"../assets/data/Zonal_Stat_ETB_Annual.json\"\nimport Zonal_stat_ETG from \"../assets/data/Zonal_stat_ETG_Annual.json\"\nimport MapLegend from '../components/MapLegend';\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport DistrictAreaData from \"../assets/data/DistrictAreaData.json\"\nimport cropSpecificWaterFootprints from \"../assets/data/cropSpecificWaterFootprints.json\"\nimport Plot from 'react-plotly.js';\n\n\nconst WaterFootprintPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('ET_Green');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState('2023');\n\n  const YearOfSelectedTime = selectedTime && selectedTime.split('-')[0];\n\n  let selectedDataset;\n  if (selectedDataType === 'ET_Blue') {\n    selectedDataset = Zonal_Stat_ETB;\n  } else if (selectedDataType === 'ET_Green') {\n    selectedDataset = Zonal_stat_ETG;\n  }\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on('mouseover', function (e) {\n      const DataItem = selectedDataset.find(item => item.NAME === feature.properties.NAME);\n      const popupContent = `\n          <div>\n            District: ${feature.properties.NAME}<br/>\n            ${selectedDataType === 'ET_Green' ? 'ET Green' : selectedDataType === 'ET_Blue' ? 'ET Blue' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${DataItem[selectedTime].toFixed(2)}\n          </div>\n        `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on('mouseout', function () {\n      layer.closeTooltip();\n    });\n  }\n\n\n  const DistrictStyle = (feature => {\n    if (selectedTime && selectedDataset) {\n      const getDensityFromData = (name) => {\n        const DataItem = selectedDataset.find(item => item.NAME === name.toString());\n        return DataItem ? DataItem[selectedTime] : null;\n      };\n\n      const density = getDensityFromData(feature.properties.NAME);\n      return ({\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: 'black',\n        dashArray: '2',\n        fillOpacity: 1\n      });\n\n    }\n\n  });\n\n  const renderTableRows = () => {\n    return Zonal_Stat_ETB.map((districtData, index) => {\n      const blueValue = districtData[YearOfSelectedTime];\n      const greenValue = Zonal_stat_ETG[index][YearOfSelectedTime];\n      const Area = DistrictAreaData[index]['AREA']\n      if (blueValue !== undefined && greenValue !== undefined) {\n        return (\n          <tr key={index}>\n            <td>{districtData.NAME}</td>\n            <td>{blueValue.toFixed(2)}</td>\n            <td>{greenValue.toFixed(2)}</td>\n            <td>{(blueValue*0.001*Area/1000000).toFixed(2)}</td>\n            <td>{(greenValue*0.001*Area/1000000).toFixed(2)}</td>\n          </tr>\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n\n\n  // Get the first three entries\nconst topCropEntries = cropSpecificWaterFootprints.slice(0,10);\n\n// Get the sum of the remaining entries\nconst restCropEntriesSum = cropSpecificWaterFootprints.slice(10).reduce((acc, curr) => acc + curr.WFP, 0);\n\n// Combine the first three entries and the sum into a new array\nconst newCropData = [\n  ...topCropEntries,\n  {\n    \"CropName\": \"Other Crops\",\n    \"WFP\": restCropEntriesSum\n  }\n];\n\n\n\n\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n          <div className='card_container'>\n\n            <select className='m-1' value={selectedDataType} onChange={(e) => setSelectedDataType(e.target.value)}>\n              <option value=\"ET_Blue\">ET Blue</option>\n              <option value=\"ET_Green\">ET Green</option>\n            </select>\n\n            <select className='m-1' value={intervalType} onChange={(e) => setIntervalType(e.target.value)}>\n              {/* <option value=\"Monthly\"> Monthly</option> */}\n              <option value=\"Yearly\"> Yearly</option>\n            </select>\n\n\n            <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n              {renderTimeOptions(intervalType)}\n            </select>\n\n          </div>\n          <div className='card_container'>\n\n            <div className='defination_container'>\n              <h4>Water Footprint</h4>\n              <p>Water footprint refers to the total volume of water used in the production process of goods or services, including both direct water use (e.g., irrigation, processing water) and indirect water use (e.g., water embedded in inputs like raw materials and energy). In this section we also present Blue and Green ET. The Green water represents the fraction of precipitation that infiltrates into the soil and is available to plants; while blue water comprising runoff, groundwater, and stream base flow.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"card_container\" style={{overflow:\"scroll\"}}>\n            <div className='defination_container'>\n              <h4>Crop Specific water footprint (BCM/year)</h4>\n            </div>\n\n            <Plot\n              data={[\n                {\n                  y: newCropData.map((entry) => entry.CropName),\n                  x: newCropData.map((entry) => (entry.WFP ) / 1000000000),\n                  type: \"bar\",\n                  orientation: 'h',\n                },\n              ]}\n              layout={{\n                yaxis: {\n                  title: \"Crop Type\",\n                  autorange: \"reversed\",\n                },\n                xaxis: {\n                  title: `Crop Specific water footprint (BCM/year)`\n                },\n                margin: {\n                  l: 220, \n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n          </div>\n\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Average anuual Green and Blue ET by districts for year {YearOfSelectedTime}</h4>\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>District</th>\n                    <th>Average ET Blue (mm/year)</th>\n                    <th>Average ET Green (mm/year)</th>\n                    <th>Average ET Blue Volume (MCM/year)</th>\n                    <th>Average ET Green Volume (MCM/year)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {renderTableRows()}\n                </tbody>\n\n              </table>\n            </div>\n          </div>\n\n\n\n\n\n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <SearchBar />\n\n\n\n              {selectedDataType && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n\n              ) : (\n                <GeoJSON\n                  style={{\n                    fillColor: 'black',\n                    weight: 2,\n                    color: 'black',\n                    fillOpacity: \"0.001\",\n                    interactive: false\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WaterFootprintPage"],"names":["WaterFootprintPage","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","YearOfSelectedTime","split","selectedDataset","Zonal_Stat_ETB","Zonal_stat_ETG","ColorLegendsDataItem","ColorLegendsData","concat","newCropData","cropSpecificWaterFootprints","slice","reduce","acc","curr","WFP","_jsx","className","children","_jsxs","value","onChange","e","target","renderTimeOptions","style","overflow","Plot","data","y","map","entry","CropName","x","type","orientation","layout","yaxis","title","autorange","xaxis","margin","l","width","height","districtData","index","blueValue","greenValue","Area","DistrictAreaData","undefined","NAME","toFixed","MapContainer","fullscreenControl","center","backgroundColor","border","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","SearchBar","_Fragment","MapLegend","GeoJSON","feature","density","name","DataItem","find","item","toString","getDensityFromData","properties","fillColor","fillDensityColor","weight","opacity","color","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","BaseMap"],"sourceRoot":""}
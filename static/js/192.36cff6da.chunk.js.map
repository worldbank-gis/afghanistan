{"version":3,"file":"static/js/192.36cff6da.chunk.js","mappings":"8GAAO,MAAMA,EAAmB,CAC5BC,WAAW,CACPC,MAAO,gBACPC,KAAM,YACNC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,MACVC,SAAU,MAEdC,YAAY,CACRN,MAAO,gBACPC,KAAM,aACNC,MAAO,CAAC,GAAI,GAAI,EAAG,GACnBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,KACVC,SAAU,KAGdE,YAAY,CACRP,MAAO,0BACPC,KAAM,YACNC,MAAO,CAAC,IAAK,IAAK,GAAI,IACtBC,OAAQ,CAAC,UAAU,UAAW,UAAW,UAAW,WACpDC,SAAU,MACVC,SAAU,MAEdG,aAAa,CACTR,MAAO,0BACPC,KAAM,aACNC,MAAO,CAAC,GAAI,EAAG,EAAG,GAClBC,OAAQ,CAAC,UAAU,UAAW,UAAW,UAAW,WACpDC,SAAU,KACVC,SAAU,KAGdI,WAAW,CACPT,MAAO,eACPC,KAAM,YACNC,MAAO,CAAC,KAAM,KAAM,KAAM,KAC1BC,OAAQ,CAAC,UAAU,UAAW,UAAW,UAAW,WACpDC,SAAU,OACVC,SAAU,OAEdK,YAAY,CACRV,MAAO,eACPC,KAAM,aACNC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,CAAC,UAAU,UAAW,UAAW,UAAW,WACpDC,SAAU,MACVC,SAAU,MAEdM,oBAAoB,CAChBX,MAAO,gBACPC,KAAM,GACNC,MAAO,CAAC,GAAI,GAAI,GAAI,IACpBC,OAAQ,CAAC,UAAW,UAAW,UAAU,UAAW,WACpDC,SAAU,KACVC,SAAU,MAEdO,qBAAqB,CACjBZ,MAAO,gBACPC,KAAM,GACNC,MAAO,CAAC,GAAI,GAAI,EAAG,IACnBC,OAAQ,CAAC,UAAW,UAAW,UAAU,UAAW,WACpDC,SAAU,KACVC,SAAU,OAGdQ,WAAW,CACPb,MAAO,6BACPC,KAAM,eACNC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,CAAC,UAAU,UAAY,UAAU,UAAW,WACpDC,SAAU,OACVC,SAAU,OAEdS,YAAY,CACRd,MAAO,6BACPC,KAAM,gBACNC,MAAO,CAAC,EAAG,EAAG,EAAG,IACjBC,OAAQ,CAAC,UAAU,UAAY,UAAU,UAAW,WACpDC,SAAU,MACVC,SAAU,MAEdU,yBAAyB,CACrBf,MAAO,6BACPC,KAAM,GACNC,MAAO,CAAC,EAAG,GAAK,GAAK,KACrBC,OAAQ,CAAC,UAAW,UAAW,UAAW,WAC1CC,SAAU,IACVC,SAAU,QAEdW,0BAA0B,CACtBhB,MAAO,6BACPC,KAAM,GACNC,MAAO,CAAC,EAAG,GAAK,GAAK,KACrBC,OAAQ,CAAC,UAAW,UAAW,UAAW,WAC1CC,SAAU,IACVC,SAAU,QAIdY,WAAW,CACPjB,MAAO,UACPC,KAAM,YACNC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,MACVC,SAAU,MAEda,YAAY,CACRlB,MAAO,UACPC,KAAM,aACNC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,MACVC,SAAU,MAEdc,WAAW,CACPnB,MAAO,WACPC,KAAM,YACNC,MAAO,CAAC,IAAK,IAAK,GAAI,IACtBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,MACVC,SAAU,MAEde,YAAY,CACRpB,MAAO,WACPC,KAAM,aACNC,MAAO,CAAC,IAAK,IAAK,GAAI,IACtBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,MACVC,SAAU,M,sDClIlB,MA2BA,EA3BkBgB,IAA+B,IAA9B,qBAAEC,GAAsBD,EACvC,MAAM,MAAErB,EAAK,KAAEC,EAAI,MAAEC,EAAK,OAAEC,EAAM,SAAEC,EAAQ,SAAEC,GAAaiB,EACrDC,EAAiBpB,EAAOqB,KAAK,MAC7BC,EAAatB,EAAO,GACpBuB,EAAYvB,EAAOA,EAAOwB,OAAS,GAEzC,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC3BF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CACK9B,EAAO,IACPC,QAGT2B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAoBG,MAAO,CAACC,YAAY,cAADC,OAAgBR,OAClEK,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAeG,MAAO,CAAEG,gBAAgB,4BAADD,OAA8BX,EAAc,SAClGQ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAqBG,MAAO,CAACI,WAAW,cAADF,OAAgBT,UAE1EG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,mBAAkBC,SAAEzB,KACjCuB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,mBAAkBC,SAAA,CAAC,IAAE1B,UAEpC,C,oOCrBd,MAmFA,EAnF8BiB,IAAgC,IAA/B,sBAAEgB,GAAuBhB,EAGpD,MAAMiB,EAAeD,EAAsBE,KAAKC,IAC5C,MAAMC,GAAgF,MAA5DC,EAAAA,EAAAA,KAAoBC,EAAAA,EAAAA,IAAyBH,EAAMI,OAAiBJ,EAAMK,KAAO,KAAYC,QAAQ,GAC/H,MAAO,CAAEC,SAAUP,EAAMQ,SAAUP,mBAAkB,IAEzDH,EAAaW,MAAK,CAACC,EAAGC,IAAMA,EAAEV,iBAAmBS,EAAET,mBAEnD,MAAMW,EAAgBd,EAAaC,KAAKc,GAASA,EAAKN,WAChDO,EAAoBhB,EAAaC,KAAKc,GAASA,EAAKZ,mBAIpDc,EAAYC,KAAKC,IADM,GACqBL,EAAczB,OAAQ,KAGxE,OACII,EAAAA,EAAAA,KAAC2B,EAAAA,EAAK,CACFC,QAAS,CACLC,MAAO,CACHC,KAAM,MACNC,SAAS,EACTC,QAAS,CACLC,MAAM,GAEVC,KAAM,CACFC,SAAS,IAGjBC,YAAa,CACTC,IAAK,CACDC,YAAY,IAGpBC,WAAY,CACRJ,SAAS,GAEbK,MAAO,CACHC,WAAYpB,EACZqB,MAAO,CACHC,KAAM,0BACNC,QAAS,KAGjBC,MAAO,CACHH,MAAO,CACHC,KAAM,gBACNG,QAAS,KAKjBC,QAAS,CACLC,EAAG,CACCC,UAAW,SAAUC,GACjB,MAAM,GAAN/C,OAAU+C,EAAG,OACjB,IAGRC,WAAY,CAAC,CACTC,WAAY,IACZxB,QAAS,CACLyB,OAAQ,CACJC,SAAU,SACVV,SAAU,GACVE,QAAS,OAKzBS,OAAQ,CAAC,CACLjC,KAAMC,IAEVO,KAAK,MACL0B,MAAM,OAENC,OAAQjC,EAAY,MACtB,ECUV,EAxF6BlC,IAAgC,IAA/B,sBAAEgB,GAAuBhB,EAEnD,MAAMiB,EAAeD,EAAsBE,KAAKC,IAAK,CACjDiD,KAAMjD,EAAMQ,SACZ0C,kBAAkBC,EAAAA,EAAAA,IAAyBnD,EAAMI,KAAKL,KAAKqD,GAAgB,GAAPA,KAAa9C,QAAQ,OAG7FR,EAAaW,MAAK,CAACC,EAAGC,IAAMA,EAAEuC,iBAAmBxC,EAAEwC,mBAGnD,MAAMtC,EAAgBd,EAAaC,KAAKC,GAAUA,EAAMiD,OAClDC,EAAmBpD,EAAaC,KAAKC,GAAUA,EAAMkD,mBAOrDnC,EAAYC,KAAKC,IADK,GACsBL,EAAczB,OAAQ,KAIxE,OACII,EAAAA,EAAAA,KAAC2B,EAAAA,EAAK,CACFC,QAAS,CACLC,MAAO,CACHC,KAAM,MACNC,SAAS,EACTC,QAAS,CACLC,MAAM,GAEVC,KAAM,CACFC,SAAS,IAGjBC,YAAa,CACTC,IAAK,CACDC,YAAY,IAGpBC,WAAY,CACRJ,SAAS,GAEbK,MAAO,CACHC,WAAYpB,EACZqB,MAAO,CACHC,KAAM,2BACNC,QAAS,KAGjBC,MAAO,CACHH,MAAO,CACHC,KAAM,gBACNG,QAAS,KAKjBC,QAAS,CACLC,EAAG,CACCC,UAAW,SAAUC,GACjB,MAAM,GAAN/C,OAAU+C,EAAG,WACjB,IAGRC,WAAY,CAAC,CACTC,WAAY,IACZxB,QAAS,CACLyB,OAAQ,CACJC,SAAU,SACVV,SAAU,GACVE,QAAS,OAKzBS,OAAQ,CAAC,CACLjC,KAAMqC,IAEV7B,KAAK,MACL0B,MAAM,OAENC,OAAQjC,EAAY,MACtB,E,cCjEV,MAiSA,EAjS+BsC,KAC7B,MAAOC,EAAkBC,IAAuBC,EAAAA,EAAAA,UAAS,SAClDC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,WAC1CG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,IAC3C,sBAAE3D,EAAqB,aAAEgE,EAAY,oBAAEC,IAAwBC,EAAAA,EAAAA,KAC/DC,GAA4BC,EAAAA,EAAAA,IAA6BpE,GAGzDf,EAAuBxB,EAAAA,EAAiB,GAADoC,OAAI+D,EAAY,KAAA/D,OAAI4D,IAqD7BzD,EAAsBY,MAAK,CAACC,EAAGC,KACjE,MAAMuD,EAAkE,MAA5Df,EAAAA,EAAAA,KAAwBhD,EAAAA,EAAAA,IAAyBO,EAAEN,OAAiBM,EAAEL,KAAQ,IAE1F,MADwE,MAA5D8C,EAAAA,EAAAA,KAAwBhD,EAAAA,EAAAA,IAAyBQ,EAAEP,OAAiBO,EAAEN,KAAQ,IAC9E6D,CAAE,IAjChB,MAwCMC,EAAkB,CACtBC,KAAMC,EAAAA,GACNtG,aAAaoC,EAAAA,EAAAA,IAAyB6D,EAA0B5D,MAChE7C,YAAY4C,EAAAA,EAAAA,IAAyB6D,EAA0BM,KAC/DrG,YAAYkC,EAAAA,EAAAA,IAAyB6D,EAA0BO,KAC/D9F,WAAYuF,EAA0BQ,IACtC7F,WAAYqF,EAA0BS,KAMxC,OACElF,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAAyBC,UACtCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAG/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACjCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2CAINC,EAAAA,EAAAA,KAACmF,EAAAA,EAAI,CACH7D,KAAM,CACJ,CACE8D,EAAGC,EAAAA,GACHrC,EAAGyB,EAA0B5D,KAC7ByE,KAAM,UACNxD,KAAM,UACN4B,KAAM,gCACNb,MAAO,MAET,CACEuC,EAAGC,EAAAA,GAEHrC,EAAGyB,EAA0BO,IAAIxE,KAAI+E,GAASA,EAAQ,KACtDzD,KAAM,UACN0D,KAAM,gBACN9B,KAAM,0BACN+B,OAAQ,CAAEC,MAAO,OACjB7C,MAAO,OAGX8C,OAAQ,CACNnD,MAAO,CACLE,MAAO,QAETG,MAAO,CACLH,MAAO,gCACPkD,KAAM,OACNC,UAAU,GAEZC,OAAQ,CACNpD,MAAO,0BACPkD,KAAM,QACNG,WAAY,IACZF,UAAU,GAEZxC,OAAQ,CACN2C,YAAa,IACbZ,EAAG,EACHpC,EAAG,MAIP/C,MAAO,CAAEuD,MAAO,OAAQC,OAAQ,eAIpCzD,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAI7BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,aAAYC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yCACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oCACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8CAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACG6E,EAAgBC,KAAKrE,KAAI,CAACyF,EAAMC,KAC/BrG,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKkG,KACLjG,EAAAA,EAAAA,KAAA,MAAAD,UAA2C,KAArC6E,EAAgBpG,YAAY0H,GAAiBzB,EAA0B3D,KAAO,KAAYC,QAAQ,MACxGf,EAAAA,EAAAA,KAAA,MAAAD,UAA0C,KAApC6E,EAAgB1F,WAAWgH,GAAiBzB,EAA0B3D,KAAO,KAAYC,QAAQ,MACvGf,EAAAA,EAAAA,KAAA,MAAAD,UAA0C,KAApC6E,EAAgBxF,WAAW8G,GAAiBzB,EAA0B3D,KAAO,KAAYC,QAAQ,MACvGf,EAAAA,EAAAA,KAAA,MAAAD,UAA0C,KAApC6E,EAAgB5G,WAAWkI,GAAiBzB,EAA0B3D,KAAO,KAAYC,QAAQ,MACvGf,EAAAA,EAAAA,KAAA,MAAIF,UAAW8E,EAAgB5G,WAAWkI,GAAStB,EAAgBpG,YAAY0H,GAAS,EAAI,WAAa,GAAGnG,UAC7B,MAA1E6E,EAAgB5G,WAAWkI,GAAStB,EAAgBpG,YAAY0H,IAAkBzB,EAA0B3D,KAAO,KAAYC,QAAQ,MAG5If,EAAAA,EAAAA,KAAA,MAAAD,UAA2C,IAArC6E,EAAgBpG,YAAY0H,GAAetB,EAAgB5G,WAAWkI,IAAQnF,QAAQ,OAVrFmF,eAkBnBrG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAiBG,MAAO,CAAEkG,UAAW,QAASC,SAAU,UAAWrG,SAAA,EAEhFC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+BAGNC,EAAAA,EAAAA,KAACqG,EAAkB,CAAC/F,sBAAuBA,QAG7CT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAiBG,MAAO,CAAEkG,UAAW,QAASC,SAAU,UAAWrG,SAAA,EAEhFC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACrCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,uBAAmBC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,MAAO,aAGnCC,EAAAA,EAAAA,KAACsG,EAAoB,CAAChG,sBAAuBA,WAMjDN,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,UAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAiBG,MAAO,CAAEwD,OAAQ,QAAS1D,UACxDF,EAAAA,EAAAA,MAAC0G,EAAAA,EAAY,CACXC,mBAAmB,EACnBC,OAAQ,CAAC,GAAI,IACbxG,MAAO,CAAEuD,MAAO,OAAQC,OAAQ,OAAQiD,gBAAiB,QAASC,OAAQ,OAAQC,OAAQ,QAC1F1E,MAAM2E,EAAAA,EAAAA,MACNC,UAAW,CAAC,CAAC,GAAI,IAAK,CAAC,GAAI,KAE3BC,SAASF,EAAAA,EAAAA,MACTG,UAAU,EACVC,UAAUC,EAAAA,EAAAA,MAGVC,iBAAiB,EAAMpH,SAAA,EAGvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAEpCC,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,UAAQC,UAAU,MAAMyF,MAAOxB,EAAkBqD,SAzK/BC,IAChCrD,EAAoBqD,EAAEC,OAAO/B,MAAM,EAwK+DxF,SAAA,EAClFC,EAAAA,EAAAA,KAAA,UAAQuF,MAAM,OAAMxF,SAAC,wBACrBC,EAAAA,EAAAA,KAAA,UAAQuF,MAAM,MAAKxF,SAAC,uBAIxBC,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,UAAQC,UAAU,MAAMyF,MAAOrB,EAAckD,SA5K3BC,IAChClD,EAAgBkD,EAAEC,OAAO/B,OACzBlB,EAAgB,GAAG,EA0K2EtE,SAAA,EAC9EC,EAAAA,EAAAA,KAAA,UAAQuF,MAAM,UAASxF,SAAC,aACxBC,EAAAA,EAAAA,KAAA,UAAQuF,MAAM,SAAQxF,SAAC,iBAI3BC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,MAAMyF,MAAOnB,EAAcgD,SAAWC,GAAMhD,EAAgBgD,EAAEC,OAAO/B,OAAOxF,UAC3FwH,EAAAA,EAAAA,IAAkBrD,UAWxBH,GAAqC,KAAjBK,GAAuBF,GAC1CrE,EAAAA,EAAAA,MAAA2H,EAAAA,SAAA,CAAAzH,SAAA,CACGR,IACCS,EAAAA,EAAAA,KAACyH,EAAAA,EAAS,CAAClI,qBAAsBA,KAGnCS,EAAAA,EAAAA,KAAC0H,EAAAA,EAAO,CAENzH,MA/NK0H,IACrB,GAAIvD,GAAiBL,EAAkB,CACrC,MAIM6D,EAJsBlE,KAC1B,MAAMmE,EAAWC,EAAcC,MAAMC,GAASA,EAAK/G,WAAayC,IAChE,OAAOmE,GAA4B,YAAhB3D,EAA4B2D,EAAS9D,GAAkBK,IAAcxD,EAAAA,EAAAA,IAAyBiH,EAAS9D,IAAmBK,EAAa,EAE5I6D,CAAmBN,EAAQO,WAAWC,MAEtD,MAAO,CAELC,UAAW7I,GAAuB8I,EAAAA,EAAAA,IAAiB9I,EAAsBqI,GAAW,OACpFU,OAAQ,EACRC,QAAS,EACT7C,MAAO,QACP8C,UAAW,IACXC,YAAa,EAEjB,GA+MgBnH,KAAMoH,EAAcC,SACpBC,cArPlB,SAA+BjB,EAASkB,GACtCA,EAAMC,GAAG,aAAa,SAAUzB,GAC9B,MAAMQ,EAAWC,EAAcC,MAC5BC,GAASA,EAAK/G,WAAa0G,EAAQO,WAAWC,OAE3CY,EAAY,gDAAA5I,OAEEwH,EAAQO,WAAWC,KAAI,yBAAAhI,OACZ,QAArB4D,EAA6B,gBAAuC,SAArBA,EAA8B,qBAA4C,QAArBA,EAA6B,eAAsC,iBAArBA,EAAsC,gBAAkB,KAAI,MAAA5D,OAA0B,iBAArB4D,EAAsC,GAAE,IAAA5D,OAAwB,WAAjB+D,EAA4B,UAAY,WAAU,KAAG,MAAA/D,OAAqB,YAAhB+D,EAA4B2D,EAAS9D,GAAkBK,IAAcxD,EAAAA,EAAAA,IAAyBiH,EAAS9D,IAAmBK,GAAa,oCAG7cyE,EAAMG,YAAYD,EAAc,CAAEE,QAAQ,IAC1CJ,EAAMK,aACR,IAEAL,EAAMC,GAAG,YAAY,WACnBD,EAAMM,cACR,GACF,GAgOuBpF,EAAmBK,EAAeF,OAS3ClE,EAAAA,EAAAA,KAAC0H,EAAAA,EAAO,CACNzH,MAAO,CACLmI,UAAW,QACXE,OAAQ,EACR5C,MAAO,QACP+C,YAAa,QACbW,aAAa,GAEf9H,KAAM+H,EAAAA,YAKVrJ,EAAAA,EAAAA,KAACsJ,EAAAA,EAAoB,KAIrBtJ,EAAAA,EAAAA,KAACuJ,EAAAA,EAAO,eAMZ,C,sKCxSV,MAiDA,EAjD6BD,KACzB,MAAM,aAAEhF,EAAY,oBAAEC,IAAwBC,EAAAA,EAAAA,KACxChE,GAAMgJ,EAAAA,EAAAA,MACNC,GAAW5C,EAAAA,EAAAA,MAmBX6C,EAhBsBC,MACxB,OAAQrF,GACJ,IAAK,QACD,OAAOsF,EAAAA,SAAyB7B,MAAKJ,GAAWA,EAAQO,WAAWC,OAAS5D,IAChF,IAAK,YACD,OAAOsF,EAAAA,SAAuB9B,MAAKJ,GAAWA,EAAQO,WAAWC,OAAS5D,IAC9E,IAAK,WACD,OAAOuF,EAAAA,SAAuB/B,MAAKJ,GAAWA,EAAQO,WAAWC,OAAS5D,IAC9E,IAAK,WACD,OAAOmE,EAAAA,SAAuBX,MAAKJ,GAAWA,EAAQO,WAAWC,OAAS5D,IAC9E,IAAK,UACD,OAAOwF,EAAAA,SAAsBhC,MAAKJ,GAAWA,EAAQO,WAAWC,OAAS5D,IAC7E,QACI,OAAO,KACf,EAEeoF,GAgBnB,OAZAK,EAAAA,EAAAA,YAAU,KACN,GAAIN,EAAc,CACd,MAAMO,EAASC,EAAAA,QAAUR,EAAaS,UAAUC,YAChD5J,EAAI6J,YAAYJ,EAEpB,MAEIzJ,EAAI8J,MAAMC,EAAAA,GAAUd,EACxB,GACD,CAACC,EAAclJ,EAAIiJ,KAIlBzJ,EAAAA,EAAAA,KAACwK,EAAAA,EAAI,CAAC9G,KAAK,oBAAoBzD,MAAO,CAAEwK,OAAQ,KAAO1K,UACvDC,EAAAA,EAAAA,KAAC0H,EAAAA,EAAO,CAEJzH,MAAO,CAAEmI,UAAW,OAAQE,OAAQ,EAAG5C,MAAO,SAAU+C,YAAa,OACrEnH,KAAMoI,GAAa,GAAAvJ,OAFXoE,EAAoBD,KAIzB,C","sources":["assets/data/ColorLegendsData.js","components/MapLegend.js","components/charts/TotalConsumptionChart.js","components/charts/UnitConsumptionChart.js","pages/EvapotranspirationPage.js","pages/FiltererdJsonFeature.js"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [350, 230, 150, 80],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"350\",\n        MinValue: \"80\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [15, 10, 5, 1],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"15\",\n        MinValue: \"1\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 20],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [1800, 1500, 1200, 800],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"1800\",\n        MinValue: \"800\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [280, 200, 150, 50],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"280\",\n        MinValue: \"50\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [80, 50, 20, 10],\n        Colors: [\"#802101\", \"#f24207\", \"#fca132\",\"#fcd432\", \"#eff24b\"],\n        MaxValue: \"80\",\n        MinValue: \"10\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [15, 10, 5, 0.2],\n        Colors: [\"#802101\", \"#f24207\", \"#fca132\",\"#fcd432\", \"#eff24b\"],\n        MaxValue: \"15\",\n        MinValue: \"0.2\",\n    },\n    // NPP*22022\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [360, 300, 200, 13],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"8000\",\n        MinValue: \"300\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [9, 6, 2, 0.4],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"200\",\n        MinValue: \"10\",\n    },\n    Yearly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n    Monthly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n\n\n    Yearly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Yearly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n","import React from 'react';\n\nconst MapLegend = ({ ColorLegendsDataItem }) => {\n    const { Title, Unit, Value, Colors, MaxValue, MinValue } = ColorLegendsDataItem;\n    const gradientColors = Colors.join(', ');\n    const firstColor = Colors[0];\n    const lastColor = Colors[Colors.length - 1];\n\n    return (\n        <div className=\"legend_container\">\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n            <div className=\"legend-color-container\">\n            <div className='legend_left_arrow' style={{borderRight: `25px solid ${lastColor}`}}></div>\n                <div className='legend-color' style={{ backgroundImage: `linear-gradient(to left, ${gradientColors})` }}></div>\n                <div className='legend_right_arrow' style={{borderLeft: `25px solid ${firstColor}`}}></div>\n            </div>\n            <div className=\"legend-item\">\n                <p className=\"legend-num-value\">{MinValue}</p>\n                <p className=\"legend-num-value\"> {MaxValue}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default MapLegend;\n","import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst TotalConsumptionChart = ({ filteredFeaturesItems }) => {\n\n    // Calculate total consumptions and sort districts based on total consumption\n    const districtData = filteredFeaturesItems.map((entry) => {\n        const totalConsumption = (calculateSumOfArray(getAnnualDataFromMonthly(entry.AETI)) * 0.001 * entry.AREA / 1000000000).toFixed(2);\n        return { district: entry.DISTRICT, totalConsumption };\n    });\n    districtData.sort((a, b) => b.totalConsumption - a.totalConsumption);\n\n    const districtNames = districtData.map((data) => data.district);\n    const totalConsumptions = districtData.map((data) => data.totalConsumption);\n\n    // Calculate the minimum height based on the number of districts\n    const minHeightPerDistrict = 20; // Adjust this value as needed\n    const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Total Consumption (BCM)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} BCM`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: totalConsumptions\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default TotalConsumptionChart","import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateAverageOfArray, calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst UnitConsumptionChart = ({ filteredFeaturesItems }) => {\n\n    const districtData = filteredFeaturesItems.map((entry) => ({\n        name: entry.DISTRICT,\n        UnitConsumptions: calculateAverageOfArray((entry.AETI.map((aeti) => aeti * 10))).toFixed(2)\n    }));\n\n    districtData.sort((a, b) => b.UnitConsumptions - a.UnitConsumptions);\n\n\n    const districtNames = districtData.map((entry) => entry.name);\n    const UnitConsumptions = districtData.map((entry) => entry.UnitConsumptions);\n\n    // const districtNames = filteredFeaturesItems.map((entry) => entry.DISTRICT);\n    // const UnitConsumptions= filteredFeaturesItems.map((entry) => (calculateAverageOfArray((entry.AETI)) * 10) );\n\n\n   const minHeightPerDistrict = 20; // Adjust this value as needed\n    const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n\n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Unit Consumption (m3/ha)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (m3/ha)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: UnitConsumptions\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default UnitConsumptionChart","import React, { useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { MonthsArray, SelectedFeaturesAverageStats, YearsArray, calculateAverageOfArray, calculateSumOfArray, fillDensityColor, getAnnualDataFromMonthly, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Plot from 'react-plotly.js';\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport MapLegend from '../components/MapLegend';\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport HorizontalBarChart from '../components/charts/TotalConsumptionChart';\nimport UnitConsumptionChart from '../components/charts/UnitConsumptionChart';\nimport TotalConsumptionChart from '../components/react-plotly-charts/PlotlyTotalConsumptionChart';\nimport DistrictStats from \"../assets/data/District_Stats.json\"\n\n\nconst EvapotranspirationPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('AETI');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState(5);\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = DistrictStats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              ${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${intervalType ==='Monthly' ? DataItem[selectedDataType][selectedTime]:getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]}\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime  && selectedDataType) {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find((item) => item.DISTRICT === name);\n        return DataItem && intervalType ==='Monthly' ? DataItem[selectedDataType][selectedTime]:getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n\n      return {\n        // fillColor: selectedDensityFunc(density),\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n\n  const sortedTotalConsumptionItems = filteredFeaturesItems.sort((a, b) => {\n    const aX = (calculateAverageOfArray(getAnnualDataFromMonthly(a.AETI)) * 0.001 * a.AREA) / 1000000000;\n    const bX = (calculateAverageOfArray(getAnnualDataFromMonthly(b.AETI)) * 0.001 * b.AREA) / 1000000000;\n    return bX - aX;\n  });\n\n\n\n\n\n  const TableAnnualData = {\n    Year: YearsArray,\n    Yearly_AETI: getAnnualDataFromMonthly(SelectedFeaturesStatsData.AETI),\n    Yearly_PCP: getAnnualDataFromMonthly(SelectedFeaturesStatsData.PCP),\n    Yearly_RET: getAnnualDataFromMonthly(SelectedFeaturesStatsData.RET),\n    Yearly_ETB: SelectedFeaturesStatsData.ETB,\n    Yearly_ETG: SelectedFeaturesStatsData.ETG,\n  }\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n          <div className='card_container'>\n          <div className='defination_container'>\n              <h4>Evapotranspiration and Potential ET</h4>\n            </div>\n\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.AETI,\n                  fill: 'tozeroy',\n                  type: 'scatter',\n                  name: \"Evapotranspiration (mm/month)\",\n                  yaxis: 'y1',\n                },\n                {\n                  x: MonthsArray,\n                  // y: SelectedFeaturesStatsData.RET,\n                  y: SelectedFeaturesStatsData.RET.map(value => value / 10),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Potential ET (mm/month)\",\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Evapotranspiration (mm/month)\",\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: \"Potential ET (mm/month)\",\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n\n              style={{ width: \"100%\", height: \"100%)\" }}\n            />\n          </div>\n\n          <div className='card_container'>\n            {/* <div className='defination_container'>\n              <h4>Land Cover class area by district (ha)</h4>\n            </div> */}\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>Year</th>\n                    <th>Total Evapotranspiration (BCM/year)</th>\n                    <th>ET Blue (BCM/year)</th>\n                    <th>ET Green (BCM/year)</th>\n                    <th>Precipitation (PCP) (BCM/year)</th>\n                    <th>PCP - ET (BCM/year)</th>\n                    <th>Portion of PCP locally consumed (%)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {TableAnnualData.Year.map((year, index) => (\n                    <tr key={index}>\n                      <td>{year}</td>\n                      <td>{(TableAnnualData.Yearly_AETI[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td>{(TableAnnualData.Yearly_ETB[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td>{(TableAnnualData.Yearly_ETG[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td>{(TableAnnualData.Yearly_PCP[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td className={TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index] < 0 ? 'red-text' : ''}>\n                        {((TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index]) * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(2)}\n                      </td>\n\n                      <td>{(TableAnnualData.Yearly_AETI[index] * 100 / TableAnnualData.Yearly_PCP[index]).toFixed(1)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          <div className=\"card_container\" style={{ maxHeight: \"800px\", overflow: \"scroll\" }}>\n\n            <div className='defination_container'>\n              <h4>Total Consumption (BCM)</h4>\n            </div>\n\n            <HorizontalBarChart filteredFeaturesItems={filteredFeaturesItems} />\n          </div>\n\n          <div className=\"card_container\" style={{ maxHeight: \"800px\", overflow: \"scroll\" }}>\n\n            <div className='defination_container'>\n            <h4>Unit Consumption (m<sup>3</sup>/ha)</h4>\n            </div>\n\n            <UnitConsumptionChart filteredFeaturesItems={filteredFeaturesItems} />\n          </div>\n\n          \n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n\n              <div className='map_options_container'>\n\n                <div>\n                  <select className='m-1' value={selectedDataType} onChange={handleSelectedDataChange}>\n                    <option value=\"AETI\">Evapotranspiration</option>\n                    <option value=\"RET\">Potential ET</option>\n\n                  </select>\n                </div>\n                <div>\n                  <select className='m-1' value={intervalType} onChange={handleIntervalTypeChange}>\n                    <option value=\"Monthly\">Monthly</option>\n                    <option value=\"Yearly\">Yearly</option>\n                  </select>\n                </div>\n\n                <div>\n                  <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n                    {renderTimeOptions(intervalType)}\n                  </select>\n                </div>\n\n\n              </div>\n\n\n\n\n\n              {selectedDataType && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n\n              ) : (\n                \n                <GeoJSON\n                  style={{\n                    fillColor: 'black',\n                    weight: 2,\n                    color: 'black',\n                    fillOpacity: \"0.001\",\n                    interactive: false\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n\n              <FiltererdJsonFeature />\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default EvapotranspirationPage","import React, { useEffect } from 'react';\nimport { GeoJSON, Pane, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport {  mapCenter, setInitialMapZoom } from '../helpers/functions';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport AFG_boundary from '../assets/data/shapefiles/AFG_boundary.json';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport AFG_provinces from '../assets/data/shapefiles/AFG_provinces.json';\nimport AFG_watershed from '../assets/data/shapefiles/AFG_watershed.json';\nimport AFG_water_basin from '../assets/data/shapefiles/AFG_water_basin.json';\n\nconst FiltererdJsonFeature = () => {\n    const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n    const map = useMap();\n    const intialZoom=setInitialMapZoom()\n\n\n    const selectedFeatureData = () => {\n        switch (selectedView) {\n            case 'BASIN':\n                return AFG_water_basin.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'WATERSHED':\n                return AFG_watershed.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'PROVINCE':\n                return AFG_provinces.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'DISTRICT':\n                return AFG_districts.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'COUNTRY':\n                return AFG_boundary.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            default:\n                return null;\n        }\n    };\n    const filteredData=selectedFeatureData()\n\n\n\n    useEffect(() => {\n        if (filteredData) {\n            const bounds = L.geoJSON(filteredData.geometry).getBounds();\n            map.flyToBounds(bounds);\n            // map.setView(bounds.getCenter(), intialZoom);\n        }\n        else{\n            map.flyTo(mapCenter,intialZoom);\n        }\n    }, [filteredData, map,intialZoom]);\n\n\n    return (\n        <Pane name=\"selected_features\" style={{ zIndex: 1000 }}>\n        <GeoJSON\n            key={`${selectedFeatureName+selectedView}`}\n            style={{ fillColor: 'none', weight: 4, color: 'yellow', fillOpacity: \"0.4\" }}\n            data={filteredData}\n        />\n        </Pane>\n    );\n};\n\nexport default FiltererdJsonFeature;\n"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_WaterProductivity","Monthly_WaterProductivity","Yearly_ETB","Monthly_ETB","Yearly_ETG","Monthly_ETG","_ref","ColorLegendsDataItem","gradientColors","join","firstColor","lastColor","length","_jsxs","className","children","_jsx","style","borderRight","concat","backgroundImage","borderLeft","filteredFeaturesItems","districtData","map","entry","totalConsumption","calculateSumOfArray","getAnnualDataFromMonthly","AETI","AREA","toFixed","district","DISTRICT","sort","a","b","districtNames","data","totalConsumptions","minHeight","Math","max","Chart","options","chart","type","stacked","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","dataLabels","xaxis","categories","title","text","offsetX","yaxis","offsetY","tooltip","y","formatter","val","responsive","breakpoint","legend","position","series","width","height","name","UnitConsumptions","calculateAverageOfArray","aeti","EvapotranspirationPage","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","selectedView","selectedFeatureName","useSelectedFeatureContext","SelectedFeaturesStatsData","SelectedFeaturesAverageStats","aX","TableAnnualData","Year","YearsArray","PCP","RET","ETB","ETG","Plot","x","MonthsArray","fill","value","mode","marker","color","layout","side","showgrid","yaxis2","overlaying","orientation","year","index","maxHeight","overflow","HorizontalBarChart","UnitConsumptionChart","MapContainer","fullscreenControl","center","backgroundColor","border","margin","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","onChange","e","target","renderTimeOptions","_Fragment","MapLegend","GeoJSON","feature","density","DataItem","DistrictStats","find","item","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","opacity","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature","BaseMap","useMap","intialZoom","filteredData","selectedFeatureData","AFG_water_basin","AFG_watershed","AFG_provinces","AFG_boundary","useEffect","bounds","L","geometry","getBounds","flyToBounds","flyTo","mapCenter","Pane","zIndex"],"sourceRoot":""}
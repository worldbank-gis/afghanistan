{"version":3,"file":"static/js/685.e31a7dbb.chunk.js","mappings":"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","sources":["assets/data/ColorLegendsData.js","components/MapLegend.js","components/RasterLayerLegend.js","components/charts/CropWaterFootprintChart.js","components/charts/CTCBlueWaterFlowChart.js","components/charts/CTCGreenWaterFlowChart.js","components/react-plotly-charts/PlotlyWaterFootprintChart.js","pages/WaterFootprintPage.js","../node_modules/geotiff/dist-browser|sync"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [350, 230, 150, 80],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"350\",\n        MinValue: \"80\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [15, 10, 5, 1],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"15\",\n        MinValue: \"1\",\n    },\n    pcp_ssp585:{\n        Title: \"Precipitation\",\n        Unit: \"(mm)\",\n        Value: [200, 100, 50, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"200\",\n        MinValue: \"0\",\n    },\n    pcp_ssp245:{\n        Title: \"Precipitation\",\n        Unit: \"(mm)\",\n        Value: [100, 80, 40, 0],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"100\",\n        MinValue: \"0\",\n    },\n    tdeg_ssp245:{\n        Title: \"Temperature\",\n        Unit: \"(°C)\",\n        Value: [3, 2, 1, 0],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"3\",\n        MinValue: \"0\",\n    },\n    tdeg_ssp585:{\n        Title: \"Temperature\",\n        Unit: \"(°C)\",\n        Value: [3, 2, 1, 0],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"3\",\n        MinValue: \"0\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 20],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [1800, 1500, 1200, 800],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"1800\",\n        MinValue: \"800\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [280, 200, 150, 50],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"280\",\n        MinValue: \"50\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [80, 50, 20, 10],\n        Colors: [\"#eff24b\", \"#fcd432\", \"#fca132\",\"#f24207\", \"#802101\"],\n        MaxValue: \"80\",\n        MinValue: \"10\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [15, 10, 5, 0.2],\n        Colors: [\"#eff24b\", \"#fcd432\", \"#fca132\",\"#f24207\", \"#802101\"],\n        MaxValue: \"15\",\n        MinValue: \"0.2\",\n    },\n    // NPP*22022\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [360, 300, 200, 13],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"8000\",\n        MinValue: \"300\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [9, 6, 2, 0.4],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"200\",\n        MinValue: \"10\",\n    },\n    Yearly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"(kg/m3)\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#017d09\", \"#02c70f\", \"#fc8003\", \"#fc3503\",\"#ab3600\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n\n\n\n    Yearly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Yearly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n","import React from 'react';\n\nconst MapLegend = ({ ColorLegendsDataItem }) => {\n    const { Title, Unit, Colors, MaxValue, MinValue } = ColorLegendsDataItem;\n    const gradientColors = Colors.join(', ');\n    const firstColor = Colors[0];\n    const lastColor = Colors[Colors.length - 1];\n\n    return (\n        <div className=\"legend_container\">\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n            <div className=\"legend-color-container\">\n            <div className='legend_left_arrow' style={{borderRight: `25px solid ${lastColor}`}}></div>\n                <div className='legend-color' style={{ backgroundImage: `linear-gradient(to left, ${gradientColors})` }}></div>\n                <div className='legend_right_arrow' style={{borderLeft: `25px solid ${firstColor}`}}></div>\n            </div>\n            <div className=\"legend-item\">\n                <p className=\"legend-num-value\">{MinValue}</p>\n                <p className=\"legend-num-value\"> {MaxValue}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default MapLegend;\n","import React from 'react'\n\nconst RasterLayerLegend = ({ legendURL, Title, Unit }) => {\n    return (\n        <div className=\"legend_container\">\n\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n\n\n            <img\n                src={legendURL}\n                alt=\"Legend_Img\"\n\n            />\n\n        </div>\n\n    )\n}\n\nexport default RasterLayerLegend","import React from 'react'\n\nimport cropSpecificWaterFootprints from \"../../assets/data/cropSpecificWaterFootprints.json\"\nimport Chart from \"react-apexcharts\";\n\nconst CropWaterFootprintChart = () => {\n    // Get the first three entries\n    const topCropEntries = cropSpecificWaterFootprints.slice(0, 10);\n\n    // Get the sum of the remaining entries\n    const restCropEntriesSum = cropSpecificWaterFootprints.slice(10).reduce((acc, curr) => acc + curr.WFP, 0);\n\n    // Combine the first three entries and the sum into a new array\n    const newCropData = [\n        ...topCropEntries,\n        {\n            \"CropName\": \"Other Crops\",\n            \"WFP\": restCropEntriesSum\n        }\n    ];\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: newCropData.map((entry) => entry.CropName),\n                    title: {\n                        text: 'Crop Specific water footprint (BCM/year)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'Crop Type',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (BCM/year)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: newCropData.map((entry) => (entry.WFP) / 1000000000),\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            height=\"500px\"\n        />\n    )\n}\n\nexport default CropWaterFootprintChart","import React, { useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport WaterFlowsC2CMatrix from '../../assets/data/WaterFlowsC2CMatrix.json';\n\nconst CTCBlueWaterFlowChart = () => {\n    const [selectedSorting, setSelectedSorting] = useState('Import');\n\n    const handleSortingSelection = (e) => {\n        setSelectedSorting(e.target.value)\n    }\n\n\n    const countriesData = WaterFlowsC2CMatrix.map(country => ({\n        name: country.CountryName,\n        Export: (country[`Avg_Blue_Export`] / 1000000).toFixed(1),\n        Import: (country[`Avg_Blue_Import`] / 1000000).toFixed(1),\n    }));\n\n\n    var SortedCountriesData= countriesData.sort((a, b) => b[`${selectedSorting}`] - a[`${selectedSorting}`]);\n\n    // Extract top 5 countries and calculate total for other countries\n    const topCountries = SortedCountriesData.slice(0, 10);\n    const otherCountries_Export_Total = SortedCountriesData.slice(10).reduce((total, country) => total + country.Export, 0);\n    const otherCountries_Import_Total = SortedCountriesData.slice(10).reduce((total, country) => total + country.Import, 0);\n\n    // Create series data for chart\n    const series = [\n        {\n            name: 'Virtual water transfer from AFG',\n            data: topCountries.map(country => country.Export).concat(otherCountries_Export_Total),\n            color: '#378CE7'\n        },\n        {\n            name: 'Virtual water transfer to AFG ',\n            data: topCountries.map(country => country.Import).concat(otherCountries_Import_Total),\n            color: '#67C6E3'\n        },\n    ];\n\n    // Create categories for x-axis including 'Other Countries' for the sum of other countries\n    const categories = topCountries.map(country => country.name).concat('Other Countries');\n\n\n    return (\n        <>\n            <div className='chart_year_container' >\n                <label>Sort Countries by: &nbsp; </label>\n                <select value={selectedSorting} onChange={handleSortingSelection} style={{ marginRight: \"10px\" }}>\n                    <option value=\"Import\">Virtual Water Import</option>\n                    <option value=\"Export\">Virtual Water Export</option>\n                </select>\n\n            </div>\n            <Chart\n                options={{\n                    chart: {\n                        type: 'bar',\n                        // stacked: true,\n                        toolbar: {\n                            show: false,\n                        },\n                        zoom: {\n                            enabled: true,\n                        },\n                    },\n                    // plotOptions: {\n                    //     bar: {\n                    //         horizontal: true,\n                    //     },\n                    // },\n                    plotOptions: {\n                        bar: {\n                            horizontal: true,\n                            dataLabels: {\n                                position: 'top',\n                            },\n                        }\n                    },\n                    dataLabels: {\n                        enabled: false,\n                    },\n                    xaxis: {\n                        categories: categories,\n                        title: {\n                            text: `Country-to-Country Blue Water Flow (MCM/year)`,\n                            offsetX: 10,\n                        },\n                    },\n                    yaxis: {\n                        title: {\n                            text: 'Country Name',\n                            offsetY: 10,\n                        },\n                        // reversed: true\n                    },\n\n                    tooltip: {\n                        y: {\n                            formatter: function (val) {\n                                return `${val} (MCM/year)`;\n                            },\n                        },\n                    },\n                    responsive: [\n                        {\n                            breakpoint: 480,\n                            options: {\n                                legend: {\n                                    position: 'bottom',\n                                    offsetX: -10,\n                                    offsetY: 0,\n                                },\n                            },\n                        },\n                    ],\n                }}\n                series={series}\n                type='bar'\n                width='100%'\n                height='500px'\n            // height={minHeight + 'px'}\n            />\n        </>\n\n    );\n};\n\nexport default CTCBlueWaterFlowChart;\n","import React, { useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport WaterFlowsC2CMatrix from '../../assets/data/WaterFlowsC2CMatrix.json';\n\nconst CTCGreenWaterFlowChart = () => {\n    const [selectedSorting, setSelectedSorting] = useState('Import');\n\n    const handleSortingSelection = (e) => {\n        setSelectedSorting(e.target.value)\n    }\n\n\n    const countriesData = WaterFlowsC2CMatrix.map(country => ({\n        name: country.CountryName,\n        Export: (country[`Avg_Green_Export`] / 1000000).toFixed(1),\n        Import: (country[`Avg_Green_Import`] / 1000000).toFixed(1),\n    }));\n\n\n    var SortedCountriesData= countriesData.sort((a, b) => b[`${selectedSorting}`] - a[`${selectedSorting}`]);\n\n    // Extract top 5 countries and calculate total for other countries\n    const topCountries = SortedCountriesData.slice(0, 10);\n    const otherCountries_Export_Total = SortedCountriesData.slice(10).reduce((total, country) => total + country.Export, 0);\n    const otherCountries_Import_Total = SortedCountriesData.slice(10).reduce((total, country) => total + country.Import, 0);\n\n    // Create series data for chart\n    const series = [\n        {\n            name: 'Virtual water transfer from AFG',\n            data: topCountries.map(country => country.Export).concat(otherCountries_Export_Total),\n            color: '#87A922'\n        },\n        {\n            name: 'Virtual water transfer to AFG ',\n            data: topCountries.map(country => country.Import).concat(otherCountries_Import_Total),\n            color: '#114232'\n        },\n    ];\n\n    // Create categories for x-axis including 'Other Countries' for the sum of other countries\n    const categories = topCountries.map(country => country.name).concat('Other Countries');\n\n\n    return (\n        <>\n            <div className='chart_year_container' >\n                <label>Sort Countries by: &nbsp; </label>\n                <select value={selectedSorting} onChange={handleSortingSelection} style={{ marginRight: \"10px\" }}>\n                    <option value=\"Import\">Virtual Water Import</option>\n                    <option value=\"Export\">Virtual Water Export</option>\n                </select>\n\n            </div>\n            <Chart\n                options={{\n                    chart: {\n                        type: 'bar',\n                        // stacked: true,\n                        toolbar: {\n                            show: false,\n                        },\n                        zoom: {\n                            enabled: true,\n                        },\n                    },\n                    // plotOptions: {\n                    //     bar: {\n                    //         horizontal: true,\n                    //     },\n                    // },\n                    plotOptions: {\n                        bar: {\n                            horizontal: true,\n                            dataLabels: {\n                                position: 'top',\n                            },\n                        }\n                    },\n                    dataLabels: {\n                        enabled: false,\n                    },\n                    xaxis: {\n                        categories: categories,\n                        title: {\n                            text: `Country-to-Country Green Water Flow (MCM/year)`,\n                            offsetX: 10,\n                        },\n                    },\n                    yaxis: {\n                        title: {\n                            text: 'Country Name',\n                            offsetY: 10,\n                        },\n                        // reversed: true\n                    },\n\n                    tooltip: {\n                        y: {\n                            formatter: function (val) {\n                                return `${val} (MCM/year)`;\n                            },\n                        },\n                    },\n                    responsive: [\n                        {\n                            breakpoint: 480,\n                            options: {\n                                legend: {\n                                    position: 'bottom',\n                                    offsetX: -10,\n                                    offsetY: 0,\n                                },\n                            },\n                        },\n                    ],\n                }}\n                series={series}\n                type='bar'\n                width='100%'\n                height='500px'\n            // height={minHeight + 'px'}\n            />\n        </>\n\n    );\n};\n\nexport default CTCGreenWaterFlowChart;\n","import React from 'react'\nimport Plot from 'react-plotly.js'\nimport { useSelectedFeatureContext } from '../../contexts/SelectedFeatureContext';\nimport AllWaterFootprints from \"../../assets/data/AllWaterFootprints.json\"\n\n\nconst PlotlyWaterFootprintChart = () => {\n    const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n\n\n    const filteredFeaturesItems = selectedView && AllWaterFootprints.filter(item => item[selectedView] === selectedFeatureName);\n\n\n    const sum_irrigated_green = ((filteredFeaturesItems.reduce((acc, curr) => acc + curr.irrigated_green, 0)) / 1000000).toFixed(1);\n    const sum_irrigated_blue = ((filteredFeaturesItems.reduce((acc, curr) => acc + curr.irrigated_blue, 0)) / 1000000).toFixed(1);\n    const sum_rainfed_blue = ((filteredFeaturesItems.reduce((acc, curr) => acc + curr.rainfed_blue, 0)) / 1000000).toFixed(1);\n    const sum_rainfed_green = ((filteredFeaturesItems.reduce((acc, curr) => acc + curr.rainfed_green, 0)) / 1000000).toFixed(1);\n    const sum_total = ((filteredFeaturesItems.reduce((acc, curr) => acc + curr.total, 0)) / 1000000).toFixed(1);\n\n\n\n    return (\n        <Plot\n            data={[\n                {\n                    y: [sum_irrigated_blue, sum_irrigated_green, sum_rainfed_blue, sum_rainfed_green, sum_total],\n                    x: [\"Irrigated Blue\", \"Irrigated Green\", \"Rainfed Blue\", \"Rainfed green\", \"Total\"],\n                    type: \"bar\",\n                    text: [sum_irrigated_blue, sum_irrigated_green, sum_rainfed_blue, sum_rainfed_green, sum_total],\n                    textposition: \"auto\",\n                },\n            ]}\n            layout={{\n                yaxis: {\n                    title: \"Water footprint (MCM/year)\",\n                },\n                xaxis: {\n                    title: ``\n                },\n                margin: {\n                    l: 50,\n                },\n            }}\n            config={{\n                displayModeBar: false,\n                scrollZoom: false\n            }\n\n            }\n            style={{ width: \"100%\", height: \"100%\" }}\n        />\n    )\n}\n\nexport default PlotlyWaterFootprintChart","import React, { useEffect, useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON, TileLayer, ImageOverlay } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport { SelectedFeaturesAverageStatsFunction, calculateAverageOfArray, calculateSumOfArray, fillDensityColor, getAnnualDataFromMonthly, renderTimeOptions } from '../helpers/functions';\nimport MapLegend from '../components/MapLegend';\nimport { BaseMapsLayers, mapCenter, pngRasterBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\n\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport CropWaterFootprintChart from '../components/charts/CropWaterFootprintChart';\nimport District_Stats from \"../assets/data/District_Stats.json\"\nimport CTCBlueWaterFlowChart from '../components/charts/CTCBlueWaterFlowChart';\nimport CTCGreenWaterFlowChart from '../components/charts/CTCGreenWaterFlowChart';\nimport Avg_ETB from \"../assets/raster_data/Avg_ETB.png\"\nimport Avg_ETB_Legend from \"../assets/legends/Avg_ETB_legend.png\"\nimport Avg_ETG from \"../assets/raster_data/Avg_ETG.png\"\nimport Avg_ETG_Legend from \"../assets/legends/Avg_ETG_legend.png\"\nimport RasterMap from '../components/RasterMap';\nimport PlotlyWaterFootprintChart from '../components/react-plotly-charts/PlotlyWaterFootprintChart';\nimport RasterLayerLegend from '../components/RasterLayerLegend';\n\nconst WaterFootprintPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('ETG');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState(5);\n  const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n\n\n\n\n  const filteredFeaturesItems = selectedView && selectedFeatureName !== \"\" ? District_Stats.filter(item => item[selectedView] === selectedFeatureName) : District_Stats;\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStatsFunction(filteredFeaturesItems)\n\n  const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n\n\n\n  const handleDataLayerSelection = (e) => {\n    const value = e.target.value;\n    setSelectedDataType((prevSelectedRaster) =>\n      prevSelectedRaster === value ? '' : value\n    );\n\n  };\n\n\n  const handleBasemapSelection = (e) => {\n    const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n    setSelectedBasemapLayer(selectedItem);\n\n\n  };\n\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on('mouseover', function (e) {\n      const DataItem = District_Stats.find(item => item.DISTRICT === feature.properties.NAME);\n      const popupContent = `\n          <div>\n            District: ${feature.properties.NAME}<br/>\n            ${selectedDataType === 'ETG' ? 'ET Green' : selectedDataType === 'ETB' ? 'ET Blue' : null}  (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'}): ${DataItem[selectedDataType][selectedTime]}\n          </div>\n        `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on('mouseout', function () {\n      layer.closeTooltip();\n    });\n  }\n\n\n  const DistrictStyle = (feature => {\n    if (selectedTime !== \"\") {\n      const getDensityFromData = (name) => {\n        const DataItem = District_Stats.find(item => item.DISTRICT === name);\n\n        return DataItem && DataItem[selectedDataType][selectedTime]\n      };\n\n      const density = getDensityFromData(feature.properties.NAME);\n      return ({\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: 'black',\n        dashArray: '2',\n        fillOpacity: 1\n      });\n\n    }\n\n  });\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n\n\n\n          <div className=\"card_container\" style={{ overflow: \"scroll\" }}>\n            <div className='defination_container'>\n              <h4>Crop Specific water footprint (BCM/year)</h4>\n            </div>\n            <CropWaterFootprintChart />\n\n\n          </div>\n\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Average anuual Green and Blue ET by districts</h4>\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>District</th>\n                    <th>Average ET Blue (mm/year)</th>\n                    <th>Average ET Green (mm/year)</th>\n                    <th>Average ET Blue Volume (MCM/year)</th>\n                    <th>Average ET Green Volume (MCM/year)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredFeaturesItems.map((districtData, index) => (\n                    <tr key={index}>\n                      <td>{districtData.DISTRICT}</td>\n                      <td>{calculateSumOfArray(districtData.ETB).toFixed(2)}</td>\n                      <td>{calculateSumOfArray(districtData.ETG).toFixed(2)}</td>\n                      <td>{(calculateAverageOfArray(districtData.ETB) * 0.001 * districtData.AREA / 1000000).toFixed(2)}</td>\n                      <td>{(calculateAverageOfArray(districtData.ETG) * 0.001 * districtData.AREA / 1000000).toFixed(2)}</td>\n                    </tr>\n                  ))}\n\n                </tbody>\n\n              </table>\n            </div>\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Water Footprint</h4>\n            </div>\n\n            <PlotlyWaterFootprintChart />\n\n          </div>\n\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4> Virtual Blue Water Footprint</h4>\n            </div>\n            <iframe\n              title=\"Embedded Chart\"\n              src={process.env.PUBLIC_URL + '/Afghanistan_blue.html'}\n              width=\"100%\"\n              height=\"400px\"\n              frameBorder=\"0\"\n            />\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4> Virtual Green Water Footprint</h4>\n            </div>\n            <iframe\n              title=\"Embedded Chart\"\n              src={process.env.PUBLIC_URL + '/Afghanistan_green.html'}\n              width=\"100%\"\n              height=\"400px\"\n              frameBorder=\"0\"\n            />\n          </div>\n\n\n\n\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Country-to-Country Blue Water Flow (MCM)</h4>\n            </div>\n            <CTCBlueWaterFlowChart />\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Country-to-Country Green Water Flow (MCM)</h4>\n            </div>\n            <CTCGreenWaterFlowChart />\n          </div>\n\n\n\n\n\n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={mapCenter}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n\n              <div className='map_layer_manager'>\n                <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseOne\">\n                        Base Map\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n                        {BaseMapsLayers.map(option => (\n                          <div key={option.value} className=\"collapse_layers_item\">\n                            <input\n                              type=\"radio\"\n                              id={option.name}\n                              name=\"data_type\"\n                              value={option.name}\n                              checked={selectedBasemapLayer?.name === option.name}\n                              onChange={handleBasemapSelection}\n                            />\n                            <label htmlFor={option.name}>{option.name}</label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                        Raster Layers\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"avg_ETB_raster\"\n                            value=\"avg_ETB_raster\"\n                            checked={selectedDataType === 'avg_ETB_raster'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"avg_ETB_raster\">Avg. ET Blue</label>\n\n\n                        </div>\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"avg_ETG_raster\"\n                            value=\"avg_ETG_raster\"\n                            checked={selectedDataType === 'avg_ETG_raster'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"avg_ETG_raster\">Avg. ET Green</label>\n\n                        </div>\n\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                      <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseThree\">\n                        Vector Data Layers\n                      </button>\n                    </h2>\n                    <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                      <div className=\"accordion-body map_layer_collapse_body\">\n\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"ETB\"\n                            value=\"ETB\"\n                            checked={selectedDataType === 'ETB'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"ETB\">ET Blue</label>\n                        </div>\n                        <div className=\"collapse_layers_item\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"ETG\"\n                            value=\"ETG\"\n                            checked={selectedDataType === 'ETG'}\n                            onChange={handleDataLayerSelection}\n                          />\n                          <label htmlFor=\"ETG\">ET Green</label>\n                        </div>\n\n\n\n\n                        <select value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n                          {renderTimeOptions(intervalType)}\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <TileLayer\n                key={selectedBasemapLayer.url}\n                attribution={selectedBasemapLayer.attribution}\n                url={selectedBasemapLayer.url}\n                subdomains={selectedBasemapLayer.subdomains}\n              />\n\n\n\n\n              {selectedDataType === 'avg_ETB_raster' ? (\n                <>\n                  <ImageOverlay\n                    opacity={1}\n                    attribution=\"\"\n                    key=\"Irrigated_Rainfed\"\n                    url={Avg_ETB}\n                    fitBounds={true}\n                    // interactive={true}\n                    bounds={pngRasterBounds}\n\n                  />\n                  <RasterLayerLegend\n                    legendURL={Avg_ETB_Legend}\n                    Title=\"Avg. ET Blue\"\n                    Unit=\"(mm/year)\"\n                  />\n\n\n                </>\n\n              ) : selectedDataType === 'avg_ETG_raster' ? (\n                <>\n                  <ImageOverlay\n                    opacity={1}\n                    attribution=\"\"\n                    key=\"avg_ETG_raster\"\n                    url={Avg_ETG}\n                    fitBounds={true}\n                    // interactive={true}\n                    bounds={pngRasterBounds}\n\n                  />\n                  <RasterLayerLegend\n                    legendURL={Avg_ETG_Legend}\n                    Title=\"Avg. ET Green\"\n                    Unit=\"(mm/year)\"\n                  />\n                </>\n\n              ) : (\n                <>\n                  {selectedDataType && selectedTime !== '' && intervalType ? (\n                    <>\n                      {ColorLegendsDataItem && (\n                        <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                      )}\n\n                      <GeoJSON\n                        key={selectedDataType + selectedTime + intervalType}\n                        style={DistrictStyle}\n                        data={AFG_districts.features}\n                        onEachFeature={DistrictOnEachfeature}\n                      />\n                    </>\n\n                  ) : (\n                    <GeoJSON\n                      style={{\n                        fillColor: 'black',\n                        weight: 2,\n                        color: 'black',\n                        fillOpacity: \"0.001\",\n                        interactive: false\n                      }}\n                      data={AfghanistanCountry.features}\n                    // onEachFeature={DistrictOnEachfeature}\n                    />\n                  )}\n                </>\n\n              )}\n\n\n\n\n\n              <FiltererdJsonFeature />\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WaterFootprintPage","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 4938;\nmodule.exports = webpackEmptyContext;"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","pcp_ssp585","pcp_ssp245","tdeg_ssp245","tdeg_ssp585","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_WaterProductivity","Yearly_ETB","Monthly_ETB","Yearly_ETG","Monthly_ETG","_ref","ColorLegendsDataItem","gradientColors","join","firstColor","lastColor","length","_jsxs","className","children","_jsx","style","borderRight","concat","backgroundImage","borderLeft","legendURL","src","alt","CropWaterFootprintChart","newCropData","cropSpecificWaterFootprints","slice","reduce","acc","curr","WFP","Chart","options","chart","type","stacked","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","dataLabels","xaxis","categories","map","entry","CropName","title","text","offsetX","yaxis","offsetY","tooltip","y","formatter","val","responsive","breakpoint","legend","position","series","data","width","height","CTCBlueWaterFlowChart","selectedSorting","setSelectedSorting","useState","SortedCountriesData","WaterFlowsC2CMatrix","country","name","CountryName","Export","toFixed","Import","sort","a","b","topCountries","otherCountries_Export_Total","total","otherCountries_Import_Total","color","_Fragment","value","onChange","e","target","marginRight","CTCGreenWaterFlowChart","PlotlyWaterFootprintChart","selectedView","selectedFeatureName","useSelectedFeatureContext","filteredFeaturesItems","AllWaterFootprints","filter","item","sum_irrigated_green","irrigated_green","sum_irrigated_blue","irrigated_blue","sum_rainfed_blue","rainfed_blue","sum_rainfed_green","rainfed_green","sum_total","Plot","x","textposition","layout","margin","l","config","displayModeBar","scrollZoom","WaterFootprintPage","selectedDataType","setSelectedDataType","intervalType","setIntervalType","selectedTime","setSelectedTime","District_Stats","selectedBasemapLayer","setSelectedBasemapLayer","SelectedFeaturesAverageStatsFunction","BaseMapsLayers","handleDataLayerSelection","prevSelectedRaster","handleBasemapSelection","selectedItem","find","overflow","districtData","index","DISTRICT","calculateSumOfArray","ETB","ETG","calculateAverageOfArray","AREA","process","frameBorder","MapContainer","fullscreenControl","center","mapCenter","backgroundColor","border","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","id","option","checked","htmlFor","renderTimeOptions","TileLayer","attribution","url","subdomains","ImageOverlay","opacity","Avg_ETB","fitBounds","bounds","pngRasterBounds","RasterLayerLegend","Avg_ETG","MapLegend","GeoJSON","feature","density","DataItem","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature","BaseMap","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"sourceRoot":""}
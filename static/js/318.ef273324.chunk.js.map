{"version":3,"file":"static/js/318.ef273324.chunk.js","mappings":"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","sources":["components/BaseMapWithoutBaselayers.js","../node_modules/react-leaflet/lib/ImageOverlay.js","pages/OtherDataPage.js","../node_modules/react-leaflet/lib/WMSTileLayer.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents } from 'react-leaflet'\nimport { FaHome } from \"react-icons/fa\";\n\n\n\n\n\nconst BaseMapWithoutBaselayers = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n  const map = useMap();\n\n  const HandleMouseHover = () => {\n\n\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n    return null;\n  };\n\n\n\n\n  const handleZoomToCenter = () => {\n    map.setView([34, 67], 6);\n\n  };\n\n\n\n\n  return (\n    <>\n\n      <HandleMouseHover />\n\n      <div\n        className='coordinates_container' >\n        Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n        {mousePosition.lng.toFixed(4)}\n      </div>\n      <button className='zoom_btn' onClick={handleZoomToCenter}><FaHome /></button>\n      <ScaleControl />\n\n\n\n\n    </>\n  )\n}\n\nexport default BaseMapWithoutBaselayers","import { createElementObject, createLayerComponent, extendContext, updateMediaOverlay } from '@react-leaflet/core';\nimport { LatLngBounds, ImageOverlay as LeafletImageOverlay } from 'leaflet';\nexport const ImageOverlay = createLayerComponent(function createImageOveraly({ bounds , url , ...options }, ctx) {\n    const overlay = new LeafletImageOverlay(url, bounds, options);\n    return createElementObject(overlay, extendContext(ctx, {\n        overlayContainer: overlay\n    }));\n}, function updateImageOverlay(overlay, props, prevProps) {\n    updateMediaOverlay(overlay, props, prevProps);\n    if (props.bounds !== prevProps.bounds) {\n        const bounds = props.bounds instanceof LatLngBounds ? props.bounds : new LatLngBounds(props.bounds);\n        overlay.setBounds(bounds);\n    }\n    if (props.url !== prevProps.url) {\n        overlay.setUrl(props.url);\n    }\n});\n","import React, { useState } from \"react\";\nimport BaseMap from \"../components/BaseMap\";\nimport {\n    MapContainer,\n    GeoJSON,\n    ImageOverlay,\n    WMSTileLayer,\n    TileLayer,\n} from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport {\n    MonthsArray,\n    SelectedFeaturesAverageStats,\n    YearsArray,\n    fillDensityColor,\n    getAnnualDataFromMonthly,\n    renderTimeOptions,\n    setDragging,\n    setInitialMapZoom,\n} from \"../helpers/functions\";\nimport AfghanistanCountry from \"../assets/data/shapefiles/AFG_boundary.json\";\n\nimport irrigated_rainfed_cropland_area from \"../assets/raster_data/irrigated_rainfed_cropland_area.png\";\nimport irrigated_rainfed_cropland_area_legend from \"../assets/raster_data/irrigated_rainfed_cropland_area_legend.jpg\";\nimport global_glacier_legend from \"../assets/raster_data/global_glacier_legend.jpg\"\nimport BaseMapWithoutBaselayers from \"../components/BaseMapWithoutBaselayers\";\n\n\nconst OtherDataPage = () => {\n    const [selectedDataType, setSelectedDataType] = useState(\n        \"land_classification\"\n    );\n    const [intervalType, setIntervalType] = useState(\"Yearly\");\n\n    const handleSelectedDataChange = (e) => {\n        setSelectedDataType(e.target.value);\n    };\n\n    const handleIntervalTypeChange = (e) => {\n        setIntervalType(e.target.value);\n    };\n\n    const options = [\n        { name: 'Land Classification', value: 'land_classification' },\n        { name: 'Population Density', value: 'population_density' },\n        { name: 'Global Reservoirs', value: 'global_reservoirs' },\n        { name: 'Dams', value: 'global_dams' },\n        { name: 'Observed Climate Change', value: 'observed_climatec_change' },\n        { name: 'Climate Change Vulnerability', value: 'climate_change_vulnerability_scenarios' },\n        { name: 'Crop Climate: Maize, Rice, and Wheat', value: 'Crop_Climate_Maize_Rice' },\n        { name: 'Glacier', value: 'global_glacier' },\n        { name: 'Surface Water', value: 'surface_water' }\n    ];\n\n\n    //   const WMSTilelayersData = {\n    //     land_classification: {\n    //       layerName:\"Land Classification\",\n    //       baselayerURL: \"\",\n    //       legendURL:irrigated_rainfed_cropland_area_legend,\n    //       attribution:\"\"\n    //     },\n    //     population_density: {\n    //         layerName:\"\",\n    //         baselayerURL: \"\",\n    //         legendURL:\"\",\n    //         attribution:\"\"\n    //       },\n    //       global_reservoirs: {\n    //         layerName:\"\",\n    //         baselayerURL: \"\",\n    //         legendURL:\"\",\n    //         attribution:\"\"\n    //       },\n    //       global_dams: {\n    //         layerName:\"\",\n    //         baselayerURL: \"\",\n    //         legendURL:\"\",\n    //         attribution:\"\"\n    //       },\n    //       observed_climatec_change: {\n    //         layerName:\"\",\n    //         baselayerURL: \"\",\n    //         legendURL:\"\",\n    //         attribution:\"\"\n    //       },\n    //       climate_change_vulnerability_scenarios: {\n    //         layerName:\"\",\n    //         baselayerURL: \"\",\n    //         legendURL:\"\",\n    //         attribution:\"\"\n    //       },\n    //       Crop_Climate_Maize_Rice: {\n    //         layerName:\"\",\n    //         baselayerURL: \"\",\n    //         legendURL:\"\",\n    //         attribution:\"\"\n    //       },\n    //       global_glacier: {\n    //         layerName:\"\",\n    //         baselayerURL: \"\",\n    //         legendURL:\"\",\n    //         attribution:\"\"\n    //       },\n    //       surface_water: {\n    //         layerName:\"\",\n    //         baselayerURL: \"\",\n    //         legendURL:\"\",\n    //         attribution:\"\"\n    //       },\n    // }\n\n\n\n    return (\n        <div className=\"dasboard_page_container\">\n            <div className=\"main_dashboard\">\n                <div className=\"left_panel_equal\" style={{ width: \"20vw\" }}>\n                    <div className=\"card_container\" style={{ height: \"100%\" }}>\n                        <div className=\"defination_container\">\n                            <h4>Available Layers</h4>\n                        </div>\n\n                        {options.map(option => (\n                            <div key={option.value} className=\"other_data_layers\">\n                                <input\n                                    type=\"radio\"\n                                    id={option.value}\n                                    name=\"data_type\"\n                                    value={option.value}\n                                    checked={selectedDataType === option.value}\n                                    onChange={handleSelectedDataChange}\n                                />\n                                <label htmlFor={option.value}>{option.name}</label>\n                            </div>\n                        ))}\n\n                    </div>\n                </div>\n\n                <div className=\"right_panel_equal\" style={{ width: \"80vw\" }}>\n                    <div className=\"card_container\" style={{ height: \"100%\" }}>\n                        <MapContainer\n                            fullscreenControl={true}\n                            center={[34, 67]}\n                            style={{\n                                width: \"100%\",\n                                height: \"100%\",\n                                backgroundColor: \"white\",\n                                border: \"none\",\n                                margin: \"auto\",\n                            }}\n                            zoom={setInitialMapZoom()}\n                            maxBounds={[\n                                [23, 49],\n                                [41, 82],\n                            ]}\n                            // maxZoom={8}\n                            // minZoom={setInitialMapZoom()}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // attributionControl={false}\n                            // scrollWheelZoom={false}\n                            doubleClickZoom={false}\n                        >\n                            <BaseMapWithoutBaselayers />\n\n\n                            {selectedDataType === \"land_classification\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Land Classification</h4>\n                                    </div>\n\n                                    <div className=\"legend-panel\" style={{ width: \"180px\" }}>\n                                        <img\n                                            src={irrigated_rainfed_cropland_area_legend}\n                                            alt=\"worldcover_Legend\"\n                                        />\n                                    </div>\n                                    <TileLayer\n                                        attribution=\"Tiles &copy; Esri\"\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n                                    />\n\n                                    <ImageOverlay\n                                        url={irrigated_rainfed_cropland_area}\n                                        fitBounds={true}\n                                        bounds={[\n                                            [29.3615722669444459, 74.8941268930555566],\n                                            [38.4904111230555586, 60.5048675530555542],\n                                        ]}\n                                        opacity={1}\n                                    />\n                                </>\n                            ) : selectedDataType === \"population_density\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Population Density</h4>\n                                    </div>\n                                    <WMSTileLayer\n                                        zIndex={10}\n                                        attribution=\"Population Density\"\n                                        url=\"https://sedac.ciesin.columbia.edu/geoserver/wms\"\n                                        params={{ LAYERS: \"gpw-v4:gpw-v4-population-density_2015\" }}\n                                        // maxZoom={6}\n                                        version=\"1.1.1\"\n                                        // transparent={true}\n                                        format=\"image/png\"\n                                        opacity={1}\n                                    />\n                                    <div className=\"legend-panel\" style={{ width: \"180px\" }}>\n                                        <img\n                                            src=\"https://sedac.ciesin.columbia.edu/geoserver/wms?REQUEST=GetLegendGraphic&VERSION=1.0.0&FORMAT=image/png&LAYER=gpw-v4:gpw-v4-population-density_2015\"\n                                            alt=\"worldcover_Legend\"\n                                        />\n                                    </div>\n                                </>\n                            ) : selectedDataType === \"global_dams\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Dams Database</h4>\n                                    </div>\n                                    <WMSTileLayer\n                                        zIndex={10}\n                                        attribution=\"Global Dams Database\"\n                                        url=\"https://sedac.ciesin.columbia.edu/geoserver/wms\"\n                                        params={{ LAYERS: \"grand-v1:grand-v1-dams-rev01\" }}\n                                        // maxZoom={6}\n                                        version=\"1.1.1\"\n                                        // transparent={true}\n                                        format=\"image/png\"\n                                        opacity={1}\n                                    />\n                                    <div className=\"legend-panel\" style={{ width: \"180px\" }}>\n                                        <img\n                                            src=\"https://sedac.ciesin.columbia.edu/geoserver/wms?REQUEST=GetLegendGraphic&VERSION=1.0.0&FORMAT=image/png&LAYER=grand-v1:grand-v1-dams-rev01\"\n                                            alt=\"worldcover_Legend\"\n                                        />\n                                    </div>\n                                </>\n                            ) : selectedDataType === \"observed_climatec_change\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Observed Climate Change Impacts</h4>\n                                    </div>\n                                    <WMSTileLayer\n                                        zIndex={10}\n                                        attribution=\"Observed Climate Change Impacts\"\n                                        url=\"https://sedac.ciesin.columbia.edu/geoserver/wms\"\n                                        params={{\n                                            LAYERS: \"ipcc:ipcc-ar4-observed-climate-impacts\",\n                                        }}\n                                        // maxZoom={6}\n                                        version=\"1.1.1\"\n                                        // transparent={true}\n                                        format=\"image/png\"\n                                        opacity={1}\n                                    />\n                                    <div className=\"legend-panel\" style={{ width: \"180px\" }}>\n                                        <img\n                                            src=\"https://sedac.ciesin.columbia.edu/geoserver/wms?REQUEST=GetLegendGraphic&VERSION=1.0.0&FORMAT=image/png&LAYER=ipcc:ipcc-ar4-observed-climate-impacts\"\n                                            alt=\"worldcover_Legend\"\n                                        />\n                                    </div>\n                                </>\n                            ) : selectedDataType ===\n                                \"climate_change_vulnerability_scenarios\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Climate Change Vulnerability Scenarios 2005, 2050, 2100</h4>\n                                    </div>\n                                    <WMSTileLayer\n                                        zIndex={10}\n                                        attribution=\"Climate Change Vulnerability Scenarios 2005, 2050, 2100\"\n                                        url=\"https://sedac.ciesin.columbia.edu/geoserver/wms\"\n                                        params={{\n                                            LAYERS:\n                                                \"ipcc:ipcc-synthetic-vulnerability-climate-2005-2050-2100\",\n                                        }}\n                                        // maxZoom={6}\n                                        version=\"1.1.1\"\n                                        // transparent={true}\n                                        format=\"image/png\"\n                                        opacity={1}\n                                    />\n                                    <div className=\"legend-panel\" style={{ width: \"180px\" }}>\n                                        <img\n                                            src=\"https://sedac.ciesin.columbia.edu/geoserver/wms?REQUEST=GetLegendGraphic&VERSION=1.0.0&FORMAT=image/png&LAYER=ipcc:ipcc-synthetic-vulnerability-climate-2005-2050-2100\"\n                                            alt=\"worldcover_Legend\"\n                                        />\n                                    </div>\n                                </>\n                            ) : selectedDataType === \"global_reservoirs\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Reservoirs Database</h4>\n                                    </div>\n                                    <WMSTileLayer\n                                        zIndex={10}\n                                        attribution=\"Global Reservoirs Database\"\n                                        url=\"https://sedac.ciesin.columbia.edu/geoserver/wms\"\n                                        params={{ LAYERS: \"grand-v1:grand-v1-reservoirs-rev01\" }}\n                                        // maxZoom={6}\n                                        version=\"1.1.1\"\n                                        // transparent={true}\n                                        format=\"image/png\"\n                                        opacity={1}\n                                    />\n                                    <div className=\"legend-panel\" style={{ width: \"50px\" }}>\n                                        <img\n                                            src=\"https://sedac.ciesin.columbia.edu/geoserver/wms?REQUEST=GetLegendGraphic&VERSION=1.0.0&FORMAT=image/png&LAYER=grand-v1:grand-v1-reservoirs-rev01\"\n                                            alt=\"worldcover_Legend\"\n                                        />\n                                    </div>\n                                </>\n                            ) : selectedDataType === \"Crop_Climate_Maize_Rice\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Crop Climate: Maize, Rice, and Wheat</h4>\n                                    </div>\n                                    <WMSTileLayer\n                                        zIndex={10}\n                                        attribution=\"Crop Climate: Maize, Rice, and Wheat\"\n                                        url=\"https://sedac.ciesin.columbia.edu/geoserver/wms\"\n                                        params={{\n                                            LAYERS:\n                                                \"crop-climate:crop-climate-effects-climate-global-food-production\",\n                                        }}\n                                        // maxZoom={6}\n                                        version=\"1.1.1\"\n                                        // transparent={true}\n                                        format=\"image/png\"\n                                        opacity={1}\n                                    />\n                                    <div className=\"legend-panel\" style={{ width: \"180px\" }}>\n                                        <img\n                                            src=\"https://sedac.ciesin.columbia.edu/geoserver/wms?REQUEST=GetLegendGraphic&VERSION=1.0.0&FORMAT=image/png&LAYER=crop-climate:crop-climate-effects-climate-global-food-production\"\n                                            alt=\"worldcover_Legend\"\n                                        />\n                                    </div>\n                                </>\n                            ) : selectedDataType === \"global_glacier\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Glacier Database</h4>\n                                    </div>\n                                    <WMSTileLayer\n                                        zIndex={10}\n                                        attribution=\"Global Glacier Database\"\n                                        url=\"https://www.glims.org/geoserver/ows\"\n                                        params={{ LAYERS: \"GLIMS_GLACIERS\" }}\n                                        // maxZoom={6}\n                                        version=\"1.3.0\"\n                                        // transparent={true}\n                                        // format=\"image/png\"\n                                        opacity={1}\n                                    />\n                                    <div className='legend-panel' style={{ width: \"220px\" }}>\n                                        <img src={global_glacier_legend} alt='worldcover_Legend' />\n                                    </div>\n                                </>\n                            ) : selectedDataType === \"surface_water\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Surface Water</h4>\n                                    </div>\n                                    <TileLayer\n                                        attribution=\"2016 EC JRC/Google\"\n                                        url=\"https://storage.googleapis.com/global-surface-water/tiles2021/transitions/{z}/{x}/{y}.png\"\n\n                                    />\n                                    {/* <div className='legend-panel' style={{ width: \"220px\" }}>\n                                        <img src={global_glacier_legend} alt='worldcover_Legend' />\n                                    </div> */}\n                                </>\n                            )\n                                : (\n                                    <>\n                                        <TileLayer\n                                            attribution=\"Tiles &copy; Esri\"\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n                                        />\n                                    </>\n                                )}\n\n\n\n\n                            <GeoJSON\n                                style={{\n                                    fillColor: \"black\",\n                                    weight: 2,\n                                    color: \"black\",\n                                    fillOpacity: \"0.001\",\n                                    interactive: false,\n                                }}\n                                data={AfghanistanCountry.features}\n                            // onEachFeature={DistrictOnEachfeature}\n                            />\n\n\n                        </MapContainer>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default OtherDataPage;\n","import { createElementObject, createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer } from 'leaflet';\nexport const WMSTileLayer = createTileLayerComponent(function createWMSTileLayer({ eventHandlers: _eh , params ={} , url , ...options }, context) {\n    const layer = new TileLayer.WMS(url, {\n        ...params,\n        ...withPane(options, context)\n    });\n    return createElementObject(layer, context);\n}, function updateWMSTileLayer(layer, props, prevProps) {\n    updateGridLayer(layer, props, prevProps);\n    if (props.params != null && props.params !== prevProps.params) {\n        layer.setParams(props.params);\n    }\n});\n"],"names":["BaseMapWithoutBaselayers","mousePosition","setMousePosition","useState","lat","lng","map","useMap","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","className","toFixed","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","ImageOverlay","createLayerComponent","_ref","ctx","bounds","url","options","overlay","LeafletImageOverlay","createElementObject","extendContext","overlayContainer","props","prevProps","updateMediaOverlay","LatLngBounds","setBounds","setUrl","OtherDataPage","selectedDataType","setSelectedDataType","intervalType","setIntervalType","handleSelectedDataChange","target","value","style","width","height","name","option","type","id","checked","onChange","htmlFor","MapContainer","fullscreenControl","center","backgroundColor","border","margin","zoom","setInitialMapZoom","maxBounds","keyboard","dragging","setDragging","doubleClickZoom","src","irrigated_rainfed_cropland_area_legend","alt","TileLayer","attribution","irrigated_rainfed_cropland_area","fitBounds","opacity","WMSTileLayer","zIndex","params","LAYERS","version","format","global_glacier_legend","GeoJSON","fillColor","weight","color","fillOpacity","interactive","data","AfghanistanCountry","createTileLayerComponent","context","eventHandlers","_eh","layer","WMS","withPane","updateGridLayer","setParams"],"sourceRoot":""}
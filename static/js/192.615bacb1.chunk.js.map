{"version":3,"file":"static/js/192.615bacb1.chunk.js","mappings":"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","sources":["components/charts/TotalConsumptionChart.js","components/charts/UnitConsumptionChart.js","pages/EvapotranspirationPage.js"],"sourcesContent":["import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst TotalConsumptionChart = ({ filteredFeaturesItems }) => {\n    const districtNames = filteredFeaturesItems.map((entry) => entry.DISTRICT);\n    const totalConsumptions = filteredFeaturesItems.map((entry) => (calculateSumOfArray(getAnnualDataFromMonthly(entry.AETI)) * 0.001 * entry.AREA) / 1000000000);\n\n        // Calculate the minimum height based on the number of districts\n        const minHeightPerDistrict = 20; // Adjust this value as needed\n        const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Total Consumption (BCM)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} BCM`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: totalConsumptions\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default TotalConsumptionChart","import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateAverageOfArray, calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst UnitConsumptionChart = ({ filteredFeaturesItems }) => {\n    const districtNames = filteredFeaturesItems.map((entry) => entry.DISTRICT);\n    const totalConsumptions= filteredFeaturesItems.map((entry) => (calculateAverageOfArray(getAnnualDataFromMonthly(entry.AETI)) * 0.001 * entry.AREA) * 10000);\n\n\n        // Calculate the minimum height based on the number of districts\n        const minHeightPerDistrict = 20; // Adjust this value as needed\n        const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Unit Consumption (m3/ha)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (m3/ha)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: totalConsumptions\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default UnitConsumptionChart","import React, { useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { MonthsArray, SelectedFeaturesAverageStats, YearsArray, calculateAverageOfArray, calculateSumOfArray, fillDensityColor, getAnnualDataFromMonthly, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Plot from 'react-plotly.js';\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport MapLegend from '../components/MapLegend';\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport HorizontalBarChart from '../components/charts/TotalConsumptionChart';\nimport UnitConsumptionChart from '../components/charts/UnitConsumptionChart';\nimport TotalConsumptionChart from '../components/react-plotly-charts/PlotlyTotalConsumptionChart';\nimport DistrictStats from \"../assets/data/District_Stats.json\"\n\n\nconst EvapotranspirationPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('AETI');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState(5);\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = DistrictStats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              ${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${intervalType ==='Monthly' ? DataItem[selectedDataType][selectedTime]:getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]}\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime  && selectedDataType) {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find((item) => item.DISTRICT === name);\n        return DataItem && intervalType ==='Monthly' ? DataItem[selectedDataType][selectedTime]:getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n\n      return {\n        // fillColor: selectedDensityFunc(density),\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n\n  const sortedTotalConsumptionItems = filteredFeaturesItems.sort((a, b) => {\n    const aX = (calculateAverageOfArray(getAnnualDataFromMonthly(a.AETI)) * 0.001 * a.AREA) / 1000000000;\n    const bX = (calculateAverageOfArray(getAnnualDataFromMonthly(b.AETI)) * 0.001 * b.AREA) / 1000000000;\n    return bX - aX;\n  });\n\n\n\n\n\n  const TableAnnualData = {\n    Year: YearsArray,\n    Yearly_AETI: getAnnualDataFromMonthly(SelectedFeaturesStatsData.AETI),\n    Yearly_PCP: getAnnualDataFromMonthly(SelectedFeaturesStatsData.PCP),\n    Yearly_RET: getAnnualDataFromMonthly(SelectedFeaturesStatsData.RET),\n    Yearly_ETB: SelectedFeaturesStatsData.ETB,\n    Yearly_ETG: SelectedFeaturesStatsData.ETG,\n  }\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Evapotranspiration (ET)</h4>\n              <p>\n                Evapotranspiration is a key component of the hydrological cycle. It refers to the water that is lost to the atmosphere through the vaporization process. Water that becomes evapotranspired is no longer available for further use, hence it is commonly referred to as consumed water in the water accounting terminology.\n              </p>\n            </div>\n            {/* <div className='defination_container'>\n              <h4>Potential ET (PET)</h4>\n              <p>\n              Potential evapotranspiration, or PET, represents the combined loss of water through:  1) the plant’s process of transpiration via its vascular system, and 2) evaporation of water from the earth’s surface.  Both are influenced by temperature, humidity, sunlight, and wind.  PET values indicate the amount of water that has been lost, and thus needs to be replaced, through irrigation and/or rainfall.\n            </p>\n            </div> */}\n          </div>\n\n          <div className='card_container'>\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.AETI,\n                  fill: 'tozeroy',\n                  type: 'scatter',\n                  name: \"Evapotranspiration (mm/month)\",\n                  yaxis: 'y1',\n                },\n                {\n                  x: MonthsArray,\n                  // y: SelectedFeaturesStatsData.RET,\n                  y: SelectedFeaturesStatsData.RET.map(value => value / 10),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Potential ET (mm/month)\",\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Evapotranspiration (mm/month)\",\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: \"Potential ET (mm/month)\",\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n\n              style={{ width: \"100%\", height: \"100%)\" }}\n            />\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              {/* <h4>Land Cover class area by district (ha)</h4> */}\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>Year</th>\n                    <th>Total Evapotranspiration (BCM/year)</th>\n                    <th>ET Blue (BCM/year)</th>\n                    <th>ET Green (BCM/year)</th>\n                    <th>Precipitation (PCP) (BCM/year)</th>\n                    <th>PCP - ET (BCM/year)</th>\n                    <th>Portion of PCP locally consumed (%)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {TableAnnualData.Year.map((year, index) => (\n                    <tr key={index}>\n                      <td>{year}</td>\n                      <td>{(TableAnnualData.Yearly_AETI[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td>{(TableAnnualData.Yearly_ETB[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td>{(TableAnnualData.Yearly_ETG[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td>{(TableAnnualData.Yearly_PCP[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td className={TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index] < 0 ? 'red-text' : ''}>\n                        {((TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index]) * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(2)}\n                      </td>\n\n                      <td>{(TableAnnualData.Yearly_AETI[index] * 100 / TableAnnualData.Yearly_PCP[index]).toFixed(1)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          <div className=\"card_container\" style={{ maxHeight: \"800px\", overflow: \"scroll\" }}>\n\n            <div className='defination_container'>\n              <h4>Total Consumption (BCM)</h4>\n            </div>\n\n            <HorizontalBarChart filteredFeaturesItems={filteredFeaturesItems} />\n          </div>\n\n          <div className=\"card_container\" style={{ maxHeight: \"800px\", overflow: \"scroll\" }}>\n\n            <div className='defination_container'>\n            <h4>Unit Consumption (m<sup>3</sup>/ha)</h4>\n            </div>\n\n            <UnitConsumptionChart filteredFeaturesItems={filteredFeaturesItems} />\n          </div>\n\n          \n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n\n              <div className='map_options_container'>\n\n                <div>\n                  <select className='m-1' value={selectedDataType} onChange={handleSelectedDataChange}>\n                    <option value=\"AETI\">Evapotranspiration</option>\n                    <option value=\"RET\">Potential ET</option>\n\n                  </select>\n                </div>\n                <div>\n                  <select className='m-1' value={intervalType} onChange={handleIntervalTypeChange}>\n                    <option value=\"Monthly\">Monthly</option>\n                    <option value=\"Yearly\">Yearly</option>\n                  </select>\n                </div>\n\n                <div>\n                  <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n                    {renderTimeOptions(intervalType)}\n                  </select>\n                </div>\n\n\n              </div>\n\n\n\n\n\n              {selectedDataType && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n\n              ) : (\n                \n                <GeoJSON\n                  style={{\n                    fillColor: 'black',\n                    weight: 2,\n                    color: 'black',\n                    fillOpacity: \"0.001\",\n                    interactive: false\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n\n              <FiltererdJsonFeature />\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default EvapotranspirationPage"],"names":["_ref","filteredFeaturesItems","districtNames","map","entry","DISTRICT","totalConsumptions","calculateSumOfArray","getAnnualDataFromMonthly","AETI","AREA","minHeight","Math","max","length","_jsx","Chart","options","chart","type","stacked","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","dataLabels","xaxis","categories","title","text","offsetX","yaxis","offsetY","tooltip","y","formatter","val","concat","responsive","breakpoint","legend","position","series","data","width","height","calculateAverageOfArray","EvapotranspirationPage","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","selectedView","selectedFeatureName","useSelectedFeatureContext","SelectedFeaturesStatsData","SelectedFeaturesAverageStats","ColorLegendsDataItem","ColorLegendsData","sort","a","b","aX","TableAnnualData","Year","YearsArray","Yearly_AETI","Yearly_PCP","PCP","Yearly_RET","RET","Yearly_ETB","ETB","Yearly_ETG","ETG","className","children","_jsxs","Plot","x","MonthsArray","fill","name","value","mode","marker","color","layout","side","showgrid","yaxis2","overlaying","orientation","style","year","index","toFixed","maxHeight","overflow","HorizontalBarChart","UnitConsumptionChart","MapContainer","fullscreenControl","center","backgroundColor","border","margin","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","onChange","e","target","renderTimeOptions","_Fragment","MapLegend","GeoJSON","feature","density","DataItem","DistrictStats","find","item","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","opacity","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature","BaseMap"],"sourceRoot":""}
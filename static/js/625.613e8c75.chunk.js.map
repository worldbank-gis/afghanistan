{"version":3,"file":"static/js/625.613e8c75.chunk.js","mappings":"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","sources":["components/RasterMap.js","pages/PrecipitationPage.js","../node_modules/geotiff/dist-browser|sync"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport 'leaflet-geotiff-2';\nimport 'leaflet-geotiff-2/dist/leaflet-geotiff-rgb';\nimport 'leaflet-geotiff-2/dist/leaflet-geotiff-plotty';\n\n\nconst RasterMap = ({ url }) => {\n  const [loading, setLoading] = useState(true);\n  const map = useMap();\n  let popup = L.popup();\n\n  \n\n  useEffect(() => {\n    setLoading(true);\n    const plottyRenderer = L.LeafletGeotiff.plotty({\n      // Optional. Minimum values to plot.\n      displayMin: 1,\n      // Optional. Maximum values to plot.\n      displayMax: 1000,\n      // Optional flag for plotty to enable/disable displayMin/Max.\n      applyDisplayRange: true,\n      // Optional. If true values outside `displayMin` to `displayMax` will be rendered as if they were valid values.\n      clampLow: true,\n      clampHigh: true,\n  \n      // colorScale: \"hot\",\n      colorScale: \"viridis\",\n  \n  \n    });\n  \n    // console.log(plottyRenderer)\n    const options = {\n      // renderer: null,\n      renderer: plottyRenderer,\n      // useWorker: false,\n      // bounds: [[22.5444989120000017, 77.2885380120000036], [22.7877842760000000, 77.7441607800000014]],\n  \n      // band: 0,\n      // image: 0,\n      // clip: undefined,\n      // pane: 'overlayPane',\n      // onError: null,\n      // arrayBuffer: null,\n      // noDataValue: undefined,\n      // noDataKey: undefined,\n      // blockSize: 65536,\n      opacity: 1,\n      // clearBeforeMove: false,\n    };\n\n\n\n    const geotiffLayer = L.leafletGeotiff(url, options)\n      .on('load', () => {\n        setLoading(false);\n      })\n      .addTo(map);\n      const bounds_set = geotiffLayer.getBounds();\n      // console.log(\"bounds_set\",bounds_set)\n\n    // console.log(\"bounds_set\",bounds_set)\n\n    console.log(bounds_set)\n\n\n  //   // Wait for the geotiff layer to load\n  // geotiffLayer.on('add', () => {\n  //   // Get the bounds of the geotiff layer\n    \n\n  //   // Fit the map to the layer bounds with some padding (optional)\n  //   map.fitBounds(layerBounds, { padding: [20, 20] });\n  // });\n\n\n  map.on('mousemove', (event) => {\n    const latlng = event.latlng;\n\n    const pixelValue = geotiffLayer.getValueAtLatLng(latlng.lat, latlng.lng);\n    if (pixelValue && pixelValue !== null && pixelValue !== '' && pixelValue !== 9999 && pixelValue !== -9999) {\n\n      // Format the pixelValue to show up to 3 decimal places\n      const formattedPixelValue = pixelValue.toFixed(3);\n      // Update the content of the popup with the formatted pixel value\n      popup\n        .setLatLng(latlng)\n        .setContent(`PCP Value: ${formattedPixelValue}`)\n        .openOn(map);\n    } else {\n      // If pixelValue is empty, null, or 999, close the popup\n      map.closePopup();\n    }\n  });\n\n   // Clean up when the component unmounts\n   return () => {\n    map.removeLayer(geotiffLayer);\n    map.off('mousemove');\n    map.closePopup(); \n\n  };\n\n  }, [url, map]);\n\n  return loading ?\n  <div className='map_layer_loader_container'>\n    <div className=\"map_loader_container\">\n      <span className=\"map_loader\"></span>\n    </div>\n\n  </div> : null;\n};\n\nexport default RasterMap;\n","import React, { useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { fillDensityColor, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Plot from 'react-plotly.js';\nimport { AFG_Data_Annual, AFG_Data_Monthly } from '../assets/data/AFG_Data';\nimport Zonal_Stat_RET_Annual from \"../assets/data/Zonal_Stat_RET_Annual.json\"\nimport Zonal_Stat_PCP_Annual from \"../assets/data/Zonal_Stat_AETI_Annual.json\"\nimport Zonal_Stat_AridityIndex_Annual from \"../assets/data/Zonal_Stat_AridityIndex_Annual.json\"\nimport Zonal_Stat_RET_Monthly from \"../assets/data/Zonal_Stat_RET_Monthly.json\"\nimport Zonal_Stat_PCP_Monthly from \"../assets/data/Zonal_Stat_AETI_Monthly.json\"\nimport Zonal_Stat_AridityIndex_Monthly from \"../assets/data/Zonal_Stat_AridityIndex_Monthly.json\"\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport MapLegend from '../components/MapLegend';\nimport Zonal_Stat_Data from \"../assets/data/Zonal_Stat_Data.json\"\nimport tiff_raster from \"../assets/raster_data/clipped_chirps-v2.0.2023.tif\"\nimport RasterMap from '../components/RasterMap';\n\nconst PrecipitationPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('PCP');\n  const [intervalType, setIntervalType] = useState('Monthly');\n  const [selectedRaster, setSelectedRaster] = useState('');\n  const [selectedTime, setSelectedTime] = useState('2023-12');\n\n  const chartData = intervalType === 'Yearly' ? AFG_Data_Annual : AFG_Data_Monthly;\n  let selectedDataset;\n\n  if (selectedDataType === \"PCP\") {\n    selectedDataset =\n      intervalType === \"Yearly\"\n        ? Zonal_Stat_PCP_Annual\n        : Zonal_Stat_PCP_Monthly;\n  } if (selectedDataType === \"RET\") {\n    selectedDataset =\n      intervalType === \"Yearly\"\n        ? Zonal_Stat_RET_Annual\n        : Zonal_Stat_RET_Monthly;\n\n  } if (selectedDataType === \"AridityIndex\") {\n    selectedDataset =\n      intervalType === \"Yearly\"\n        ? Zonal_Stat_AridityIndex_Annual\n        : Zonal_Stat_AridityIndex_Monthly;\n  }\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = selectedDataset.find(\n        (item) => item.NAME === feature.properties.NAME\n      );\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              ${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${DataItem[selectedTime]}\n        <br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime && selectedDataset) {\n      const getDensityFromData = (name) => {\n        const DataItem = selectedDataset.find((item) => item.NAME === name);\n        return DataItem ? DataItem[selectedTime] : null;\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n      return {\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        // fillColor: selectedTime !== '' ? Annual_Density(density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n  const handleRasterSelectionChange = (e) => {\n    setSelectedRaster(e.target.value);\n  };\n\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n\n        <div className='left_panel_equal'>\n\n\n          <div className='card_container'>\n            <select className='m-1' value={selectedDataType} onChange={handleSelectedDataChange}>\n              <option value=\"PCP\">Precipitation</option>\n              <option value=\"RET\">Potential ET</option>\n              <option value=\"AridityIndex\">Average Aridity Index</option>\n            </select>\n\n            <select className='m-1' value={intervalType} onChange={handleIntervalTypeChange}>\n              <option value=\"Monthly\">Monthly</option>\n              <option value=\"Yearly\">Yearly</option>\n            </select>\n\n\n            <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n              {renderTimeOptions(intervalType)}\n            </select>\n\n            <select className='m-1' value={selectedRaster} onChange={handleRasterSelectionChange}>\n              <option value=\"\">Select Raster Map</option>\n              <option value=\"pcp_annual_2023\">Annual PCP 2023</option>\n              {/* <option value=\"Yearly\">Yearly</option> */}\n            </select>\n\n\n          </div>\n\n          <div className='card_container'>\n\n            <div className='defination_container'>\n              <h4>Precipitation</h4>\n              <p>\n                Precipitation is key water source in the hydrological cycle. It refers to all forms of condensation of atmospheric water vapor that falls from clouds. The main forms of precipitation include drizzling, rain, sleet, snow, ice pellets, graupel and hail. In the river basins, where there is no other inflow (e.g. through surface or subsurface flow), the total precipitation accounts for the entire total gross inflow, in the water accounting terms, in any given time\n              </p>\n\n            </div>\n          </div>\n\n\n\n\n          <div className='card_container'>\n\n            <Plot\n              data={[\n                {\n                  x: chartData.map(entry => entry.Time),\n                  y: chartData.map(entry => entry[selectedDataType]),\n                  type: selectedDataType === 'RET' ? 'scatter' : 'bar',\n                  mode: selectedDataType === 'RET' ? 'lines+markers' : '',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: `${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}`,\n                },\n              }}\n              style={{ width: \"100%\", height: \"calc(100% - 100px)\" }}\n            />\n\n\n\n\n\n            {/* <Plot\n              data={[\n                {\n                  x: chartData.map(entry => entry.Time),\n                  y: chartData.map(entry => entry.PCP),\n                  type: 'bar',\n                  name: `Precipitation (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`,\n                  yaxis: 'y1',\n                },\n                {\n                  x: chartData.map(entry => entry.Time),\n                  y: chartData.map(entry => entry.AETI),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: `Potential ET (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`,\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: `Precipitation (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`,\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: `Potential ET (${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`,\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            /> */}\n\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              {/* <h4>Land Cover class area by district (ha)</h4> */}\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>Year</th>\n                    <th>Evapotranspiration (mm/year)</th>\n                    <th>Precipitation (mm/year)</th>\n                    <th>PCP - ET (mm/year)</th>\n                    <th>Potential ET (mm/year)</th>\n                    <th>Aridity Index</th>\n                    <th>ET Blue (mm/year)</th>\n                    <th>ET Green (mm/year)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {AFG_Data_Annual.map((item, index) => (\n                    <tr key={index}>\n                      <td>{item.Time}</td>\n                      <td>{item.AETI}</td>\n                      <td>{item.PCP}</td>\n                      <td>{(item.PCP - item.AETI).toFixed(1)}</td>\n                      <td>{item.RET}</td>\n                      <td>{item.AridityIndex}</td>\n                      <td>{(item.ETBlue).toFixed(1)}</td>\n                      <td>{(item.ETGreen).toFixed(1)}</td>\n\n                    </tr>\n                  ))}\n                </tbody>\n\n              </table>\n            </div>\n          </div>\n\n\n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <SearchBar />\n\n              {selectedRaster === 'pcp_annual_2023' ? (\n                <>\n                  <RasterMap url={tiff_raster} />\n                  <MapLegend ColorLegendsDataItem={\n                    {\n                      Title: \"Annual Precipitation 2023\",\n                      Unit: \"(mm)\",\n                      Value: [1, 200, 400, 700, 1000],\n                      Colors: [\"#fde725\", \"#5ec962\", \"#21918c\", \"#3b528b\", \"#440154\"],\n                      MaxValue: \"1002\",\n                      MinValue: \"36\",\n                    }\n                  } />\n                </>\n\n              ) : (\n                <>\n                  {selectedDataType && selectedTime !== '' && intervalType ? (\n                    <>\n                      {ColorLegendsDataItem && (\n                        <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                      )}\n                      <GeoJSON\n                        key={selectedDataType + selectedTime + intervalType}\n                        style={DistrictStyle}\n                        data={AFG_districts.features}\n                        onEachFeature={DistrictOnEachfeature}\n                      />\n\n                    </>\n\n                  ) : (\n                    <GeoJSON\n                      style={{\n                        fillColor: 'black',\n                        weight: 2,\n                        color: 'black',\n                        fillOpacity: \"0.001\",\n                        interactive: false\n                      }}\n                      data={AfghanistanCountry.features}\n                    />\n                  )}\n                </>\n\n              )}\n\n\n\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PrecipitationPage","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 4938;\nmodule.exports = webpackEmptyContext;"],"names":["_ref","url","loading","setLoading","useState","map","useMap","popup","L","useEffect","options","renderer","plotty","displayMin","displayMax","applyDisplayRange","clampLow","clampHigh","colorScale","opacity","geotiffLayer","on","addTo","bounds_set","getBounds","console","log","event","latlng","pixelValue","getValueAtLatLng","lat","lng","formattedPixelValue","toFixed","setLatLng","setContent","concat","openOn","closePopup","removeLayer","off","_jsx","className","children","PrecipitationPage","selectedDataType","setSelectedDataType","intervalType","setIntervalType","selectedRaster","setSelectedRaster","selectedTime","setSelectedTime","chartData","AFG_Data_Annual","AFG_Data_Monthly","selectedDataset","Zonal_Stat_PCP_Annual","Zonal_Stat_PCP_Monthly","Zonal_Stat_RET_Annual","Zonal_Stat_RET_Monthly","Zonal_Stat_AridityIndex_Annual","Zonal_Stat_AridityIndex_Monthly","ColorLegendsDataItem","ColorLegendsData","_jsxs","value","onChange","e","target","renderTimeOptions","Plot","data","x","entry","Time","y","type","mode","layout","xaxis","title","yaxis","style","width","height","item","index","AETI","PCP","RET","AridityIndex","ETBlue","ETGreen","MapContainer","fullscreenControl","center","backgroundColor","border","margin","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","SearchBar","_Fragment","RasterMap","tiff_raster","MapLegend","Title","Unit","Value","Colors","MaxValue","MinValue","GeoJSON","feature","density","name","DataItem","find","NAME","getDensityFromData","properties","fillColor","fillDensityColor","weight","color","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","BaseMap","webpackEmptyContext","req","Error","code","keys","resolve","id","module","exports"],"sourceRoot":""}
{"version":3,"file":"static/js/755.bc5cb786.chunk.js","mappings":"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","sources":["components/BaseMapWithoutBaselayers.js","pages/OtherDataPage.js","../node_modules/react-leaflet/lib/ImageOverlay.js","../node_modules/react-leaflet/lib/WMSTileLayer.js"],"sourcesContent":["import React, { useState } from 'react'\nimport {ScaleControl, useMap, useMapEvents } from 'react-leaflet'\nimport { FaHome } from \"react-icons/fa\";\n\n\n\nconst BaseMapWithoutBaselayers = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n  const map = useMap();\n\n  const HandleMouseHover = () => {\n\n\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n    return null;\n  };\n\n\n\n\n  const handleZoomToCenter = () => {\n    map.setView([34, 67], 6);\n\n  };\n\n\n\n\n  return (\n    <>\n\n      <HandleMouseHover />\n\n      <div\n        className='coordinates_container' >\n        Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n        {mousePosition.lng.toFixed(4)}\n      </div>\n      <button className='zoom_btn' onClick={handleZoomToCenter}><FaHome /></button>\n      <ScaleControl />\n\n    </>\n  )\n}\n\nexport default BaseMapWithoutBaselayers","import React, { useState } from \"react\";\nimport {\n    MapContainer,\n    GeoJSON,\n    ImageOverlay,\n    WMSTileLayer,\n    TileLayer,\n} from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport { BaseMapsLayers, mapCenter, pngRasterBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\n\nimport irrigated_rainfed_cropland_area from \"../assets/raster_data/irrigated_rainfed_cropland_area.png\";\nimport irrigated_rainfed_cropland_area_legend from \"../assets/legends/irrigated_rainfed_cropland_area_legend.jpg\";\nimport global_glacier_legend from \"../assets/legends/global_glacier_legend.jpg\"\nimport BaseMapWithoutBaselayers from \"../components/BaseMapWithoutBaselayers\";\nimport surface_water_legend from \"../assets/legends/surface_water_legend.jpg\"\nimport reservoirs_dams_legend from \"../assets/legends/reservoirs_dams_legend.jpg\"\nimport global_population_legend from \"../assets/legends/global_population_legend.jpg\"\nimport elevation_legend from \"../assets/legends/elevation_legend.jpg\"\n\nimport AFG_boundary from '../assets/data/shapefiles/AFG_boundary.json';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport AFG_provinces from '../assets/data/shapefiles/AFG_provinces.json';\nimport AFG_watershed from '../assets/data/shapefiles/AFG_watershed.json';\nimport AFG_water_basin from '../assets/data/shapefiles/AFG_water_basin.json';\n\n\n\n\nconst LayersOptions = [\n    { name: 'Irrigated/Rainfed', value: 'Irrigated_Rainfed' },\n    { name: 'Elevation', value: 'elevation' },\n    { name: 'Population Density', value: 'population_density' },\n    { name: 'Reservoirs and Dams Locations', value: 'global_dams_reservoirs' },\n    { name: 'Glacier', value: 'global_glacier' },\n    { name: 'Surface Water', value: 'surface_water' }\n];\n\nconst VectorDataOptions = [\n    { name: 'Country Boundry', value: 'Country_Boundry', data: AFG_boundary },\n    { name: 'District Boundry', value: 'District_Boundry', data: AFG_districts },\n    { name: 'Basin Boundry', value: 'Basin_Boundry', data: AFG_water_basin },\n    { name: 'Watershed Boundry', value: 'Watershed_Boundry', data: AFG_watershed },\n    { name: 'Province Boundry', value: 'Province_Boundry', data: AFG_provinces },\n\n];\n\n\nconst OtherDataPage = () => {\n    const [selectedRasterLayer, setSelectedRasterLayer] = useState(\"Irrigated_Rainfed\");\n    const [rasterLayerOpacity, setRasterLayerOpacity] = useState(1);\n    const [selectedVectorData, setSelectedVectorData] = useState(VectorDataOptions[0]);\n    const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n\n\n    const handleBasemapSelection = (e) => {\n        const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n        setSelectedBasemapLayer(selectedItem);\n\n\n    };\n\n    const handleRasterLayerSelection = (e) => {\n        const value = e.target.value;\n        setSelectedRasterLayer((prevSelectedRaster) =>\n            prevSelectedRaster === value ? '' : value\n        );\n    };\n\n    const handleOpacityChange = (e) => {\n        setRasterLayerOpacity(parseFloat(e.target.value));\n    };\n\n\n    const handleVectorLayerSelection = (e) => {\n        const selectedItem = VectorDataOptions.find((item) => item.value === e.target.value);\n        setSelectedVectorData(selectedItem);\n    };\n\n\n\n\n\n\n\n    return (\n        <div className=\"dasboard_page_container\">\n            <div className=\"main_dashboard\">\n                <div className=\"otherdata_left_panel\">\n                    <div className=\"card_container\" style={{ height: \"100%\", overflowY: \"scroll\" }}>\n\n                        <div className=\"accordion\" >\n                            <div className=\"accordion-item\">\n                                <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseThree\">\n                                        Base Map\n                                    </button>\n                                </h2>\n                                <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                                    <div className=\"accordion-body\">\n                                        {BaseMapsLayers.map((option, index) => (\n                                            <div key={index} className=\"other_data_layers\">\n                                                <input\n                                                    type=\"radio\"\n                                                    id={option.name}\n\n                                                    value={option.name}\n                                                    checked={selectedBasemapLayer.name === option.name}\n                                                    onChange={handleBasemapSelection}\n                                                />\n                                                <label htmlFor={option.name}>{option.name}</label>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"accordion-item\">\n                                <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\n                                        Choose Layers\n                                    </button>\n                                </h2>\n                                <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                                    <div className=\"accordion-body\">\n                                        {LayersOptions.map(option => (\n                                            <div key={option.value} className=\"other_data_layers\">\n                                                <input\n                                                    type=\"radio\"\n                                                    id={option.value}\n                                                    value={option.value}\n                                                    checked={selectedRasterLayer === option.value}\n                                                    onChange={handleRasterLayerSelection}\n                                                />\n                                                <label htmlFor={option.value}>{option.name}</label>\n                                            </div>\n                                        ))}\n                                        <div className=\"input_range_container\">\n                                            <div className=\"input_range_label\">\n                                                <p>0</p>\n                                                <p>Layer Opacity</p>\n                                                <p>100</p>\n                                            </div>\n                                            <input\n                                                type=\"range\"\n                                                name=\"vol\"\n                                                min=\"0\"\n                                                max=\"1\"\n                                                step=\"0.1\"\n                                                value={rasterLayerOpacity}\n                                                onChange={handleOpacityChange}\n                                            />\n                                        </div>\n\n\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"accordion-item\">\n                                <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                                    <button className=\"accordion-button collapsed \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"frue\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                                        Choose Boundaries\n                                    </button>\n                                </h2>\n                                <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                                    <div className=\"accordion-body\">\n                                        {VectorDataOptions.map(option => (\n                                            <div key={option.value} className=\"other_data_layers\">\n                                                <input\n                                                    type=\"checkbox\"\n                                                    id={option.value}\n                                                    name=\"data_type\"\n                                                    value={option.value}\n                                                    checked={selectedVectorData?.value === option.value}\n                                                    onChange={handleVectorLayerSelection}\n                                                />\n                                                <label htmlFor={option.value}>{option.name}</label>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n\n\n                    </div>\n                </div>\n\n                <div className=\"otherdata_right_panel\">\n                    <div className=\"card_container\" style={{ height: \"100%\" }}>\n                        <MapContainer\n                            fullscreenControl={true}\n                            center={mapCenter}\n                            style={{\n                                width: \"100%\",\n                                height: \"100%\",\n                                backgroundColor: \"white\",\n                                border: \"none\",\n                                margin: \"auto\",\n                            }}\n                            zoom={setInitialMapZoom()}\n                            maxBounds={[\n                                [23, 49],\n                                [41, 82],\n                            ]}\n                            minZoom={setInitialMapZoom()}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // attributionControl={false}\n                            // scrollWheelZoom={false}\n                            doubleClickZoom={false}\n                        >\n                            <BaseMapWithoutBaselayers />\n\n                            <TileLayer\n                                key={selectedBasemapLayer.url}\n                                attribution={selectedBasemapLayer.attribution}\n                                url={selectedBasemapLayer.url}\n                                subdomains={selectedBasemapLayer.subdomains}\n                            />\n\n\n\n                            {selectedRasterLayer === \"Irrigated_Rainfed\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Irrigated/Rainfed</h4>\n                                    </div>\n\n                                    <div className=\"legend-panel\" style={{ width: \"180px\" }}>\n                                        <img\n                                            src={irrigated_rainfed_cropland_area_legend}\n                                            alt=\"Legend_Img\"\n\n                                        />\n                                    </div>\n\n                                    <ImageOverlay\n                                        opacity={rasterLayerOpacity}\n                                        attribution=\"\"\n                                        key=\"Irrigated_Rainfed\"\n                                        url={irrigated_rainfed_cropland_area}\n                                        fitBounds={true}\n                                        // interactive={true}\n                                        bounds={pngRasterBounds}\n\n                                    />\n                                </>\n                            ) : selectedRasterLayer === \"population_density\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Population Density</h4>\n                                    </div>\n                                    <WMSTileLayer\n                                        opacity={rasterLayerOpacity}\n                                        zIndex={10}\n                                        key=\"population_density\"\n                                        attribution=\"Data Source: <a href='https://sedac.ciesin.columbia.edu/maps/services' target='_blank'>SEDAC</a>\"\n                                        url=\"https://sedac.ciesin.columbia.edu/geoserver/wms\"\n                                        params={{ LAYERS: \"gpw-v4:gpw-v4-population-density_2015\" }}\n                                        // maxZoom={6}\n                                        version=\"1.1.1\"\n                                        // transparent={true}\n                                        format=\"image/png\"\n                                    />\n                                    <div className=\"legend-panel\" style={{ width: \"220px\" }}>\n                                        <img\n                                            src={global_population_legend}\n                                            alt=\"Legend_Img\"\n                                        />\n                                    </div>\n                                </>\n                            ) : selectedRasterLayer === \"global_dams_reservoirs\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Reservoirs and Dams Locations</h4>\n                                    </div>\n                                    <WMSTileLayer\n                                        opacity={rasterLayerOpacity}\n                                        zIndex={10}\n                                        key=\"global_dams_reservoirs\"\n                                        attribution=\"Data Source: <a href='https://sedac.ciesin.columbia.edu/maps/services' target='_blank'>SEDAC</a>\"\n                                        url=\"https://sedac.ciesin.columbia.edu/geoserver/wms\"\n                                        params={{ LAYERS: \"grand-v1:grand-v1-dams-rev01,grand-v1:grand-v1-reservoirs-rev01\" }}\n                                        // maxZoom={6}\n                                        version=\"1.1.1\"\n                                        // transparent={true}\n                                        format=\"image/png\"\n                                    />\n                                    <div className=\"legend-panel\" style={{ width: \"220px\" }}>\n                                        <img\n                                            src={reservoirs_dams_legend}\n                                            alt=\"Legend_Img\"\n                                        />\n                                    </div>\n\n                                </>\n                            ) : selectedRasterLayer === \"global_glacier\" ? (\n                                <>\n                                    <div className='map_heading'>\n                                        <h4>Glaciers</h4>\n                                    </div>\n                                    <WMSTileLayer\n                                        opacity={rasterLayerOpacity}\n                                        zIndex={10}\n                                        key=\"global_glacier\"\n                                        attribution=\"Data Source: <a href='http://glims.colorado.edu/glacierdata/' target='_blank'>GLIMS Glacier Database</a>\"\n                                        url=\"https://www.glims.org/geoserver/ows\"\n                                        params={{ LAYERS: \"GLIMS_GLACIERS\" }}\n                                        version=\"1.3.0\"\n                                    />\n                                    <div className='legend-panel' style={{ width: \"220px\" }}>\n                                        <img src={global_glacier_legend} alt='Legend_Img' />\n                                    </div>\n                                </>\n                            )\n                                : selectedRasterLayer === \"elevation\" ? (\n                                    <>\n                                        <div className='map_heading'>\n                                            <h4>Elevation</h4>\n                                        </div>\n                                        <WMSTileLayer\n                                            opacity={rasterLayerOpacity}\n                                            key=\"elevation\"\n                                            attribution=\"Data Source: <a href='https://www.terrestris.de/en/hoehenmodell-srtm30-wms/' target='_blank'>Terrestris</a>\"\n                                            layers={\"SRTM30-Colored\"}\n                                            url=\"https://ows.terrestris.de/osm/service?\"\n                                        // params={layerParams}\n                                        />\n                                        <div className='legend-panel' style={{ width: \"220px\" }}>\n                                            <img src={elevation_legend} alt='Legend_Img' />\n                                        </div>\n\n\n\n                                    </>\n                                ) : selectedRasterLayer === \"surface_water\" ? (\n                                    <>\n                                        <div className='map_heading'>\n                                            <h4>Surface Water</h4>\n                                        </div>\n                                        <TileLayer\n                                            opacity={rasterLayerOpacity}\n                                            attribution=\"Data Source: 2016 EC JRC/Google\"\n                                            key=\"surface_water\"\n                                            url=\"https://storage.googleapis.com/global-surface-water/tiles2021/transitions/{z}/{x}/{y}.png\"\n\n                                        />\n                                        <div className='legend-panel' style={{ width: \"220px\" }}>\n                                            <img src={surface_water_legend} alt='Legend_Img' />\n                                        </div>\n                                    </>\n                                ) : (\n                                    null\n                                )}\n\n\n\n                            <GeoJSON\n                                key={selectedVectorData.value}\n                                style={{\n                                    fillColor: \"black\",\n                                    weight: 2,\n                                    color: \"black\",\n                                    fillOpacity: \"0.001\",\n                                    interactive: false,\n                                }}\n                                data={selectedVectorData.data.features}\n                            />\n\n\n                        </MapContainer>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default OtherDataPage;\n","import { createElementObject, createLayerComponent, extendContext, updateMediaOverlay } from '@react-leaflet/core';\nimport { LatLngBounds, ImageOverlay as LeafletImageOverlay } from 'leaflet';\nexport const ImageOverlay = createLayerComponent(function createImageOveraly({ bounds , url , ...options }, ctx) {\n    const overlay = new LeafletImageOverlay(url, bounds, options);\n    return createElementObject(overlay, extendContext(ctx, {\n        overlayContainer: overlay\n    }));\n}, function updateImageOverlay(overlay, props, prevProps) {\n    updateMediaOverlay(overlay, props, prevProps);\n    if (props.bounds !== prevProps.bounds) {\n        const bounds = props.bounds instanceof LatLngBounds ? props.bounds : new LatLngBounds(props.bounds);\n        overlay.setBounds(bounds);\n    }\n    if (props.url !== prevProps.url) {\n        overlay.setUrl(props.url);\n    }\n});\n","import { createElementObject, createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer } from 'leaflet';\nexport const WMSTileLayer = createTileLayerComponent(function createWMSTileLayer({ eventHandlers: _eh , params ={} , url , ...options }, context) {\n    const layer = new TileLayer.WMS(url, {\n        ...params,\n        ...withPane(options, context)\n    });\n    return createElementObject(layer, context);\n}, function updateWMSTileLayer(layer, props, prevProps) {\n    updateGridLayer(layer, props, prevProps);\n    if (props.params != null && props.params !== prevProps.params) {\n        layer.setParams(props.params);\n    }\n});\n"],"names":["BaseMapWithoutBaselayers","mousePosition","setMousePosition","useState","lat","lng","map","useMap","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","className","toFixed","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","LayersOptions","name","value","VectorDataOptions","data","AFG_boundary","AFG_districts","AFG_water_basin","AFG_watershed","AFG_provinces","OtherDataPage","selectedRasterLayer","setSelectedRasterLayer","rasterLayerOpacity","setRasterLayerOpacity","selectedVectorData","setSelectedVectorData","selectedBasemapLayer","setSelectedBasemapLayer","BaseMapsLayers","handleBasemapSelection","selectedItem","find","item","target","handleRasterLayerSelection","prevSelectedRaster","handleVectorLayerSelection","style","height","overflowY","id","type","option","index","checked","onChange","htmlFor","min","max","step","parseFloat","MapContainer","fullscreenControl","center","mapCenter","width","backgroundColor","border","margin","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","TileLayer","attribution","url","subdomains","src","irrigated_rainfed_cropland_area_legend","alt","ImageOverlay","opacity","irrigated_rainfed_cropland_area","fitBounds","bounds","pngRasterBounds","WMSTileLayer","zIndex","params","LAYERS","version","format","global_population_legend","reservoirs_dams_legend","global_glacier_legend","layers","elevation_legend","surface_water_legend","GeoJSON","fillColor","weight","color","fillOpacity","interactive","features","createLayerComponent","_ref","ctx","options","overlay","LeafletImageOverlay","createElementObject","extendContext","overlayContainer","props","prevProps","updateMediaOverlay","LatLngBounds","setBounds","setUrl","createTileLayerComponent","context","eventHandlers","_eh","layer","WMS","withPane","updateGridLayer","setParams"],"sourceRoot":""}
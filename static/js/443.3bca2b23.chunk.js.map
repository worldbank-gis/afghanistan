{"version":3,"file":"static/js/443.3bca2b23.chunk.js","mappings":"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","sources":["assets/data/ColorLegendsData.js","components/MapLegend.js","components/RasterMap.js","pages/FiltererdJsonFeature.js","pages/PrecipitationPage.js","../node_modules/geotiff/dist-browser|sync"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [350, 230, 150, 80],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"350\",\n        MinValue: \"80\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [15, 10, 5, 1],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"15\",\n        MinValue: \"1\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 20],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [1800, 1500, 1200, 800],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"1800\",\n        MinValue: \"800\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [280, 200, 150, 50],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"280\",\n        MinValue: \"50\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [80, 50, 20, 10],\n        Colors: [\"#802101\", \"#f24207\", \"#fca132\",\"#fcd432\", \"#eff24b\"],\n        MaxValue: \"80\",\n        MinValue: \"10\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [15, 10, 5, 0.2],\n        Colors: [\"#802101\", \"#f24207\", \"#fca132\",\"#fcd432\", \"#eff24b\"],\n        MaxValue: \"15\",\n        MinValue: \"0.2\",\n    },\n    // NPP*22022\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [360, 300, 200, 13],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"8000\",\n        MinValue: \"300\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [9, 6, 2, 0.4],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"200\",\n        MinValue: \"10\",\n    },\n    Yearly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n    Monthly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n\n\n    Yearly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Yearly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n","import React from 'react';\n\nconst MapLegend = ({ ColorLegendsDataItem }) => {\n    const { Title, Unit, Value, Colors, MaxValue, MinValue } = ColorLegendsDataItem;\n    const gradientColors = Colors.join(', ');\n    const firstColor = Colors[0];\n    const lastColor = Colors[Colors.length - 1];\n\n    return (\n        <div className=\"legend_container\">\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n            <div className=\"legend-color-container\">\n            <div className='legend_left_arrow' style={{borderRight: `25px solid ${lastColor}`}}></div>\n                <div className='legend-color' style={{ backgroundImage: `linear-gradient(to left, ${gradientColors})` }}></div>\n                <div className='legend_right_arrow' style={{borderLeft: `25px solid ${firstColor}`}}></div>\n            </div>\n            <div className=\"legend-item\">\n                <p className=\"legend-num-value\">{MinValue}</p>\n                <p className=\"legend-num-value\"> {MaxValue}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default MapLegend;\n","import React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport 'leaflet-geotiff-2';\nimport 'leaflet-geotiff-2/dist/leaflet-geotiff-rgb';\nimport 'leaflet-geotiff-2/dist/leaflet-geotiff-plotty';\n\n\nconst RasterMap = ({ url , colorPalatte, maxValue, minValue,popopContent }) => {\n  const [loading, setLoading] = useState(true);\n  const map = useMap();\n  let popup = L.popup();\n\n  \n\n  useEffect(() => {\n    setLoading(true);\n    const plottyRenderer = L.LeafletGeotiff.plotty({\n      // Optional. Minimum values to plot.\n      displayMin: minValue,\n      // Optional. Maximum values to plot.\n      displayMax: maxValue,\n      // Optional flag for plotty to enable/disable displayMin/Max.\n      applyDisplayRange: true,\n      // Optional. If true values outside `displayMin` to `displayMax` will be rendered as if they were valid values.\n      clampLow: true,\n      clampHigh: true,\n  \n      // colorScale: \"hot\",\n      colorScale: colorPalatte,\n\n  \n    });\n  \n    // console.log(plottyRenderer)\n    const options = {\n      // renderer: null,\n      renderer: plottyRenderer,\n      // useWorker: false,\n      // bounds: [[22.5444989120000017, 77.2885380120000036], [22.7877842760000000, 77.7441607800000014]],\n  \n      // band: 0,\n      // image: 0,\n      // clip: undefined,\n      pane: 'overlayPane',\n      onError: null,\n      arrayBuffer: null,\n      noDataValue: undefined,\n      // noDataKey: undefined,\n      // blockSize: 65536,\n      opacity: 1,\n      // clearBeforeMove: false,\n    };\n\n\n\n    const geotiffLayer = L.leafletGeotiff(url, options)\n      .on('load', () => {\n        setLoading(false);\n      })\n      .addTo(map);\n\n\n  map.on('mousemove', (event) => {\n    const latlng = event.latlng;\n\n    const pixelValue = geotiffLayer.getValueAtLatLng(latlng.lat, latlng.lng);\n    if (pixelValue && pixelValue !== null && pixelValue !== '' && pixelValue !== 9999 && pixelValue !== -9999) {\n\n      // Format the pixelValue to show up to 3 decimal places\n      const formattedPixelValue = pixelValue.toFixed(3);\n      // Update the content of the popup with the formatted pixel value\n      popup\n        .setLatLng(latlng)\n        .setContent(`${popopContent}: ${formattedPixelValue}`)\n        .openOn(map);\n    } else {\n      // If pixelValue is empty, null, or 999, close the popup\n      map.closePopup();\n    }\n  });\n\n   // Clean up when the component unmounts\n   return () => {\n    map.removeLayer(geotiffLayer);\n    map.off('mousemove');\n    map.closePopup(); \n\n  };\n\n  }, [url, map]);\n\n  return loading ?\n  <div className='map_layer_loader_container'>\n    <div className=\"map_loader_container\">\n      <span className=\"map_loader\"></span>\n    </div>\n\n  </div> : null;\n};\n\nexport default RasterMap;\n","import React, { useEffect } from 'react';\nimport { GeoJSON, Pane, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport {  mapCenter, setInitialMapZoom } from '../helpers/functions';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport AFG_boundary from '../assets/data/shapefiles/AFG_boundary.json';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport AFG_provinces from '../assets/data/shapefiles/AFG_provinces.json';\nimport AFG_watershed from '../assets/data/shapefiles/AFG_watershed.json';\nimport AFG_water_basin from '../assets/data/shapefiles/AFG_water_basin.json';\n\nconst FiltererdJsonFeature = () => {\n    const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n    const map = useMap();\n    const intialZoom=setInitialMapZoom()\n\n\n    const selectedFeatureData = () => {\n        switch (selectedView) {\n            case 'BASIN':\n                return AFG_water_basin.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'WATERSHED':\n                return AFG_watershed.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'PROVINCE':\n                return AFG_provinces.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'DISTRICT':\n                return AFG_districts.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'COUNTRY':\n                return AFG_boundary.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            default:\n                return null;\n        }\n    };\n    const filteredData=selectedFeatureData()\n\n\n\n    useEffect(() => {\n        if (filteredData) {\n            const bounds = L.geoJSON(filteredData.geometry).getBounds();\n            map.flyToBounds(bounds);\n            // map.setView(bounds.getCenter(), intialZoom);\n        }\n        else{\n            map.flyTo(mapCenter,intialZoom);\n        }\n    }, [filteredData, map,intialZoom]);\n\n\n    return (\n        <Pane name=\"selected_features\" style={{ zIndex: 1000 }}>\n        <GeoJSON\n            key={`${selectedFeatureName+selectedView}`}\n            style={{ fillColor: 'none', weight: 4, color: 'yellow', fillOpacity: \"0.4\" }}\n            data={filteredData}\n        />\n        </Pane>\n    );\n};\n\nexport default FiltererdJsonFeature;\n","import React, { useState } from 'react'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { MonthsArray, SelectedFeaturesAverageStats, YearsArray, fillDensityColor, getAnnualDataFromMonthly, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Plot from 'react-plotly.js';\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport MapLegend from '../components/MapLegend';\nimport tiff_raster from \"../assets/raster_data/clipped_chirps-v2.0.2023.tif\"\nimport RasterMap from '../components/RasterMap';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport DistrictStats from \"../assets/data/District_Stats.json\"\n\nconst PrecipitationPage = () => {\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n\n  const [selectedDataType, setSelectedDataType] = useState('PCP');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedRaster, setSelectedRaster] = useState('');\n  const [selectedTime, setSelectedTime] = useState(5);\n\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = DistrictStats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              ${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${intervalType === 'Monthly' ? DataItem[selectedDataType][selectedTime] : getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]}\n        <br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime !== \"\") {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find((item) => item.DISTRICT === name);\n        return DataItem && intervalType === 'Monthly' ? DataItem[selectedDataType][selectedTime] : getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n      return {\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        // fillColor: selectedTime !== '' ? Annual_Density(density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n  const handleRasterSelectionChange = (e) => {\n    setSelectedRaster(e.target.value);\n  };\n\n\n  const TableAnnualData = {\n    Year: YearsArray,\n    Yearly_AETI: getAnnualDataFromMonthly(SelectedFeaturesStatsData.AETI),\n    Yearly_PCP: getAnnualDataFromMonthly(SelectedFeaturesStatsData.PCP),\n    Yearly_RET: getAnnualDataFromMonthly(SelectedFeaturesStatsData.RET),\n    Yearly_ETB: SelectedFeaturesStatsData.ETB,\n    Yearly_ETG: SelectedFeaturesStatsData.ETG,\n  }\n\n\n\n\n\n  // const ChartColors = aridityIndex.map(value => {\n  //   if (value >= 1) {\n  //     return \"#F8DE22\";\n  //   } else if (value >= 0.6) {\n  //     return \"#F94C10\";\n  //   } else if (value >= 0.3) {\n  //     return \"#C70039\";\n  //   } else {\n  //     return \"#900C3F\";\n  //   }\n  // });\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n\n        <div className='left_panel_equal'>\n\n\n          <div className='card_container'>\n\n            <div className='defination_container'>\n              <h4>Precipitation and Potential ET</h4>\n            </div>\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.PCP,\n                  type: 'bar',\n                  name: \"Precipitation (mm/year)\",\n                  yaxis: 'y1',\n                },\n                {\n                  x: MonthsArray,\n                  // y: SelectedFeaturesStatsData.RET,\n                  y: SelectedFeaturesStatsData.RET.map(value => value / 10),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Potential ET (mm/year)\",\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Precipitation (mm/year)\",\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: \"Potential ET (mm/year)\",\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Aridity Index</h4>\n            </div>\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.AridityIndex,\n                  type: 'bar',\n                  // marker: {\n                  //   color: ChartColors,\n                  // },\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Aridity Index\"\n                },\n              }}\n              style={{ width: \"100%\", height: \"100%\" }}\n            />\n          </div>\n\n          <div className='card_container'>\n            {/* <div className='defination_container'>\n              <h4>Land Cover class area by district (ha)</h4>\n            </div> */}\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>Year</th>\n                    <th>Evapotranspiration (mm/year)</th>\n                    <th>Precipitation (mm/year)</th>\n                    <th>PCP - ET (mm/year)</th>\n                    <th>Potential ET (mm/year)</th>\n                    <th>Aridity Index</th>\n                    <th>ET Blue (mm/year)</th>\n                    <th>ET Green (mm/year)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {TableAnnualData.Year.map((year, index) => (\n                    <tr key={index}>\n                      <td>{year}</td>\n                      <td>{TableAnnualData.Yearly_AETI[index]}</td>\n                      <td>{TableAnnualData.Yearly_PCP[index]}</td>\n                      <td className={TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index] < 0 ? 'red-text' : ''}>\n                        {(TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index]).toFixed(1)}\n                      </td>\n                      <td>{(TableAnnualData.Yearly_RET[index] / 10).toFixed(2)}</td>\n                      <td>{(TableAnnualData.Yearly_PCP[index] / (TableAnnualData.Yearly_RET[index] / 10)).toFixed(2)}</td>\n                      <td>{TableAnnualData.Yearly_ETB[index].toFixed(1)}</td>\n                      <td>{TableAnnualData.Yearly_ETG[index].toFixed(1)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n\n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <div className='map_options_container'>\n                <select className='m-1' value={selectedDataType} onChange={handleSelectedDataChange}>\n                  <option value=\"PCP\">Precipitation</option>\n                  <option value=\"RET\">Potential ET</option>\n                  <option value=\"AridityIndex\">Average Aridity Index</option>\n                </select>\n\n                <select className='m-1' value={intervalType} onChange={handleIntervalTypeChange}>\n                  <option value=\"Monthly\">Monthly</option>\n                  <option value=\"Yearly\">Yearly</option>\n                </select>\n\n\n                <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n                  {renderTimeOptions(intervalType)}\n                </select>\n\n                <select className='m-1' value={selectedRaster} onChange={handleRasterSelectionChange}>\n                  <option value=\"\">Select Raster Map</option>\n                  <option value=\"pcp_annual_2023\">Annual PCP 2023</option>\n                  {/* <option value=\"Yearly\">Yearly</option> */}\n                </select>\n\n\n              </div>\n\n              {selectedRaster === 'pcp_annual_2023' ? (\n                <>\n                  <RasterMap\n                    colorPalatte=\"viridis\"\n                    maxValue={1000}\n                    minValue={1}\n                    url={tiff_raster}\n                    popopContent=\"PCP Value\"\n                  />\n                  <MapLegend ColorLegendsDataItem={\n                    {\n                      Title: \"Annual Precipitation 2023\",\n                      Unit: \"(mm)\",\n                      Value: [1, 200, 400, 700, 1000],\n                      Colors: [\"#fde725\", \"#5ec962\", \"#21918c\", \"#3b528b\", \"#440154\"],\n                      MaxValue: \"1002\",\n                      MinValue: \"36\",\n                    }\n                  } />\n                </>\n\n              ) : (\n                <>\n                  {selectedDataType && selectedTime !== '' && intervalType ? (\n                    <>\n                      {ColorLegendsDataItem && (\n                        <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                      )}\n                      <GeoJSON\n                        key={selectedDataType + selectedTime + intervalType}\n                        style={DistrictStyle}\n                        data={AFG_districts.features}\n                        onEachFeature={DistrictOnEachfeature}\n                      />\n\n                    </>\n\n                  ) : (\n                    <GeoJSON\n                      style={{\n                        fillColor: 'black',\n                        weight: 2,\n                        color: 'black',\n                        fillOpacity: \"0.001\",\n                        interactive: false\n                      }}\n                      data={AfghanistanCountry.features}\n                    />\n                  )}\n                </>\n\n              )}\n\n              <FiltererdJsonFeature />\n\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PrecipitationPage","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 4938;\nmodule.exports = webpackEmptyContext;"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_WaterProductivity","Monthly_WaterProductivity","Yearly_ETB","Monthly_ETB","Yearly_ETG","Monthly_ETG","_ref","ColorLegendsDataItem","gradientColors","join","firstColor","lastColor","length","_jsxs","className","children","_jsx","style","borderRight","concat","backgroundImage","borderLeft","url","colorPalatte","maxValue","minValue","popopContent","loading","setLoading","useState","map","useMap","popup","L","useEffect","options","renderer","plotty","displayMin","displayMax","applyDisplayRange","clampLow","clampHigh","colorScale","pane","onError","arrayBuffer","noDataValue","undefined","opacity","geotiffLayer","on","addTo","event","latlng","pixelValue","getValueAtLatLng","lat","lng","formattedPixelValue","toFixed","setLatLng","setContent","openOn","closePopup","removeLayer","off","FiltererdJsonFeature","selectedView","selectedFeatureName","useSelectedFeatureContext","intialZoom","setInitialMapZoom","filteredData","selectedFeatureData","AFG_water_basin","find","feature","properties","NAME","AFG_watershed","AFG_provinces","AFG_districts","AFG_boundary","bounds","geometry","getBounds","flyToBounds","flyTo","mapCenter","Pane","name","zIndex","GeoJSON","fillColor","weight","color","fillOpacity","data","PrecipitationPage","filteredFeaturesItems","SelectedFeaturesStatsData","SelectedFeaturesAverageStats","selectedDataType","setSelectedDataType","intervalType","setIntervalType","selectedRaster","setSelectedRaster","selectedTime","setSelectedTime","TableAnnualData","Year","YearsArray","getAnnualDataFromMonthly","AETI","PCP","RET","ETB","ETG","Plot","x","MonthsArray","y","type","yaxis","value","mode","marker","layout","xaxis","title","side","showgrid","yaxis2","overlaying","legend","orientation","width","height","AridityIndex","year","index","MapContainer","fullscreenControl","center","backgroundColor","border","margin","zoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","onChange","e","target","renderTimeOptions","_Fragment","RasterMap","tiff_raster","MapLegend","density","DataItem","DistrictStats","item","DISTRICT","getDensityFromData","fillDensityColor","dashArray","features","onEachFeature","layer","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","BaseMap","webpackEmptyContext","req","Error","code","keys","resolve","id","module","exports"],"sourceRoot":""}
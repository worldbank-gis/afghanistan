{"version":3,"file":"static/js/518.8f01a4a1.chunk.js","mappings":"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","sources":["pages/BiomassPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport SearchBar from \"../components/SearchBar\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport BaseMap from \"../components/BaseMap\";\nimport AfghanistanCountry from \"../assets/data/shapefiles/AFG_boundary.json\";\nimport {\n  fillDensityColor,\n  renderTimeOptions,\n  setDragging,\n  setInitialMapZoom,\n} from \"../helpers/functions\";\nimport Plot from \"react-plotly.js\";\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport { AFG_Data_Annual, AFG_Data_Monthly } from \"../assets/data/AFG_Data\";\nimport Zonal_Stat_NPP_Annual from \"../assets/data/Zonal_Stat_NPP_Annual.json\";\nimport Zonal_Stat_NPP_Monthly from \"../assets/data/Zonal_Stat_NPP_Monthly.json\";\nimport MapLegend from \"../components/MapLegend\";\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport Zonal_Stat_AETI_Annual from \"../assets/data/Zonal_Stat_AETI_Annual.json\"\nimport Zonal_Stat_AETI_Monthly from \"../assets/data/Zonal_Stat_AETI_Monthly.json\"\n\n\nconst BiomassPage = () => {\n  const [intervalType, setIntervalType] = useState(\"Monthly\");\n  const [selectedTime, setSelectedTime] = useState(\"2023-12\");\n  const [selectedDataType, setSelectedDataType] = useState(\"NPP\");\n\n\n  const YearOfSelectedTime = selectedTime && selectedTime.split('-')[0];\n\n  const chartData =\n    intervalType === \"Yearly\" ? AFG_Data_Annual : AFG_Data_Monthly;\n\n  let selectedDataset;\n\n  if (selectedDataType === \"NPP\") {\n    selectedDataset =\n      intervalType === \"Yearly\"\n        ? Zonal_Stat_NPP_Annual\n        : Zonal_Stat_NPP_Monthly;\n  }if (selectedDataType === \"AETI\") {\n    selectedDataset =\n      intervalType === \"Yearly\"\n        ? Zonal_Stat_AETI_Annual\n        : Zonal_Stat_AETI_Monthly;\n  }\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = selectedDataset.find(\n        (item) => item.NAME === feature.properties.NAME\n      );\n      const biomassProduction = (DataItem[selectedTime] * 22.22).toFixed(2);\n      console.log(DataItem[selectedTime]);\n\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              Biomass Production: ${biomassProduction} ${intervalType === \"Yearly\" ? \"(kg/ha/year)\" : \"(kg/ha/month)\"\n        }<br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime && selectedDataset) {\n      const getDensityFromData = (name) => {\n        const DataItem = selectedDataset.find((item) => item.NAME === name);\n        return DataItem ? DataItem[selectedTime] * 22.22 : null;\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n      return {\n        // fillColor: density ? selectedDensityFunc(density):\"none\",\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n\n\n  const AvgBiomassSortedData = Zonal_Stat_NPP_Annual.sort((a, b) => b[YearOfSelectedTime] - a[YearOfSelectedTime]);\n\n  return (\n    <div className=\"dasboard_page_container\">\n      <div className=\"main_dashboard\">\n        <div className=\"left_panel_equal\">\n          <div className=\"card_container\">\n            <select\n              className=\"m-1\"\n              value={selectedDataType}\n              onChange={handleSelectedDataChange}\n            >\n              <option value=\"NPP\">Biomass Production</option>\n              <option value=\"AETI\">Evapotranspiration</option>\n            </select>\n\n            <select\n              className=\"m-1\"\n              value={intervalType}\n              onChange={handleIntervalTypeChange}\n            >\n              <option value=\"Monthly\">Monthly</option>\n              <option value=\"Yearly\">Yearly</option>\n            </select>\n\n            <select\n              className=\"m-1\"\n              value={selectedTime}\n              onChange={(e) => setSelectedTime(e.target.value)}\n            >\n              {renderTimeOptions(intervalType)}\n            </select>\n          </div>\n\n          <div className=\"card_container\">\n            <div className=\"defination_container\">\n              <h4>Biomass production</h4>\n              <p>\n                Biomass estimation in agriculture is crucial for predicting\n                yields, monitoring crop health, optimizing harvest timing and\n                allocating resources efficiently. Biomass refers to organic\n                matter derived from living or recently living organisms. Biomass\n                production in agriculture refers to the harvesting of organic\n                matter from plants, including crops, grasses, and trees, which\n                can be used for various purposes such as food, feed, fiber and\n                biofuels.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"card_container\">\n            <Plot\n              data={[\n                {\n                  x: chartData.map((entry) => entry.Time),\n                  y: chartData.map((entry) => entry[selectedDataType] * 22.22),\n\n                  type: \"scatter\",\n                  mode: \"lines+markers\",\n                  marker: { color: \"red\" },\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: \"Year\",\n                },\n                yaxis: {\n                  title: `${selectedDataType === \"PCP\"\n                    ? \"Precipitation\"\n                    : selectedDataType === \"AETI\"\n                      ? \"Evapotranspiration\"\n                      : selectedDataType === \"RET\"\n                        ? \"Potential ET\"\n                        : selectedDataType === \"NPP\"\n                          ? \"Biomass Production\"\n                          : selectedDataType === \"AridityIndex\"\n                            ? \"Aridity Index\"\n                            : null\n                    } ${selectedDataType === \"AridityIndex\"\n                      ? \"\"\n                      : selectedDataType === \"NPP\"\n                        ? `(${intervalType === \"Yearly\"\n                          ? \"kg/ha/year\"\n                          : \"kg/ha/month\"\n                        })`\n                        : `(${intervalType === \"Yearly\" ? \"mm/year\" : \"mm/month\"\n                        })`\n                    }`,\n                },\n              }}\n              style={{ width: \"100%\", height: \"calc(100% - 100px)\" }}\n            />\n          </div>\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              <h4>Water Productivity</h4>\n            </div>\n            <Plot\n              data={[\n                {\n                  x: chartData.map((entry) => entry.Time),\n                  y: chartData.map((entry) => (entry['NPP'] * 22.22 * 0.0001) / (entry['AETI'] * 0.001)),\n\n                  type: \"bar\",\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: \"Year\",\n                },\n                yaxis: {\n                  title: 'Average Water Productivity (kg/m3)'\n                },\n              }}\n              style={{ width: \"100%\", height: \"calc(100% - 100px)\" }}\n            />\n          </div>\n\n          <div className=\"card_container\">\n            <div className='defination_container'>\n              {/* <h4>Water Productivity</h4> */}\n            </div>\n            <Plot\n              data={[\n                {\n                  y: AvgBiomassSortedData.map((entry) => entry.NAME),\n                  x: AvgBiomassSortedData.map((entry) => entry[YearOfSelectedTime]*22.22),\n\n                  type: \"bar\",\n                  orientation: 'h',\n                },\n              ]}\n              layout={{\n                yaxis: {\n                  title: \"District Name\",\n                  autorange: \"reversed\",\n                },\n                xaxis: {\n                  title: `Average Biomass Mean Annual (kg/ha/year) for Year ${YearOfSelectedTime}`\n                },\n                margin: {\n                  l: 150, // Adjust the top margin as needed\n              },\n              }}\n              style={{ width: \"100%\", height: \"1800px\" }}\n            />\n          </div>\n        </div>\n\n        <div className=\"right_panel_equal\">\n          <div className=\"card_container\" style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                backgroundColor: \"white\",\n                border: \"none\",\n                margin: \"auto\",\n              }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[\n                [23, 49],\n                [41, 82],\n              ]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <SearchBar />\n\n\n\n\n\n              {selectedDataType === \"NPP\" && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n              ) : (\n                <GeoJSON\n                  style={{\n                    fillColor: \"black\",\n                    weight: 2,\n                    color: \"black\",\n                    fillOpacity: \"0.001\",\n                    interactive: false,\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n\n              <BaseMap />\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BiomassPage;\n"],"names":["BiomassPage","intervalType","setIntervalType","useState","selectedTime","setSelectedTime","selectedDataType","setSelectedDataType","YearOfSelectedTime","split","chartData","AFG_Data_Annual","AFG_Data_Monthly","selectedDataset","Zonal_Stat_NPP_Annual","Zonal_Stat_NPP_Monthly","Zonal_Stat_AETI_Annual","Zonal_Stat_AETI_Monthly","ColorLegendsDataItem","ColorLegendsData","concat","AvgBiomassSortedData","sort","a","b","_jsx","className","children","_jsxs","value","onChange","e","target","renderTimeOptions","Plot","data","x","map","entry","Time","y","type","mode","marker","color","layout","xaxis","title","yaxis","style","width","height","NAME","orientation","autorange","margin","l","MapContainer","fullscreenControl","center","backgroundColor","border","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","SearchBar","_Fragment","MapLegend","GeoJSON","feature","density","name","DataItem","find","item","getDensityFromData","properties","fillColor","fillDensityColor","weight","opacity","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","biomassProduction","toFixed","console","log","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","BaseMap"],"sourceRoot":""}
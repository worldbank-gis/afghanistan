{"version":3,"file":"static/js/192.8c2bafd7.chunk.js","mappings":"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","sources":["components/charts/TotalConsumptionChart.js","components/charts/UnitConsumptionChart.js","pages/EvapotranspirationPage.js"],"sourcesContent":["import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst TotalConsumptionChart = ({ filteredFeaturesItems }) => {\n\n    // Calculate total consumptions and sort districts based on total consumption\n    const districtData = filteredFeaturesItems.map((entry) => {\n        const totalConsumption = (calculateSumOfArray(getAnnualDataFromMonthly(entry.AETI)) * 0.001 * entry.AREA / 1000000000).toFixed(2);\n        return { district: entry.DISTRICT, totalConsumption };\n    });\n    districtData.sort((a, b) => b.totalConsumption - a.totalConsumption);\n\n    const districtNames = districtData.map((data) => data.district);\n    const totalConsumptions = districtData.map((data) => data.totalConsumption);\n\n    // Calculate the minimum height based on the number of districts\n    const minHeightPerDistrict = 20; // Adjust this value as needed\n    const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Total Consumption (BCM)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} BCM`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: totalConsumptions\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default TotalConsumptionChart","import React from 'react'\nimport Chart from \"react-apexcharts\";\nimport { calculateAverageOfArray, calculateSumOfArray, getAnnualDataFromMonthly } from '../../helpers/functions';\n\nconst UnitConsumptionChart = ({ filteredFeaturesItems }) => {\n\n    const districtData = filteredFeaturesItems.map((entry) => ({\n        name: entry.DISTRICT,\n        UnitConsumptions: calculateAverageOfArray((entry.AETI.map((aeti) => aeti * 10))).toFixed(2)\n    }));\n\n    districtData.sort((a, b) => b.UnitConsumptions - a.UnitConsumptions);\n\n\n    const districtNames = districtData.map((entry) => entry.name);\n    const UnitConsumptions = districtData.map((entry) => entry.UnitConsumptions);\n\n    // const districtNames = filteredFeaturesItems.map((entry) => entry.DISTRICT);\n    // const UnitConsumptions= filteredFeaturesItems.map((entry) => (calculateAverageOfArray((entry.AETI)) * 10) );\n\n\n   const minHeightPerDistrict = 20; // Adjust this value as needed\n    const minHeight = Math.max(minHeightPerDistrict * districtNames.length, 300); // Minimum height of 300px\n\n\n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'bar',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: false\n                    }\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    categories: districtNames,\n                    title: {\n                        text: 'Unit Consumption (m3/ha)',\n                        offsetX: 10\n                    },\n                },\n                yaxis: {\n                    title: {\n                        text: 'District Name',\n                        offsetY: 10\n                    },\n                    // reversed: true\n                },\n\n                tooltip: {\n                    y: {\n                        formatter: function (val) {\n                            return `${val} (m3/ha)`;\n                        }\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={[{\n                data: UnitConsumptions\n            }]}\n            type=\"bar\"\n            width=\"100%\"\n            // height=\"4400px\"\n            height={minHeight + 'px'} // Set the height dynamically\n        />\n    );\n};\n\n\nexport default UnitConsumptionChart","import React, { useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { MonthsArray, SelectedFeaturesAverageStats, YearsArray, calculateAverageOfArray, calculateSumOfArray, fillDensityColor, getAnnualDataFromMonthly, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Plot from 'react-plotly.js';\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport MapLegend from '../components/MapLegend';\nimport { ColorLegendsData } from \"../assets/data/ColorLegendsData\";\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport HorizontalBarChart from '../components/charts/TotalConsumptionChart';\nimport UnitConsumptionChart from '../components/charts/UnitConsumptionChart';\nimport TotalConsumptionChart from '../components/react-plotly-charts/PlotlyTotalConsumptionChart';\nimport DistrictStats from \"../assets/data/District_Stats.json\"\n\n\nconst EvapotranspirationPage = () => {\n  const [selectedDataType, setSelectedDataType] = useState('AETI');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState(5);\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = DistrictStats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              ${selectedDataType === 'PCP' ? 'Precipitation' : selectedDataType === 'AETI' ? 'Evapotranspiration' : selectedDataType === 'RET' ? 'Potential ET' : selectedDataType === 'AridityIndex' ? 'Aridity Index' : null}  ${selectedDataType === 'AridityIndex' ? '' : `(${intervalType === 'Yearly' ? 'mm/year' : 'mm/month'})`}: ${intervalType ==='Monthly' ? DataItem[selectedDataType][selectedTime]:getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]}\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime  && selectedDataType) {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find((item) => item.DISTRICT === name);\n        return DataItem && intervalType ==='Monthly' ? DataItem[selectedDataType][selectedTime]:getAnnualDataFromMonthly(DataItem[selectedDataType])[selectedTime]\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n\n      return {\n        // fillColor: selectedDensityFunc(density),\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n\n\n  const sortedTotalConsumptionItems = filteredFeaturesItems.sort((a, b) => {\n    const aX = (calculateAverageOfArray(getAnnualDataFromMonthly(a.AETI)) * 0.001 * a.AREA) / 1000000000;\n    const bX = (calculateAverageOfArray(getAnnualDataFromMonthly(b.AETI)) * 0.001 * b.AREA) / 1000000000;\n    return bX - aX;\n  });\n\n\n\n\n\n  const TableAnnualData = {\n    Year: YearsArray,\n    Yearly_AETI: getAnnualDataFromMonthly(SelectedFeaturesStatsData.AETI),\n    Yearly_PCP: getAnnualDataFromMonthly(SelectedFeaturesStatsData.PCP),\n    Yearly_RET: getAnnualDataFromMonthly(SelectedFeaturesStatsData.RET),\n    Yearly_ETB: SelectedFeaturesStatsData.ETB,\n    Yearly_ETG: SelectedFeaturesStatsData.ETG,\n  }\n\n\n\n\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              <h4>Evapotranspiration (ET)</h4>\n              <p>\n                Evapotranspiration is a key component of the hydrological cycle. It refers to the water that is lost to the atmosphere through the vaporization process. Water that becomes evapotranspired is no longer available for further use, hence it is commonly referred to as consumed water in the water accounting terminology.\n              </p>\n            </div>\n            {/* <div className='defination_container'>\n              <h4>Potential ET (PET)</h4>\n              <p>\n              Potential evapotranspiration, or PET, represents the combined loss of water through:  1) the plant’s process of transpiration via its vascular system, and 2) evaporation of water from the earth’s surface.  Both are influenced by temperature, humidity, sunlight, and wind.  PET values indicate the amount of water that has been lost, and thus needs to be replaced, through irrigation and/or rainfall.\n            </p>\n            </div> */}\n          </div>\n\n          <div className='card_container'>\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.AETI,\n                  fill: 'tozeroy',\n                  type: 'scatter',\n                  name: \"Evapotranspiration (mm/month)\",\n                  yaxis: 'y1',\n                },\n                {\n                  x: MonthsArray,\n                  // y: SelectedFeaturesStatsData.RET,\n                  y: SelectedFeaturesStatsData.RET.map(value => value / 10),\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  name: \"Potential ET (mm/month)\",\n                  marker: { color: 'red' },\n                  yaxis: 'y2',\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: 'Year',\n                },\n                yaxis: {\n                  title: \"Evapotranspiration (mm/month)\",\n                  side: 'left',\n                  showgrid: false,\n                },\n                yaxis2: {\n                  title: \"Potential ET (mm/month)\",\n                  side: 'right',\n                  overlaying: 'y',\n                  showgrid: false,\n                },\n                legend: {\n                  orientation: 'h',\n                  x: 0,\n                  y: 1.2,\n                },\n              }}\n\n              style={{ width: \"100%\", height: \"100%)\" }}\n            />\n          </div>\n\n          <div className='card_container'>\n            <div className='defination_container'>\n              {/* <h4>Land Cover class area by district (ha)</h4> */}\n            </div>\n            <div className='item_table_container'>\n              <table className='item_table'>\n                <thead>\n                  <tr>\n                    <th>Year</th>\n                    <th>Total Evapotranspiration (BCM/year)</th>\n                    <th>ET Blue (BCM/year)</th>\n                    <th>ET Green (BCM/year)</th>\n                    <th>Precipitation (PCP) (BCM/year)</th>\n                    <th>PCP - ET (BCM/year)</th>\n                    <th>Portion of PCP locally consumed (%)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {TableAnnualData.Year.map((year, index) => (\n                    <tr key={index}>\n                      <td>{year}</td>\n                      <td>{(TableAnnualData.Yearly_AETI[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td>{(TableAnnualData.Yearly_ETB[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td>{(TableAnnualData.Yearly_ETG[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td>{(TableAnnualData.Yearly_PCP[index] * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(1)}</td>\n                      <td className={TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index] < 0 ? 'red-text' : ''}>\n                        {((TableAnnualData.Yearly_PCP[index] - TableAnnualData.Yearly_AETI[index]) * 0.001 * SelectedFeaturesStatsData.AREA / 1000000000).toFixed(2)}\n                      </td>\n\n                      <td>{(TableAnnualData.Yearly_AETI[index] * 100 / TableAnnualData.Yearly_PCP[index]).toFixed(1)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          <div className=\"card_container\" style={{ maxHeight: \"800px\", overflow: \"scroll\" }}>\n\n            <div className='defination_container'>\n              <h4>Total Consumption (BCM)</h4>\n            </div>\n\n            <HorizontalBarChart filteredFeaturesItems={filteredFeaturesItems} />\n          </div>\n\n          <div className=\"card_container\" style={{ maxHeight: \"800px\", overflow: \"scroll\" }}>\n\n            <div className='defination_container'>\n            <h4>Unit Consumption (m<sup>3</sup>/ha)</h4>\n            </div>\n\n            <UnitConsumptionChart filteredFeaturesItems={filteredFeaturesItems} />\n          </div>\n\n          \n        </div>\n\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n\n              <div className='map_options_container'>\n\n                <div>\n                  <select className='m-1' value={selectedDataType} onChange={handleSelectedDataChange}>\n                    <option value=\"AETI\">Evapotranspiration</option>\n                    <option value=\"RET\">Potential ET</option>\n\n                  </select>\n                </div>\n                <div>\n                  <select className='m-1' value={intervalType} onChange={handleIntervalTypeChange}>\n                    <option value=\"Monthly\">Monthly</option>\n                    <option value=\"Yearly\">Yearly</option>\n                  </select>\n                </div>\n\n                <div>\n                  <select className='m-1' value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>\n                    {renderTimeOptions(intervalType)}\n                  </select>\n                </div>\n\n\n              </div>\n\n\n\n\n\n              {selectedDataType && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n\n              ) : (\n                \n                <GeoJSON\n                  style={{\n                    fillColor: 'black',\n                    weight: 2,\n                    color: 'black',\n                    fillOpacity: \"0.001\",\n                    interactive: false\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n\n              <FiltererdJsonFeature />\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default EvapotranspirationPage"],"names":["_ref","filteredFeaturesItems","districtData","map","entry","totalConsumption","calculateSumOfArray","getAnnualDataFromMonthly","AETI","AREA","toFixed","district","DISTRICT","sort","a","b","districtNames","data","totalConsumptions","minHeight","Math","max","length","_jsx","Chart","options","chart","type","stacked","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","dataLabels","xaxis","categories","title","text","offsetX","yaxis","offsetY","tooltip","y","formatter","val","concat","responsive","breakpoint","legend","position","series","width","height","name","UnitConsumptions","calculateAverageOfArray","aeti","EvapotranspirationPage","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","selectedView","selectedFeatureName","useSelectedFeatureContext","SelectedFeaturesStatsData","SelectedFeaturesAverageStats","ColorLegendsDataItem","ColorLegendsData","aX","TableAnnualData","Year","YearsArray","Yearly_AETI","Yearly_PCP","PCP","Yearly_RET","RET","Yearly_ETB","ETB","Yearly_ETG","ETG","className","children","_jsxs","Plot","x","MonthsArray","fill","value","mode","marker","color","layout","side","showgrid","yaxis2","overlaying","orientation","style","year","index","maxHeight","overflow","HorizontalBarChart","UnitConsumptionChart","MapContainer","fullscreenControl","center","backgroundColor","border","margin","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","onChange","e","target","renderTimeOptions","_Fragment","MapLegend","GeoJSON","feature","density","DataItem","DistrictStats","find","item","getDensityFromData","properties","NAME","fillColor","fillDensityColor","weight","opacity","dashArray","fillOpacity","AFG_districts","features","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","FiltererdJsonFeature","BaseMap"],"sourceRoot":""}
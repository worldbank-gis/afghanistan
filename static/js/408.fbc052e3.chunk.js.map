{"version":3,"file":"static/js/408.fbc052e3.chunk.js","mappings":"8GAAO,MAAMA,EAAmB,CAC5BC,WAAW,CACPC,MAAO,gBACPC,KAAM,YACNC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,MACVC,SAAU,MAEdC,YAAY,CACRN,MAAO,gBACPC,KAAM,aACNC,MAAO,CAAC,GAAI,GAAI,EAAG,GACnBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,KACVC,SAAU,KAGdE,YAAY,CACRP,MAAO,0BACPC,KAAM,YACNC,MAAO,CAAC,IAAK,IAAK,GAAI,IACtBC,OAAQ,CAAC,UAAU,UAAW,UAAW,UAAW,WACpDC,SAAU,MACVC,SAAU,MAEdG,aAAa,CACTR,MAAO,0BACPC,KAAM,aACNC,MAAO,CAAC,GAAI,EAAG,EAAG,GAClBC,OAAQ,CAAC,UAAU,UAAW,UAAW,UAAW,WACpDC,SAAU,KACVC,SAAU,KAGdI,WAAW,CACPT,MAAO,eACPC,KAAM,YACNC,MAAO,CAAC,KAAM,KAAM,KAAM,KAC1BC,OAAQ,CAAC,UAAU,UAAW,UAAW,UAAW,WACpDC,SAAU,OACVC,SAAU,OAEdK,YAAY,CACRV,MAAO,eACPC,KAAM,aACNC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,CAAC,UAAU,UAAW,UAAW,UAAW,WACpDC,SAAU,MACVC,SAAU,MAEdM,oBAAoB,CAChBX,MAAO,gBACPC,KAAM,GACNC,MAAO,CAAC,GAAI,GAAI,GAAI,IACpBC,OAAQ,CAAC,UAAW,UAAW,UAAU,UAAW,WACpDC,SAAU,KACVC,SAAU,MAEdO,qBAAqB,CACjBZ,MAAO,gBACPC,KAAM,GACNC,MAAO,CAAC,GAAI,GAAI,EAAG,IACnBC,OAAQ,CAAC,UAAW,UAAW,UAAU,UAAW,WACpDC,SAAU,KACVC,SAAU,OAGdQ,WAAW,CACPb,MAAO,6BACPC,KAAM,eACNC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,CAAC,UAAU,UAAY,UAAU,UAAW,WACpDC,SAAU,OACVC,SAAU,OAEdS,YAAY,CACRd,MAAO,6BACPC,KAAM,gBACNC,MAAO,CAAC,EAAG,EAAG,EAAG,IACjBC,OAAQ,CAAC,UAAU,UAAY,UAAU,UAAW,WACpDC,SAAU,MACVC,SAAU,MAEdU,yBAAyB,CACrBf,MAAO,6BACPC,KAAM,GACNC,MAAO,CAAC,EAAG,GAAK,GAAK,KACrBC,OAAQ,CAAC,UAAW,UAAW,UAAW,WAC1CC,SAAU,IACVC,SAAU,QAEdW,0BAA0B,CACtBhB,MAAO,6BACPC,KAAM,GACNC,MAAO,CAAC,EAAG,GAAK,GAAK,KACrBC,OAAQ,CAAC,UAAW,UAAW,UAAW,WAC1CC,SAAU,IACVC,SAAU,QAIdY,WAAW,CACPjB,MAAO,UACPC,KAAM,YACNC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,MACVC,SAAU,MAEda,YAAY,CACRlB,MAAO,UACPC,KAAM,aACNC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,MACVC,SAAU,MAEdc,WAAW,CACPnB,MAAO,WACPC,KAAM,YACNC,MAAO,CAAC,IAAK,IAAK,GAAI,IACtBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,MACVC,SAAU,MAEde,YAAY,CACRpB,MAAO,WACPC,KAAM,aACNC,MAAO,CAAC,IAAK,IAAK,GAAI,IACtBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAU,WACpDC,SAAU,MACVC,SAAU,M,sDClIlB,MA2BA,EA3BkBgB,IAA+B,IAA9B,qBAAEC,GAAsBD,EACvC,MAAM,MAAErB,EAAK,KAAEC,EAAI,MAAEC,EAAK,OAAEC,EAAM,SAAEC,EAAQ,SAAEC,GAAaiB,EACrDC,EAAiBpB,EAAOqB,KAAK,MAC7BC,EAAatB,EAAO,GACpBuB,EAAYvB,EAAOA,EAAOwB,OAAS,GAEzC,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC3BF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CACK9B,EAAO,IACPC,QAGT2B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAoBG,MAAO,CAACC,YAAY,cAADC,OAAgBR,OAClEK,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAeG,MAAO,CAAEG,gBAAgB,4BAADD,OAA8BX,EAAc,SAClGQ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAqBG,MAAO,CAACI,WAAW,cAADF,OAAgBT,UAE1EG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,mBAAkBC,SAAEzB,KACjCuB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,mBAAkBC,SAAA,CAAC,IAAE1B,UAEpC,C,sKCdd,MAiDA,EAjD6BiC,KACzB,MAAM,aAAEC,EAAY,oBAAEC,IAAwBC,EAAAA,EAAAA,KACxCC,GAAMC,EAAAA,EAAAA,MACNC,GAAWC,EAAAA,EAAAA,MAmBXC,EAhBsBC,MACxB,OAAQR,GACJ,IAAK,QACD,OAAOS,EAAAA,SAAyBC,MAAKC,GAAWA,EAAQC,WAAWC,OAASZ,IAChF,IAAK,YACD,OAAOa,EAAAA,SAAuBJ,MAAKC,GAAWA,EAAQC,WAAWC,OAASZ,IAC9E,IAAK,WACD,OAAOc,EAAAA,SAAuBL,MAAKC,GAAWA,EAAQC,WAAWC,OAASZ,IAC9E,IAAK,WACD,OAAOe,EAAAA,SAAuBN,MAAKC,GAAWA,EAAQC,WAAWC,OAASZ,IAC9E,IAAK,UACD,OAAOgB,EAAAA,SAAsBP,MAAKC,GAAWA,EAAQC,WAAWC,OAASZ,IAC7E,QACI,OAAO,KACf,EAEeO,GAgBnB,OAZAU,EAAAA,EAAAA,YAAU,KACN,GAAIX,EAAc,CACd,MAAMY,EAASC,EAAAA,QAAUb,EAAac,UAAUC,YAChDnB,EAAIoB,YAAYJ,EAEpB,MAEIhB,EAAIqB,MAAMC,EAAAA,GAAUpB,EACxB,GACD,CAACE,EAAcJ,EAAIE,KAIlBZ,EAAAA,EAAAA,KAACiC,EAAAA,EAAI,CAACC,KAAK,oBAAoBjC,MAAO,CAAEkC,OAAQ,KAAOpC,UACvDC,EAAAA,EAAAA,KAACoC,EAAAA,EAAO,CAEJnC,MAAO,CAAEoC,UAAW,OAAQC,OAAQ,EAAGC,MAAO,SAAUC,YAAa,OACrEC,KAAM3B,GAAa,GAAAX,OAFXK,EAAoBD,KAIzB,C,oOCpCf,MAsNA,EAtN0BmC,KACxB,MAAOC,EAAkBC,IAAuBC,EAAAA,EAAAA,UAAS,sBAClDC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,WAC1CG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,IAC3C,sBAAEK,EAAqB,aAAE3C,EAAY,oBAAEC,IAAwBC,EAAAA,EAAAA,KAC/D0C,GAA4BC,EAAAA,EAAAA,IAA6BF,GAkC/D,MAAM3D,EAAuBxB,EAAAA,EAAiB,GAADoC,OAAI2C,EAAY,KAAA3C,OAAIwC,IA+BjE,OACE3C,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAAyBC,UACtCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAQ/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACjCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kCAGNC,EAAAA,EAAAA,KAACqD,EAAAA,EAAI,CACHZ,KAAM,CACJ,CACEa,EAAGC,EAAAA,GACHC,EAAGL,EAA0BM,IAAI/C,KAAI,CAACgD,EAAOC,IAAmB,OAARD,EAAiB,GAAQP,EAA0BS,KAAKD,KAChHE,KAAM,UACNC,KAAM,gBACNC,OAAQ,CAAExB,MAAO,WAGrByB,OAAQ,CACNC,MAAO,CACLC,MAAO,QAETC,MAAO,CACLD,MAAO,+BAqBXjE,MAAO,CAAEmE,MAAO,OAAQC,OAAQ,8BAKtCrE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,UAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAiBG,MAAO,CAAEoE,OAAQ,QAAStE,UACxDF,EAAAA,EAAAA,MAACyE,EAAAA,EAAY,CACXC,mBAAmB,EACnBC,OAAQ,CAAC,GAAI,IACbvE,MAAO,CAAEmE,MAAO,OAAQC,OAAQ,OAAQI,gBAAiB,QAASC,OAAQ,OAAQC,OAAQ,QAC1FC,MAAM/D,EAAAA,EAAAA,MACNgE,UAAW,CAAC,CAAC,GAAI,IAAK,CAAC,GAAI,KAE3BC,SAASjE,EAAAA,EAAAA,MACTkE,UAAU,EACVC,UAAUC,EAAAA,EAAAA,MAGVC,iBAAiB,EAAMnF,SAAA,EAEvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAGpCC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,MAAM4D,MAAOf,EAAkBwC,SApF7BC,IAChCxC,EAAoBwC,EAAEC,OAAO3B,MAAM,EAmF6D3D,UAClFC,EAAAA,EAAAA,KAAA,UAAQ0D,MAAM,oBAAmB3D,SAAC,kCAIpCC,EAAAA,EAAAA,KAAA,UACEF,UAAU,MACV4D,MAAOV,EACPmC,SAAWC,GAAMnC,EAAgBmC,EAAEC,OAAO3B,OAAO3D,UAEhDuF,EAAAA,EAAAA,IAAkBxC,QASD,sBAArBH,GAA6D,KAAjBK,GAAuBF,GAClEjD,EAAAA,EAAAA,MAAA0F,EAAAA,SAAA,CAAAxF,SAAA,CACGR,IACCS,EAAAA,EAAAA,KAACwF,EAAAA,EAAS,CAACjG,qBAAsBA,KAGnCS,EAAAA,EAAAA,KAACoC,EAAAA,EAAO,CAENnC,MAnIKiB,IACrB,GAAI8B,EAAe,CACjB,MAIMyC,EAJsBvD,KAC1B,MAAMwD,EAAWC,EAAc1E,MAAM2E,GAASA,EAAKC,WAAa3D,IAChE,OAAOwD,EAA2C,MAAhCA,EAAc,IAAE1C,GAAwB,GAAM0C,EAAe,KAAE1C,GAAgB,IAAI,EAEvF8C,CAAmB5E,EAAQC,WAAWC,MACtD,MAAO,CAELiB,UAAW9C,GAAuBwG,EAAAA,EAAAA,IAAiBxG,EAAsBkG,GAAW,OACpFnD,OAAQ,EACR0D,QAAS,EACTzD,MAAO,QACP0D,UAAW,IACXzD,YAAa,EAEjB,GAoHgBC,KAAMlB,EAAAA,SACN2E,cAjKlB,SAA+BhF,EAASiF,GACtCA,EAAMC,GAAG,aAAa,SAAUhB,GAC9B,MAAMM,EAAWC,EAAc1E,MAC5B2E,GAASA,EAAKC,WAAa3E,EAAQC,WAAWC,OAG3CiF,GAAqD,MAAhCX,EAAc,IAAE1C,GAAwB,GAAM0C,EAAe,KAAE1C,IAAesD,QAAQ,GAG3GC,EAAY,gDAAApG,OAEEe,EAAQC,WAAWC,KAAI,qDAAAjB,OACLkG,EAAiB,KAAAlG,OAAqB,WAAjB2C,EAA4B,eAAiB,gBAAe,yCAIvHqD,EAAMK,YAAYD,EAAc,CAAEE,QAAQ,IAC1CN,EAAMO,aACR,IAEAP,EAAMC,GAAG,YAAY,WACnBD,EAAMQ,cACR,GACF,GAuIuBhE,EAAmBK,EAAeF,OAO3C9C,EAAAA,EAAAA,KAACoC,EAAAA,EAAO,CACNnC,MAAO,CACLoC,UAAW,QACXC,OAAQ,EACRC,MAAO,QACPC,YAAa,QACboE,aAAa,GAEfnE,KAAMoE,EAAAA,YAKV7G,EAAAA,EAAAA,KAACM,EAAAA,EAAoB,KASrBN,EAAAA,EAAAA,KAAC8G,EAAAA,EAAO,eAQZ,C","sources":["assets/data/ColorLegendsData.js","components/MapLegend.js","pages/FiltererdJsonFeature.js","pages/WaterProductivity.js"],"sourcesContent":["export const ColorLegendsData = {\n    Yearly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/year)\",\n        Value: [350, 230, 150, 80],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"350\",\n        MinValue: \"80\",\n    },\n    Monthly_PCP:{\n        Title: \"Precipitation\",\n        Unit: \"(mm/month)\",\n        Value: [15, 10, 5, 1],\n        Colors: [\"#011f4b\", \"#03396c\", \"#005b96\", \"#6497b1\",\"#b3cde0\"],\n        MaxValue: \"15\",\n        MinValue: \"1\",\n    },\n\n    Yearly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/year)\",\n        Value: [400, 100, 80, 20],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_AETI:{\n        Title: \"Evapotranspiration (ET)\",\n        Unit: \"(mm/month)\",\n        Value: [20, 6, 4, 2],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"20\",\n        MinValue: \"2\",\n    },\n\n    Yearly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/year)\",\n        Value: [1800, 1500, 1200, 800],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"1800\",\n        MinValue: \"800\",\n    },\n    Monthly_RET:{\n        Title: \"Potential ET\",\n        Unit: \"(mm/month)\",\n        Value: [280, 200, 150, 50],\n        Colors: [\"#A94438\",\"#D04848\", \"#F3B95F\", \"#FDE767\", \"#6895D2\"],\n        MaxValue: \"280\",\n        MinValue: \"50\",\n    },\n    Yearly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [80, 50, 20, 10],\n        Colors: [\"#802101\", \"#f24207\", \"#fca132\",\"#fcd432\", \"#eff24b\"],\n        MaxValue: \"80\",\n        MinValue: \"10\",\n    },\n    Monthly_AridityIndex:{\n        Title: \"Aridity Index\",\n        Unit: \"\",\n        Value: [15, 10, 5, 0.2],\n        Colors: [\"#802101\", \"#f24207\", \"#fca132\",\"#fcd432\", \"#eff24b\"],\n        MaxValue: \"15\",\n        MinValue: \"0.2\",\n    },\n    // NPP*22022\n    Yearly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/year)\",\n        Value: [360, 300, 200, 13],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"8000\",\n        MinValue: \"300\",\n    },\n    Monthly_NPP:{\n        Title: \"Average Biomass Production\",\n        Unit: \"(kg/ha/month)\",\n        Value: [9, 6, 2, 0.4],\n        Colors: [\"#416D19\",\"#9BCF53\",  \"#BFEA7C\",\"#b6ff7e\", \"#FFF67E\"],\n        MaxValue: \"200\",\n        MinValue: \"10\",\n    },\n    Yearly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n    Monthly_WaterProductivity:{\n        Title: \"Biomass Water Productivity\",\n        Unit: \"\",\n        Value: [1, 0.7, 0.3, 0.01],\n        Colors: [\"#40513B\", \"#609966\", \"#9DC08B\", \"#EDF1D6\"],\n        MaxValue: \"1\",\n        MinValue: \"0.01\",\n    },\n\n\n    Yearly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/year)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Monthly_ETB:{\n        Title: \"ET Blue\",\n        Unit: \"(mm/month)\",\n        Value: [400, 300, 100, 20],\n        Colors: [\"#011f4b\", \"#165794\", \"#0a97f2\", \"#6497b1\",\"#dcebf5\"],\n        MaxValue: \"400\",\n        MinValue: \"20\",\n    },\n    Yearly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/year)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n    Monthly_ETG:{\n        Title: \"ET Green\",\n        Unit: \"(mm/month)\",\n        Value: [180, 120, 50, 20],\n        Colors: [\"#50623A\", \"#518556\", \"#739072\", \"#86A789\",\"#D2E3C8\"],\n        MaxValue: \"180\",\n        MinValue: \"20\",\n    },\n\n\n}\n    \n","import React from 'react';\n\nconst MapLegend = ({ ColorLegendsDataItem }) => {\n    const { Title, Unit, Value, Colors, MaxValue, MinValue } = ColorLegendsDataItem;\n    const gradientColors = Colors.join(', ');\n    const firstColor = Colors[0];\n    const lastColor = Colors[Colors.length - 1];\n\n    return (\n        <div className=\"legend_container\">\n            <div className=\"legend_heading\">\n                <p>\n                    {Title}{\" \"}\n                    {Unit}\n                </p>\n            </div>\n            <div className=\"legend-color-container\">\n            <div className='legend_left_arrow' style={{borderRight: `25px solid ${lastColor}`}}></div>\n                <div className='legend-color' style={{ backgroundImage: `linear-gradient(to left, ${gradientColors})` }}></div>\n                <div className='legend_right_arrow' style={{borderLeft: `25px solid ${firstColor}`}}></div>\n            </div>\n            <div className=\"legend-item\">\n                <p className=\"legend-num-value\">{MinValue}</p>\n                <p className=\"legend-num-value\"> {MaxValue}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default MapLegend;\n","import React, { useEffect } from 'react';\nimport { GeoJSON, Pane, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport {  mapCenter, setInitialMapZoom } from '../helpers/functions';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\nimport AFG_boundary from '../assets/data/shapefiles/AFG_boundary.json';\nimport AFG_districts from '../assets/data/shapefiles/AFG_districts.json';\nimport AFG_provinces from '../assets/data/shapefiles/AFG_provinces.json';\nimport AFG_watershed from '../assets/data/shapefiles/AFG_watershed.json';\nimport AFG_water_basin from '../assets/data/shapefiles/AFG_water_basin.json';\n\nconst FiltererdJsonFeature = () => {\n    const { selectedView, selectedFeatureName } = useSelectedFeatureContext();\n    const map = useMap();\n    const intialZoom=setInitialMapZoom()\n\n\n    const selectedFeatureData = () => {\n        switch (selectedView) {\n            case 'BASIN':\n                return AFG_water_basin.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'WATERSHED':\n                return AFG_watershed.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'PROVINCE':\n                return AFG_provinces.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'DISTRICT':\n                return AFG_districts.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            case 'COUNTRY':\n                return AFG_boundary.features.find(feature => feature.properties.NAME === selectedFeatureName);\n            default:\n                return null;\n        }\n    };\n    const filteredData=selectedFeatureData()\n\n\n\n    useEffect(() => {\n        if (filteredData) {\n            const bounds = L.geoJSON(filteredData.geometry).getBounds();\n            map.flyToBounds(bounds);\n            // map.setView(bounds.getCenter(), intialZoom);\n        }\n        else{\n            map.flyTo(mapCenter,intialZoom);\n        }\n    }, [filteredData, map,intialZoom]);\n\n\n    return (\n        <Pane name=\"selected_features\" style={{ zIndex: 1000 }}>\n        <GeoJSON\n            key={`${selectedFeatureName+selectedView}`}\n            style={{ fillColor: 'none', weight: 4, color: 'yellow', fillOpacity: \"0.4\" }}\n            data={filteredData}\n        />\n        </Pane>\n    );\n};\n\nexport default FiltererdJsonFeature;\n","import React, { useState } from 'react'\nimport SearchBar from '../components/SearchBar'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport AfghanistanCountry from '../assets/data/shapefiles/AFG_boundary.json';\nimport { MonthsArray, SelectedFeaturesAverageStats, fillDensityColor, renderTimeOptions, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport MapLegend from '../components/MapLegend';\nimport Plot from 'react-plotly.js';\nimport { ColorLegendsData } from '../assets/data/ColorLegendsData';\nimport AFG_districts from \"../assets/data/shapefiles/AFG_districts.json\";\nimport FiltererdJsonFeature from './FiltererdJsonFeature';\nimport { useSelectedFeatureContext } from '../contexts/SelectedFeatureContext';\n\nimport DistrictStats from \"../assets/data/District_Stats.json\"\n\n\nconst WaterProductivity = () => {\n  const [selectedDataType, setSelectedDataType] = useState('WaterProductivity');\n  const [intervalType, setIntervalType] = useState('Yearly');\n  const [selectedTime, setSelectedTime] = useState(5);\n  const { filteredFeaturesItems, selectedView, selectedFeatureName } = useSelectedFeatureContext();\n  const SelectedFeaturesStatsData = SelectedFeaturesAverageStats(filteredFeaturesItems)\n\n\n\n\n\n\n\n\n  function DistrictOnEachfeature(feature, layer) {\n    layer.on(\"mouseover\", function (e) {\n      const DataItem = DistrictStats.find(\n        (item) => item.DISTRICT === feature.properties.NAME\n      );\n\n      const biomassProduction = (DataItem['NPP'][selectedTime] * 22.22 * 0.1 / DataItem['AETI'][selectedTime]).toFixed(2);\n\n\n      const popupContent = `\n            <div>\n              District: ${feature.properties.NAME}<br/>\n              Biomass Water Productivity: ${biomassProduction} ${intervalType === \"Yearly\" ? \"(kg/ha/year)\" : \"(kg/ha/month)\"\n        }<br/>\n            </div>\n          `;\n      layer.bindTooltip(popupContent, { sticky: true });\n      layer.openTooltip();\n    });\n\n    layer.on(\"mouseout\", function () {\n      layer.closeTooltip();\n    });\n  }\n\n  const ColorLegendsDataItem = ColorLegendsData[`${intervalType}_${selectedDataType}`];\n\n\n  const DistrictStyle = (feature) => {\n    if (selectedTime ) {\n      const getDensityFromData = (name) => {\n        const DataItem = DistrictStats.find((item) => item.DISTRICT === name);\n        return DataItem ? DataItem['NPP'][selectedTime] * 22.22 * 0.1 / DataItem['AETI'][selectedTime] : null;\n      };\n      const density = getDensityFromData(feature.properties.NAME);\n      return {\n        // fillColor: density ? selectedDensityFunc(density):\"none\",\n        fillColor: ColorLegendsDataItem ? fillDensityColor(ColorLegendsDataItem, density) : \"none\",\n        weight: 1,\n        opacity: 1,\n        color: \"black\",\n        dashArray: \"2\",\n        fillOpacity: 1,\n      };\n    }\n  };\n\n\n  const handleSelectedDataChange = (e) => {\n    setSelectedDataType(e.target.value);\n  };\n\n  const handleIntervalTypeChange = (e) => {\n    setIntervalType(e.target.value);\n    setSelectedTime('')\n  };\n  return (\n    <div className='dasboard_page_container'>\n      <div className='main_dashboard'>\n        <div className='left_panel_equal'>\n\n\n\n\n\n          \n\n          <div className=\"card_container\">\n          <div className='defination_container'>\n              <h4>Biomass Water Productivity</h4>\n            </div>\n\n            <Plot\n              data={[\n                {\n                  x: MonthsArray,\n                  y: SelectedFeaturesStatsData.NPP.map((value, index) => (value * 22.222 * 0.1) / (SelectedFeaturesStatsData.AETI[index])),\n                  type: \"scatter\",\n                  mode: \"lines+markers\",\n                  marker: { color: \"green\" },\n                },\n              ]}\n              layout={{\n                xaxis: {\n                  title: \"Year\",\n                },\n                yaxis: {\n                  title: \"Biomass Water Productivity\"\n                },\n\n                // yaxis: {\n                //   title: `${selectedDataType === \"NPP\"\n                //     ? \"Biomass Water Productivity\"\n                //     // : selectedDataType === \"AridityIndex\"\n                //     //   ? \"Aridity Index\"\n                //     : null\n                //     } ${selectedDataType === \"AridityIndex\"\n                //       ? \"\"\n                //       : selectedDataType === \"NPP\"\n                //         ? `(${intervalType === \"Yearly\"\n                //           ? \"kg/ha/year\"\n                //           : \"kg/ha/month\"\n                //         })`\n                //         : `(${intervalType === \"Yearly\" ? \"mm/year\" : \"mm/month\"\n                //         })`\n                //     }`,\n                // },\n              }}\n              style={{ width: \"100%\", height: \"calc(100% - 100px)\" }}\n            />\n          </div>\n\n        </div>\n        <div className='right_panel_equal' >\n          <div className='card_container' style={{ height: \"100%\" }}>\n            <MapContainer\n              fullscreenControl={true}\n              center={[34, 67]}\n              style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n              zoom={setInitialMapZoom()}\n              maxBounds={[[23, 49], [41, 82]]}\n              // maxZoom={8}\n              minZoom={setInitialMapZoom()}\n              keyboard={false}\n              dragging={setDragging()}\n              // attributionControl={false}\n              // scrollWheelZoom={false}\n              doubleClickZoom={false}\n            >\n              <div className='map_options_container'>\n\n\n                <select className='m-1' value={selectedDataType} onChange={handleSelectedDataChange}>\n                  <option value=\"WaterProductivity\">Biomass Water Productivity</option>\n                  {/* <option value=\"RET\">Potential ET</option> */}\n\n                </select>\n                <select\n                  className=\"m-1\"\n                  value={selectedTime}\n                  onChange={(e) => setSelectedTime(e.target.value)}\n                >\n                  {renderTimeOptions(intervalType)}\n                </select>\n\n\n\n              </div>\n\n\n\n              {selectedDataType === \"WaterProductivity\" && selectedTime !== '' && intervalType ? (\n                <>\n                  {ColorLegendsDataItem && (\n                    <MapLegend ColorLegendsDataItem={ColorLegendsDataItem} />\n                  )}\n\n                  <GeoJSON\n                    key={selectedDataType + selectedTime + intervalType}\n                    style={DistrictStyle}\n                    data={AFG_districts.features}\n                    onEachFeature={DistrictOnEachfeature}\n                  />\n                </>\n              ) : (\n                <GeoJSON\n                  style={{\n                    fillColor: \"black\",\n                    weight: 2,\n                    color: \"black\",\n                    fillOpacity: \"0.001\",\n                    interactive: false,\n                  }}\n                  data={AfghanistanCountry.features}\n                // onEachFeature={DistrictOnEachfeature}\n                />\n              )}\n\n              <FiltererdJsonFeature />\n\n\n\n\n\n\n\n\n              <BaseMap />\n\n            </MapContainer>\n          </div>\n        </div>\n\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default WaterProductivity"],"names":["ColorLegendsData","Yearly_PCP","Title","Unit","Value","Colors","MaxValue","MinValue","Monthly_PCP","Yearly_AETI","Monthly_AETI","Yearly_RET","Monthly_RET","Yearly_AridityIndex","Monthly_AridityIndex","Yearly_NPP","Monthly_NPP","Yearly_WaterProductivity","Monthly_WaterProductivity","Yearly_ETB","Monthly_ETB","Yearly_ETG","Monthly_ETG","_ref","ColorLegendsDataItem","gradientColors","join","firstColor","lastColor","length","_jsxs","className","children","_jsx","style","borderRight","concat","backgroundImage","borderLeft","FiltererdJsonFeature","selectedView","selectedFeatureName","useSelectedFeatureContext","map","useMap","intialZoom","setInitialMapZoom","filteredData","selectedFeatureData","AFG_water_basin","find","feature","properties","NAME","AFG_watershed","AFG_provinces","AFG_districts","AFG_boundary","useEffect","bounds","L","geometry","getBounds","flyToBounds","flyTo","mapCenter","Pane","name","zIndex","GeoJSON","fillColor","weight","color","fillOpacity","data","WaterProductivity","selectedDataType","setSelectedDataType","useState","intervalType","setIntervalType","selectedTime","setSelectedTime","filteredFeaturesItems","SelectedFeaturesStatsData","SelectedFeaturesAverageStats","Plot","x","MonthsArray","y","NPP","value","index","AETI","type","mode","marker","layout","xaxis","title","yaxis","width","height","MapContainer","fullscreenControl","center","backgroundColor","border","margin","zoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","onChange","e","target","renderTimeOptions","_Fragment","MapLegend","density","DataItem","DistrictStats","item","DISTRICT","getDensityFromData","fillDensityColor","opacity","dashArray","onEachFeature","layer","on","biomassProduction","toFixed","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","interactive","AfghanistanCountry","BaseMap"],"sourceRoot":""}